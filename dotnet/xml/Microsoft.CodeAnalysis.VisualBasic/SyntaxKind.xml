<Type Name="SyntaxKind" FullName="Microsoft.CodeAnalysis.VisualBasic.SyntaxKind">
  <TypeSignature Language="C#" Value="public enum SyntaxKind" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed SyntaxKind extends System.Enum" />
  <TypeSignature Language="DocId" Value="T:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind" />
  <TypeSignature Language="VB.NET" Value="Public Enum SyntaxKind" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
    <AssemblyVersion>2.4.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Enum</BaseTypeName>
  </Base>
  <Docs>
    <summary>
 Enumeration with all Visual Basic syntax node kinds.
 </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="AddAssignmentStatement">
      <MemberSignature Language="C#" Value="AddAssignmentStatement" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind AddAssignmentStatement = unsigned int16(249)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.AddAssignmentStatement" />
      <MemberSignature Language="VB.NET" Value="AddAssignmentStatement" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>249</MemberValue>
      <Docs>
        <summary>
 Represents a simple, compound, or Mid assignment statement. Which one can be
 determined by checking the Kind.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="AddExpression">
      <MemberSignature Language="C#" Value="AddExpression" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind AddExpression = unsigned int16(307)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.AddExpression" />
      <MemberSignature Language="VB.NET" Value="AddExpression" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>307</MemberValue>
      <Docs>
        <summary>
 Represents a binary operator. The Kind property classifies the operators into
 similar kind of operators (arithmetic, relational, logical or string); the
 exact operation being performed is determined by the Operator property.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="AddHandlerAccessorBlock">
      <MemberSignature Language="C#" Value="AddHandlerAccessorBlock" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind AddHandlerAccessorBlock = unsigned int16(85)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.AddHandlerAccessorBlock" />
      <MemberSignature Language="VB.NET" Value="AddHandlerAccessorBlock" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>85</MemberValue>
      <Docs>
        <summary>
 Represents an accessor block member declaration: A declaration that has a
 beginning declaration, a body of executable statements and an end statement.
 Examples include property accessors and custom event accessors.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="AddHandlerAccessorStatement">
      <MemberSignature Language="C#" Value="AddHandlerAccessorStatement" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind AddHandlerAccessorStatement = unsigned int16(107)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.AddHandlerAccessorStatement" />
      <MemberSignature Language="VB.NET" Value="AddHandlerAccessorStatement" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>107</MemberValue>
      <Docs>
        <summary>
 Represents a Get or Set accessor on a property declaration or an AddHandler,
 RemoveHandler or RaiseEvent accessor on a custom event declaration. The Kind of
 the node determines what kind of accessor this is. This statement is always the
 Begin of a BlockNode, and the body of the accessor is the Body of that node.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="AddHandlerKeyword">
      <MemberSignature Language="C#" Value="AddHandlerKeyword" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind AddHandlerKeyword = unsigned int16(413)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.AddHandlerKeyword" />
      <MemberSignature Language="VB.NET" Value="AddHandlerKeyword" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>413</MemberValue>
      <Docs>
        <summary>
 Represents a single keyword in a VB program. Which keyword can be determined
 from the Kind property.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="AddHandlerStatement">
      <MemberSignature Language="C#" Value="AddHandlerStatement" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind AddHandlerStatement = unsigned int16(262)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.AddHandlerStatement" />
      <MemberSignature Language="VB.NET" Value="AddHandlerStatement" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>262</MemberValue>
      <Docs>
        <summary>
 Represents an AddHandler or RemoveHandler statement. The Kind property
 determines which one.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="AddressOfExpression">
      <MemberSignature Language="C#" Value="AddressOfExpression" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind AddressOfExpression = unsigned int16(336)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.AddressOfExpression" />
      <MemberSignature Language="VB.NET" Value="AddressOfExpression" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>336</MemberValue>
      <Docs>
        <summary>
 Describes a unary operator: Plus, Negate, Not or AddressOf.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="AddressOfKeyword">
      <MemberSignature Language="C#" Value="AddressOfKeyword" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind AddressOfKeyword = unsigned int16(414)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.AddressOfKeyword" />
      <MemberSignature Language="VB.NET" Value="AddressOfKeyword" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>414</MemberValue>
      <Docs>
        <summary>
 Represents a single keyword in a VB program. Which keyword can be determined
 from the Kind property.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="AggregateClause">
      <MemberSignature Language="C#" Value="AggregateClause" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind AggregateClause = unsigned int16(361)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.AggregateClause" />
      <MemberSignature Language="VB.NET" Value="AggregateClause" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>361</MemberValue>
      <Docs>
        <summary>
 Represents an Aggregate query operator.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="AggregateKeyword">
      <MemberSignature Language="C#" Value="AggregateKeyword" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind AggregateKeyword = unsigned int16(584)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.AggregateKeyword" />
      <MemberSignature Language="VB.NET" Value="AggregateKeyword" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>584</MemberValue>
      <Docs>
        <summary>
 Represents a single keyword in a VB program. Which keyword can be determined
 from the Kind property.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="AggregationRangeVariable">
      <MemberSignature Language="C#" Value="AggregationRangeVariable" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind AggregationRangeVariable = unsigned int16(355)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.AggregationRangeVariable" />
      <MemberSignature Language="VB.NET" Value="AggregationRangeVariable" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>355</MemberValue>
      <Docs>
        <summary>
 Describes a single variable of the form "[x [As Type] =] aggregation-function"
 for use in the Into clause of Aggregate or Group By or Group Join query
 operators.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="AliasKeyword">
      <MemberSignature Language="C#" Value="AliasKeyword" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind AliasKeyword = unsigned int16(415)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.AliasKeyword" />
      <MemberSignature Language="VB.NET" Value="AliasKeyword" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>415</MemberValue>
      <Docs>
        <summary>
 Represents a single keyword in a VB program. Which keyword can be determined
 from the Kind property.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="AllKeyword">
      <MemberSignature Language="C#" Value="AllKeyword" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind AllKeyword = unsigned int16(585)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.AllKeyword" />
      <MemberSignature Language="VB.NET" Value="AllKeyword" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>585</MemberValue>
      <Docs>
        <summary>
 Represents a single keyword in a VB program. Which keyword can be determined
 from the Kind property.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="AmpersandEqualsToken">
      <MemberSignature Language="C#" Value="AmpersandEqualsToken" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind AmpersandEqualsToken = unsigned int16(664)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.AmpersandEqualsToken" />
      <MemberSignature Language="VB.NET" Value="AmpersandEqualsToken" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>664</MemberValue>
      <Docs>
        <summary>
 Represents a single punctuation mark or operator in a VB program. Which one can
 be determined from the Kind property.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="AmpersandToken">
      <MemberSignature Language="C#" Value="AmpersandToken" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind AmpersandToken = unsigned int16(638)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.AmpersandToken" />
      <MemberSignature Language="VB.NET" Value="AmpersandToken" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>638</MemberValue>
      <Docs>
        <summary>
 Represents a single punctuation mark or operator in a VB program. Which one can
 be determined from the Kind property.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="AndAlsoExpression">
      <MemberSignature Language="C#" Value="AndAlsoExpression" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind AndAlsoExpression = unsigned int16(332)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.AndAlsoExpression" />
      <MemberSignature Language="VB.NET" Value="AndAlsoExpression" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>332</MemberValue>
      <Docs>
        <summary>
 Represents a binary operator. The Kind property classifies the operators into
 similar kind of operators (arithmetic, relational, logical or string); the
 exact operation being performed is determined by the Operator property.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="AndAlsoKeyword">
      <MemberSignature Language="C#" Value="AndAlsoKeyword" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind AndAlsoKeyword = unsigned int16(417)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.AndAlsoKeyword" />
      <MemberSignature Language="VB.NET" Value="AndAlsoKeyword" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>417</MemberValue>
      <Docs>
        <summary>
 Represents a single keyword in a VB program. Which keyword can be determined
 from the Kind property.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="AndExpression">
      <MemberSignature Language="C#" Value="AndExpression" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind AndExpression = unsigned int16(330)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.AndExpression" />
      <MemberSignature Language="VB.NET" Value="AndExpression" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>330</MemberValue>
      <Docs>
        <summary>
 Represents a binary operator. The Kind property classifies the operators into
 similar kind of operators (arithmetic, relational, logical or string); the
 exact operation being performed is determined by the Operator property.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="AndKeyword">
      <MemberSignature Language="C#" Value="AndKeyword" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind AndKeyword = unsigned int16(416)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.AndKeyword" />
      <MemberSignature Language="VB.NET" Value="AndKeyword" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>416</MemberValue>
      <Docs>
        <summary>
 Represents a single keyword in a VB program. Which keyword can be determined
 from the Kind property.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="AnonymousObjectCreationExpression">
      <MemberSignature Language="C#" Value="AnonymousObjectCreationExpression" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind AnonymousObjectCreationExpression = unsigned int16(298)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.AnonymousObjectCreationExpression" />
      <MemberSignature Language="VB.NET" Value="AnonymousObjectCreationExpression" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>298</MemberValue>
      <Docs>
        <summary>
 Represents a New expression that create an object of anonymous type.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="AnsiKeyword">
      <MemberSignature Language="C#" Value="AnsiKeyword" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind AnsiKeyword = unsigned int16(586)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.AnsiKeyword" />
      <MemberSignature Language="VB.NET" Value="AnsiKeyword" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>586</MemberValue>
      <Docs>
        <summary>
 Represents a single keyword in a VB program. Which keyword can be determined
 from the Kind property.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="ArgumentList">
      <MemberSignature Language="C#" Value="ArgumentList" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind ArgumentList = unsigned int16(347)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.ArgumentList" />
      <MemberSignature Language="VB.NET" Value="ArgumentList" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>347</MemberValue>
      <Docs>
        <summary>
 Represents a parenthesized argument list.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="ArrayCreationExpression">
      <MemberSignature Language="C#" Value="ArrayCreationExpression" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind ArrayCreationExpression = unsigned int16(301)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.ArrayCreationExpression" />
      <MemberSignature Language="VB.NET" Value="ArrayCreationExpression" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>301</MemberValue>
      <Docs>
        <summary>
 Represents an expression that creates a new array.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="ArrayRankSpecifier">
      <MemberSignature Language="C#" Value="ArrayRankSpecifier" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind ArrayRankSpecifier = unsigned int16(134)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.ArrayRankSpecifier" />
      <MemberSignature Language="VB.NET" Value="ArrayRankSpecifier" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>134</MemberValue>
      <Docs>
        <summary>
 Represents a modifier that describes an array type, without bounds, such as
 "()" or "(,)".
 </summary>
      </Docs>
    </Member>
    <Member MemberName="ArrayType">
      <MemberSignature Language="C#" Value="ArrayType" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind ArrayType = unsigned int16(396)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.ArrayType" />
      <MemberSignature Language="VB.NET" Value="ArrayType" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>396</MemberValue>
      <Docs>
        <summary>
 Represents an array type, such as "A() or "A(,)", without bounds specified for
 the array.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="AscendingKeyword">
      <MemberSignature Language="C#" Value="AscendingKeyword" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind AscendingKeyword = unsigned int16(587)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.AscendingKeyword" />
      <MemberSignature Language="VB.NET" Value="AscendingKeyword" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>587</MemberValue>
      <Docs>
        <summary>
 Represents a single keyword in a VB program. Which keyword can be determined
 from the Kind property.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="AscendingOrdering">
      <MemberSignature Language="C#" Value="AscendingOrdering" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind AscendingOrdering = unsigned int16(375)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.AscendingOrdering" />
      <MemberSignature Language="VB.NET" Value="AscendingOrdering" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>375</MemberValue>
      <Docs>
        <summary>
 An expression to order by, plus an optional ordering. The Kind indicates
 whether to order in ascending or descending order.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="AsKeyword">
      <MemberSignature Language="C#" Value="AsKeyword" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind AsKeyword = unsigned int16(418)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.AsKeyword" />
      <MemberSignature Language="VB.NET" Value="AsKeyword" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>418</MemberValue>
      <Docs>
        <summary>
 Represents a single keyword in a VB program. Which keyword can be determined
 from the Kind property.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="AsNewClause">
      <MemberSignature Language="C#" Value="AsNewClause" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind AsNewClause = unsigned int16(124)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.AsNewClause" />
      <MemberSignature Language="VB.NET" Value="AsNewClause" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>124</MemberValue>
      <Docs>
        <summary>
 Represents an "As New {type-name} [arguments] [initializers]" clause in a
 declaration. The type has optional attributes associated with it, although
 attributes are not permitted in many places where this node occurs (they are
 permitted, for example, on automatically implemented properties.)
 </summary>
      </Docs>
    </Member>
    <Member MemberName="AssemblyKeyword">
      <MemberSignature Language="C#" Value="AssemblyKeyword" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind AssemblyKeyword = unsigned int16(588)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.AssemblyKeyword" />
      <MemberSignature Language="VB.NET" Value="AssemblyKeyword" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>588</MemberValue>
      <Docs>
        <summary>
 Represents a single keyword in a VB program. Which keyword can be determined
 from the Kind property.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="AsteriskEqualsToken">
      <MemberSignature Language="C#" Value="AsteriskEqualsToken" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind AsteriskEqualsToken = unsigned int16(665)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.AsteriskEqualsToken" />
      <MemberSignature Language="VB.NET" Value="AsteriskEqualsToken" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>665</MemberValue>
      <Docs>
        <summary>
 Represents a single punctuation mark or operator in a VB program. Which one can
 be determined from the Kind property.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="AsteriskToken">
      <MemberSignature Language="C#" Value="AsteriskToken" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind AsteriskToken = unsigned int16(647)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.AsteriskToken" />
      <MemberSignature Language="VB.NET" Value="AsteriskToken" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>647</MemberValue>
      <Docs>
        <summary>
 Represents a single punctuation mark or operator in a VB program. Which one can
 be determined from the Kind property.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="AsyncKeyword">
      <MemberSignature Language="C#" Value="AsyncKeyword" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind AsyncKeyword = unsigned int16(630)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.AsyncKeyword" />
      <MemberSignature Language="VB.NET" Value="AsyncKeyword" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>630</MemberValue>
      <Docs>
        <summary>
 Represents a single keyword in a VB program. Which keyword can be determined
 from the Kind property.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="AtToken">
      <MemberSignature Language="C#" Value="AtToken" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind AtToken = unsigned int16(635)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.AtToken" />
      <MemberSignature Language="VB.NET" Value="AtToken" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>635</MemberValue>
      <Docs>
        <summary>
 Represents a single punctuation mark or operator in a VB program. Which one can
 be determined from the Kind property.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="Attribute">
      <MemberSignature Language="C#" Value="Attribute" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind Attribute = unsigned int16(136)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.Attribute" />
      <MemberSignature Language="VB.NET" Value="Attribute" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>136</MemberValue>
      <Docs>
        <summary>
 Represents a single attribute declaration within an attribute list.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="AttributeList">
      <MemberSignature Language="C#" Value="AttributeList" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind AttributeList = unsigned int16(135)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.AttributeList" />
      <MemberSignature Language="VB.NET" Value="AttributeList" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>135</MemberValue>
      <Docs>
        <summary>
 Represents a group of attributes within "&lt;" and "&gt;" brackets.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="AttributesStatement">
      <MemberSignature Language="C#" Value="AttributesStatement" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind AttributesStatement = unsigned int16(138)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.AttributesStatement" />
      <MemberSignature Language="VB.NET" Value="AttributesStatement" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>138</MemberValue>
      <Docs>
        <summary>
 Represents a file-level attribute, in which the attributes have no other
 syntactic element they are attached to.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="AttributeTarget">
      <MemberSignature Language="C#" Value="AttributeTarget" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind AttributeTarget = unsigned int16(137)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.AttributeTarget" />
      <MemberSignature Language="VB.NET" Value="AttributeTarget" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>137</MemberValue>
      <Docs>
        <summary>
 Represents a single attribute declaration within an attribute list.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="AutoKeyword">
      <MemberSignature Language="C#" Value="AutoKeyword" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind AutoKeyword = unsigned int16(589)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.AutoKeyword" />
      <MemberSignature Language="VB.NET" Value="AutoKeyword" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>589</MemberValue>
      <Docs>
        <summary>
 Represents a single keyword in a VB program. Which keyword can be determined
 from the Kind property.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="AwaitExpression">
      <MemberSignature Language="C#" Value="AwaitExpression" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind AwaitExpression = unsigned int16(412)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.AwaitExpression" />
      <MemberSignature Language="VB.NET" Value="AwaitExpression" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>412</MemberValue>
      <Docs>
        <summary>
 Represent a Await expression.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="AwaitKeyword">
      <MemberSignature Language="C#" Value="AwaitKeyword" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind AwaitKeyword = unsigned int16(631)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.AwaitKeyword" />
      <MemberSignature Language="VB.NET" Value="AwaitKeyword" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>631</MemberValue>
      <Docs>
        <summary>
 Represents a single keyword in a VB program. Which keyword can be determined
 from the Kind property.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="BackslashEqualsToken">
      <MemberSignature Language="C#" Value="BackslashEqualsToken" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind BackslashEqualsToken = unsigned int16(669)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.BackslashEqualsToken" />
      <MemberSignature Language="VB.NET" Value="BackslashEqualsToken" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>669</MemberValue>
      <Docs>
        <summary>
 Represents a single punctuation mark or operator in a VB program. Which one can
 be determined from the Kind property.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="BackslashToken">
      <MemberSignature Language="C#" Value="BackslashToken" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind BackslashToken = unsigned int16(659)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.BackslashToken" />
      <MemberSignature Language="VB.NET" Value="BackslashToken" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>659</MemberValue>
      <Docs>
        <summary>
 Represents a single punctuation mark or operator in a VB program. Which one can
 be determined from the Kind property.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="BadDirectiveTrivia">
      <MemberSignature Language="C#" Value="BadDirectiveTrivia" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind BadDirectiveTrivia = unsigned int16(753)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.BadDirectiveTrivia" />
      <MemberSignature Language="VB.NET" Value="BadDirectiveTrivia" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>753</MemberValue>
      <Docs>
        <summary>
 Represents an unrecognized pre-processing directive. This occurs when the
 parser encounters a hash '#' token at the beginning of a physical line but does
 recognize the text that follows as a valid Visual Basic pre-processing
 directive.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="BadToken">
      <MemberSignature Language="C#" Value="BadToken" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind BadToken = unsigned int16(693)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.BadToken" />
      <MemberSignature Language="VB.NET" Value="BadToken" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>693</MemberValue>
      <Docs>
        <summary>
 Represents a sequence of characters appearing in source with no possible
 meaning in the Visual Basic language (e.g. the semicolon ';'). This token
 should only appear in SkippedTokenTrivia as an artifact of parsing error
 recovery.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="BeginCDataToken">
      <MemberSignature Language="C#" Value="BeginCDataToken" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind BeginCDataToken = unsigned int16(690)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.BeginCDataToken" />
      <MemberSignature Language="VB.NET" Value="BeginCDataToken" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>690</MemberValue>
      <Docs>
        <summary>
 Represents a single punctuation mark or operator in a VB program. Which one can
 be determined from the Kind property.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="BinaryConditionalExpression">
      <MemberSignature Language="C#" Value="BinaryConditionalExpression" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind BinaryConditionalExpression = unsigned int16(337)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.BinaryConditionalExpression" />
      <MemberSignature Language="VB.NET" Value="BinaryConditionalExpression" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>337</MemberValue>
      <Docs>
        <summary>
 Represents a conditional expression, If(condition, true-expr, false-expr) or
 If(expr, nothing-expr).
 </summary>
      </Docs>
    </Member>
    <Member MemberName="BinaryKeyword">
      <MemberSignature Language="C#" Value="BinaryKeyword" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind BinaryKeyword = unsigned int16(590)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.BinaryKeyword" />
      <MemberSignature Language="VB.NET" Value="BinaryKeyword" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>590</MemberValue>
      <Docs>
        <summary>
 Represents a single keyword in a VB program. Which keyword can be determined
 from the Kind property.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="BooleanKeyword">
      <MemberSignature Language="C#" Value="BooleanKeyword" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind BooleanKeyword = unsigned int16(421)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.BooleanKeyword" />
      <MemberSignature Language="VB.NET" Value="BooleanKeyword" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>421</MemberValue>
      <Docs>
        <summary>
 Represents a single keyword in a VB program. Which keyword can be determined
 from the Kind property.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="ByKeyword">
      <MemberSignature Language="C#" Value="ByKeyword" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind ByKeyword = unsigned int16(591)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.ByKeyword" />
      <MemberSignature Language="VB.NET" Value="ByKeyword" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>591</MemberValue>
      <Docs>
        <summary>
 Represents a single keyword in a VB program. Which keyword can be determined
 from the Kind property.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="ByRefKeyword">
      <MemberSignature Language="C#" Value="ByRefKeyword" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind ByRefKeyword = unsigned int16(422)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.ByRefKeyword" />
      <MemberSignature Language="VB.NET" Value="ByRefKeyword" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>422</MemberValue>
      <Docs>
        <summary>
 Represents a single keyword in a VB program. Which keyword can be determined
 from the Kind property.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="ByteKeyword">
      <MemberSignature Language="C#" Value="ByteKeyword" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind ByteKeyword = unsigned int16(423)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.ByteKeyword" />
      <MemberSignature Language="VB.NET" Value="ByteKeyword" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>423</MemberValue>
      <Docs>
        <summary>
 Represents a single keyword in a VB program. Which keyword can be determined
 from the Kind property.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="ByValKeyword">
      <MemberSignature Language="C#" Value="ByValKeyword" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind ByValKeyword = unsigned int16(424)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.ByValKeyword" />
      <MemberSignature Language="VB.NET" Value="ByValKeyword" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>424</MemberValue>
      <Docs>
        <summary>
 Represents a single keyword in a VB program. Which keyword can be determined
 from the Kind property.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="CallKeyword">
      <MemberSignature Language="C#" Value="CallKeyword" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind CallKeyword = unsigned int16(425)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.CallKeyword" />
      <MemberSignature Language="VB.NET" Value="CallKeyword" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>425</MemberValue>
      <Docs>
        <summary>
 Represents a single keyword in a VB program. Which keyword can be determined
 from the Kind property.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="CallStatement">
      <MemberSignature Language="C#" Value="CallStatement" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind CallStatement = unsigned int16(261)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.CallStatement" />
      <MemberSignature Language="VB.NET" Value="CallStatement" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>261</MemberValue>
      <Docs>
        <summary>
 Represent an call statement (also known as a invocation statement).
 </summary>
      </Docs>
    </Member>
    <Member MemberName="CaretEqualsToken">
      <MemberSignature Language="C#" Value="CaretEqualsToken" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind CaretEqualsToken = unsigned int16(670)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.CaretEqualsToken" />
      <MemberSignature Language="VB.NET" Value="CaretEqualsToken" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>670</MemberValue>
      <Docs>
        <summary>
 Represents a single punctuation mark or operator in a VB program. Which one can
 be determined from the Kind property.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="CaretToken">
      <MemberSignature Language="C#" Value="CaretToken" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind CaretToken = unsigned int16(662)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.CaretToken" />
      <MemberSignature Language="VB.NET" Value="CaretToken" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>662</MemberValue>
      <Docs>
        <summary>
 Represents a single punctuation mark or operator in a VB program. Which one can
 be determined from the Kind property.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="CaseBlock">
      <MemberSignature Language="C#" Value="CaseBlock" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind CaseBlock = unsigned int16(207)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.CaseBlock" />
      <MemberSignature Language="VB.NET" Value="CaseBlock" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>207</MemberValue>
      <Docs>
        <summary>
 Represents a case statement and its subsequent block.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="CaseElseBlock">
      <MemberSignature Language="C#" Value="CaseElseBlock" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind CaseElseBlock = unsigned int16(210)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.CaseElseBlock" />
      <MemberSignature Language="VB.NET" Value="CaseElseBlock" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>210</MemberValue>
      <Docs>
        <summary>
 Represents a case statement and its subsequent block.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="CaseElseStatement">
      <MemberSignature Language="C#" Value="CaseElseStatement" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind CaseElseStatement = unsigned int16(212)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.CaseElseStatement" />
      <MemberSignature Language="VB.NET" Value="CaseElseStatement" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>212</MemberValue>
      <Docs>
        <summary>
 Represents a Case or Case Else statement. This statement is always the Begin of
 a CaseBlock. If this is a Case Else statement, the Kind=CaseElse, otherwise the
 Kind=Case.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="CaseEqualsClause">
      <MemberSignature Language="C#" Value="CaseEqualsClause" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind CaseEqualsClause = unsigned int16(216)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.CaseEqualsClause" />
      <MemberSignature Language="VB.NET" Value="CaseEqualsClause" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>216</MemberValue>
      <Docs>
        <summary>
 Represents a relation clause in a Case statement, such as "Is &gt; expression".
 </summary>
      </Docs>
    </Member>
    <Member MemberName="CaseGreaterThanClause">
      <MemberSignature Language="C#" Value="CaseGreaterThanClause" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind CaseGreaterThanClause = unsigned int16(223)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.CaseGreaterThanClause" />
      <MemberSignature Language="VB.NET" Value="CaseGreaterThanClause" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>223</MemberValue>
      <Docs>
        <summary>
 Represents a relation clause in a Case statement, such as "Is &gt; expression".
 </summary>
      </Docs>
    </Member>
    <Member MemberName="CaseGreaterThanOrEqualClause">
      <MemberSignature Language="C#" Value="CaseGreaterThanOrEqualClause" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind CaseGreaterThanOrEqualClause = unsigned int16(222)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.CaseGreaterThanOrEqualClause" />
      <MemberSignature Language="VB.NET" Value="CaseGreaterThanOrEqualClause" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>222</MemberValue>
      <Docs>
        <summary>
 Represents a relation clause in a Case statement, such as "Is &gt; expression".
 </summary>
      </Docs>
    </Member>
    <Member MemberName="CaseKeyword">
      <MemberSignature Language="C#" Value="CaseKeyword" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind CaseKeyword = unsigned int16(426)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.CaseKeyword" />
      <MemberSignature Language="VB.NET" Value="CaseKeyword" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>426</MemberValue>
      <Docs>
        <summary>
 Represents a single keyword in a VB program. Which keyword can be determined
 from the Kind property.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="CaseLessThanClause">
      <MemberSignature Language="C#" Value="CaseLessThanClause" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind CaseLessThanClause = unsigned int16(218)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.CaseLessThanClause" />
      <MemberSignature Language="VB.NET" Value="CaseLessThanClause" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>218</MemberValue>
      <Docs>
        <summary>
 Represents a relation clause in a Case statement, such as "Is &gt; expression".
 </summary>
      </Docs>
    </Member>
    <Member MemberName="CaseLessThanOrEqualClause">
      <MemberSignature Language="C#" Value="CaseLessThanOrEqualClause" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind CaseLessThanOrEqualClause = unsigned int16(219)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.CaseLessThanOrEqualClause" />
      <MemberSignature Language="VB.NET" Value="CaseLessThanOrEqualClause" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>219</MemberValue>
      <Docs>
        <summary>
 Represents a relation clause in a Case statement, such as "Is &gt; expression".
 </summary>
      </Docs>
    </Member>
    <Member MemberName="CaseNotEqualsClause">
      <MemberSignature Language="C#" Value="CaseNotEqualsClause" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind CaseNotEqualsClause = unsigned int16(217)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.CaseNotEqualsClause" />
      <MemberSignature Language="VB.NET" Value="CaseNotEqualsClause" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>217</MemberValue>
      <Docs>
        <summary>
 Represents a relation clause in a Case statement, such as "Is &gt; expression".
 </summary>
      </Docs>
    </Member>
    <Member MemberName="CaseStatement">
      <MemberSignature Language="C#" Value="CaseStatement" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind CaseStatement = unsigned int16(211)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.CaseStatement" />
      <MemberSignature Language="VB.NET" Value="CaseStatement" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>211</MemberValue>
      <Docs>
        <summary>
 Represents a Case or Case Else statement. This statement is always the Begin of
 a CaseBlock. If this is a Case Else statement, the Kind=CaseElse, otherwise the
 Kind=Case.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="CatchBlock">
      <MemberSignature Language="C#" Value="CatchBlock" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind CatchBlock = unsigned int16(187)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.CatchBlock" />
      <MemberSignature Language="VB.NET" Value="CatchBlock" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>187</MemberValue>
      <Docs>
        <summary>
 Represents a Catch part of an Try...Catch...Finally...End Try statement,
 consisting of a Catch statement, followed by a body of statements controlled by
 that Catch statement. The Kind property returns which kind of part this is.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="CatchFilterClause">
      <MemberSignature Language="C#" Value="CatchFilterClause" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind CatchFilterClause = unsigned int16(191)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.CatchFilterClause" />
      <MemberSignature Language="VB.NET" Value="CatchFilterClause" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>191</MemberValue>
      <Docs>
        <summary>
 Represents the When/Filter clause of a Catch statement
 </summary>
      </Docs>
    </Member>
    <Member MemberName="CatchKeyword">
      <MemberSignature Language="C#" Value="CatchKeyword" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind CatchKeyword = unsigned int16(427)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.CatchKeyword" />
      <MemberSignature Language="VB.NET" Value="CatchKeyword" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>427</MemberValue>
      <Docs>
        <summary>
 Represents a single keyword in a VB program. Which keyword can be determined
 from the Kind property.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="CatchStatement">
      <MemberSignature Language="C#" Value="CatchStatement" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind CatchStatement = unsigned int16(190)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.CatchStatement" />
      <MemberSignature Language="VB.NET" Value="CatchStatement" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>190</MemberValue>
      <Docs>
        <summary>
 Represents the Catch part of a Try...Catch...Finally...End Try. This
 statement is always the Begin of a CatchPart.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="CBoolKeyword">
      <MemberSignature Language="C#" Value="CBoolKeyword" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind CBoolKeyword = unsigned int16(428)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.CBoolKeyword" />
      <MemberSignature Language="VB.NET" Value="CBoolKeyword" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>428</MemberValue>
      <Docs>
        <summary>
 Represents a single keyword in a VB program. Which keyword can be determined
 from the Kind property.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="CByteKeyword">
      <MemberSignature Language="C#" Value="CByteKeyword" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind CByteKeyword = unsigned int16(429)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.CByteKeyword" />
      <MemberSignature Language="VB.NET" Value="CByteKeyword" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>429</MemberValue>
      <Docs>
        <summary>
 Represents a single keyword in a VB program. Which keyword can be determined
 from the Kind property.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="CCharKeyword">
      <MemberSignature Language="C#" Value="CCharKeyword" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind CCharKeyword = unsigned int16(432)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.CCharKeyword" />
      <MemberSignature Language="VB.NET" Value="CCharKeyword" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>432</MemberValue>
      <Docs>
        <summary>
 Represents a single keyword in a VB program. Which keyword can be determined
 from the Kind property.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="CDateKeyword">
      <MemberSignature Language="C#" Value="CDateKeyword" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind CDateKeyword = unsigned int16(433)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.CDateKeyword" />
      <MemberSignature Language="VB.NET" Value="CDateKeyword" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>433</MemberValue>
      <Docs>
        <summary>
 Represents a single keyword in a VB program. Which keyword can be determined
 from the Kind property.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="CDblKeyword">
      <MemberSignature Language="C#" Value="CDblKeyword" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind CDblKeyword = unsigned int16(435)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.CDblKeyword" />
      <MemberSignature Language="VB.NET" Value="CDblKeyword" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>435</MemberValue>
      <Docs>
        <summary>
 Represents a single keyword in a VB program. Which keyword can be determined
 from the Kind property.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="CDecKeyword">
      <MemberSignature Language="C#" Value="CDecKeyword" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind CDecKeyword = unsigned int16(434)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.CDecKeyword" />
      <MemberSignature Language="VB.NET" Value="CDecKeyword" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>434</MemberValue>
      <Docs>
        <summary>
 Represents a single keyword in a VB program. Which keyword can be determined
 from the Kind property.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="CharacterLiteralExpression">
      <MemberSignature Language="C#" Value="CharacterLiteralExpression" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind CharacterLiteralExpression = unsigned int16(272)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.CharacterLiteralExpression" />
      <MemberSignature Language="VB.NET" Value="CharacterLiteralExpression" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>272</MemberValue>
      <Docs>
        <summary>
 Represents a literal. The kind of literal is determined by the Kind property:
 IntegerLiteral, CharacterLiteral, BooleanLiteral, DecimalLiteral,
 FloatingLiteral, DateLiteral or StringLiteral. The value of the literal can be
 determined by casting the associated Token to the correct type and getting the
 value from the token.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="CharacterLiteralToken">
      <MemberSignature Language="C#" Value="CharacterLiteralToken" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind CharacterLiteralToken = unsigned int16(706)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.CharacterLiteralToken" />
      <MemberSignature Language="VB.NET" Value="CharacterLiteralToken" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>706</MemberValue>
      <Docs>
        <summary>
 Represents an string literal token.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="CharKeyword">
      <MemberSignature Language="C#" Value="CharKeyword" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind CharKeyword = unsigned int16(436)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.CharKeyword" />
      <MemberSignature Language="VB.NET" Value="CharKeyword" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>436</MemberValue>
      <Docs>
        <summary>
 Represents a single keyword in a VB program. Which keyword can be determined
 from the Kind property.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="CIntKeyword">
      <MemberSignature Language="C#" Value="CIntKeyword" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind CIntKeyword = unsigned int16(437)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.CIntKeyword" />
      <MemberSignature Language="VB.NET" Value="CIntKeyword" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>437</MemberValue>
      <Docs>
        <summary>
 Represents a single keyword in a VB program. Which keyword can be determined
 from the Kind property.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="ClassBlock">
      <MemberSignature Language="C#" Value="ClassBlock" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind ClassBlock = unsigned int16(53)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.ClassBlock" />
      <MemberSignature Language="VB.NET" Value="ClassBlock" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>53</MemberValue>
      <Docs>
        <summary>
 Represents a declaration of a Class its contents and the End statement that
 ends it.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="ClassConstraint">
      <MemberSignature Language="C#" Value="ClassConstraint" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind ClassConstraint = unsigned int16(73)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.ClassConstraint" />
      <MemberSignature Language="VB.NET" Value="ClassConstraint" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>73</MemberValue>
      <Docs>
        <summary>
 One of the special type parameter constraints: New, Class or Structure. Which
 kind of special constraint it is can be obtained from the Kind property and is
 one of: NewConstraint, ReferenceConstraint or ValueConstraint.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="ClassKeyword">
      <MemberSignature Language="C#" Value="ClassKeyword" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind ClassKeyword = unsigned int16(438)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.ClassKeyword" />
      <MemberSignature Language="VB.NET" Value="ClassKeyword" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>438</MemberValue>
      <Docs>
        <summary>
 Represents a single keyword in a VB program. Which keyword can be determined
 from the Kind property.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="ClassStatement">
      <MemberSignature Language="C#" Value="ClassStatement" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind ClassStatement = unsigned int16(62)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.ClassStatement" />
      <MemberSignature Language="VB.NET" Value="ClassStatement" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>62</MemberValue>
      <Docs>
        <summary>
 Represents the beginning statement of a Class declaration. This node always
 appears as the Begin of a TypeBlock with Kind=ClassDeclarationBlock.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="CLngKeyword">
      <MemberSignature Language="C#" Value="CLngKeyword" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind CLngKeyword = unsigned int16(439)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.CLngKeyword" />
      <MemberSignature Language="VB.NET" Value="CLngKeyword" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>439</MemberValue>
      <Docs>
        <summary>
 Represents a single keyword in a VB program. Which keyword can be determined
 from the Kind property.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="CloseBraceToken">
      <MemberSignature Language="C#" Value="CloseBraceToken" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind CloseBraceToken = unsigned int16(645)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.CloseBraceToken" />
      <MemberSignature Language="VB.NET" Value="CloseBraceToken" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>645</MemberValue>
      <Docs>
        <summary>
 Represents a single punctuation mark or operator in a VB program. Which one can
 be determined from the Kind property.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="CloseParenToken">
      <MemberSignature Language="C#" Value="CloseParenToken" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind CloseParenToken = unsigned int16(643)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.CloseParenToken" />
      <MemberSignature Language="VB.NET" Value="CloseParenToken" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>643</MemberValue>
      <Docs>
        <summary>
 Represents a single punctuation mark or operator in a VB program. Which one can
 be determined from the Kind property.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="CObjKeyword">
      <MemberSignature Language="C#" Value="CObjKeyword" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind CObjKeyword = unsigned int16(440)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.CObjKeyword" />
      <MemberSignature Language="VB.NET" Value="CObjKeyword" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>440</MemberValue>
      <Docs>
        <summary>
 Represents a single keyword in a VB program. Which keyword can be determined
 from the Kind property.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="CollectionInitializer">
      <MemberSignature Language="C#" Value="CollectionInitializer" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind CollectionInitializer = unsigned int16(302)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.CollectionInitializer" />
      <MemberSignature Language="VB.NET" Value="CollectionInitializer" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>302</MemberValue>
      <Docs>
        <summary>
 Represents an expression that creates a new array without naming the element
 type.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="CollectionRangeVariable">
      <MemberSignature Language="C#" Value="CollectionRangeVariable" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind CollectionRangeVariable = unsigned int16(353)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.CollectionRangeVariable" />
      <MemberSignature Language="VB.NET" Value="CollectionRangeVariable" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>353</MemberValue>
      <Docs>
        <summary>
 Describes a single variable of the form "x [As Type] In expression" for use in
 query expressions.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="ColonEqualsToken">
      <MemberSignature Language="C#" Value="ColonEqualsToken" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind ColonEqualsToken = unsigned int16(663)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.ColonEqualsToken" />
      <MemberSignature Language="VB.NET" Value="ColonEqualsToken" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>663</MemberValue>
      <Docs>
        <summary>
 Represents a single punctuation mark or operator in a VB program. Which one can
 be determined from the Kind property.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="ColonToken">
      <MemberSignature Language="C#" Value="ColonToken" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind ColonToken = unsigned int16(652)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.ColonToken" />
      <MemberSignature Language="VB.NET" Value="ColonToken" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>652</MemberValue>
      <Docs>
        <summary>
 Represents a single punctuation mark or operator in a VB program. Which one can
 be determined from the Kind property.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="ColonTrivia">
      <MemberSignature Language="C#" Value="ColonTrivia" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind ColonTrivia = unsigned int16(731)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.ColonTrivia" />
      <MemberSignature Language="VB.NET" Value="ColonTrivia" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>731</MemberValue>
      <Docs>
        <summary>
 Represents colons that are syntactically insignificant.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="CommaToken">
      <MemberSignature Language="C#" Value="CommaToken" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind CommaToken = unsigned int16(636)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.CommaToken" />
      <MemberSignature Language="VB.NET" Value="CommaToken" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>636</MemberValue>
      <Docs>
        <summary>
 Represents a single punctuation mark or operator in a VB program. Which one can
 be determined from the Kind property.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="CommentTrivia">
      <MemberSignature Language="C#" Value="CommentTrivia" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind CommentTrivia = unsigned int16(732)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.CommentTrivia" />
      <MemberSignature Language="VB.NET" Value="CommentTrivia" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>732</MemberValue>
      <Docs>
        <summary>
 Represents a comment.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="CompareKeyword">
      <MemberSignature Language="C#" Value="CompareKeyword" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind CompareKeyword = unsigned int16(592)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.CompareKeyword" />
      <MemberSignature Language="VB.NET" Value="CompareKeyword" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>592</MemberValue>
      <Docs>
        <summary>
 Represents a single keyword in a VB program. Which keyword can be determined
 from the Kind property.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="CompilationUnit">
      <MemberSignature Language="C#" Value="CompilationUnit" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind CompilationUnit = unsigned int16(38)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.CompilationUnit" />
      <MemberSignature Language="VB.NET" Value="CompilationUnit" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>38</MemberValue>
      <Docs>
        <summary>
 Represents an entire source file of VB code.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="ConcatenateAssignmentStatement">
      <MemberSignature Language="C#" Value="ConcatenateAssignmentStatement" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind ConcatenateAssignmentStatement = unsigned int16(259)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.ConcatenateAssignmentStatement" />
      <MemberSignature Language="VB.NET" Value="ConcatenateAssignmentStatement" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>259</MemberValue>
      <Docs>
        <summary>
 Represents a simple, compound, or Mid assignment statement. Which one can be
 determined by checking the Kind.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="ConcatenateExpression">
      <MemberSignature Language="C#" Value="ConcatenateExpression" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind ConcatenateExpression = unsigned int16(317)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.ConcatenateExpression" />
      <MemberSignature Language="VB.NET" Value="ConcatenateExpression" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>317</MemberValue>
      <Docs>
        <summary>
 Represents a binary operator. The Kind property classifies the operators into
 similar kind of operators (arithmetic, relational, logical or string); the
 exact operation being performed is determined by the Operator property.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="ConditionalAccessExpression">
      <MemberSignature Language="C#" Value="ConditionalAccessExpression" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind ConditionalAccessExpression = unsigned int16(713)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.ConditionalAccessExpression" />
      <MemberSignature Language="VB.NET" Value="ConditionalAccessExpression" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>713</MemberValue>
      <Docs>
        <summary>
 ExpressionSyntax node representing the object conditionally accessed.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="ConflictMarkerTrivia">
      <MemberSignature Language="C#" Value="ConflictMarkerTrivia" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind ConflictMarkerTrivia = unsigned int16(792)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.ConflictMarkerTrivia" />
      <MemberSignature Language="VB.NET" Value="ConflictMarkerTrivia" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>792</MemberValue>
      <Docs>
        <summary>
 Trivia created when merge conflict markers (like "&lt;&lt;&lt;&lt;&lt;&lt;&lt;") are detected in source code
 </summary>
      </Docs>
    </Member>
    <Member MemberName="ConstDirectiveTrivia">
      <MemberSignature Language="C#" Value="ConstDirectiveTrivia" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind ConstDirectiveTrivia = unsigned int16(736)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.ConstDirectiveTrivia" />
      <MemberSignature Language="VB.NET" Value="ConstDirectiveTrivia" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>736</MemberValue>
      <Docs>
        <summary>
 Represents a #Const pre-processing constant declaration appearing in source.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="ConstKeyword">
      <MemberSignature Language="C#" Value="ConstKeyword" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind ConstKeyword = unsigned int16(441)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.ConstKeyword" />
      <MemberSignature Language="VB.NET" Value="ConstKeyword" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>441</MemberValue>
      <Docs>
        <summary>
 Represents a single keyword in a VB program. Which keyword can be determined
 from the Kind property.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="ConstructorBlock">
      <MemberSignature Language="C#" Value="ConstructorBlock" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind ConstructorBlock = unsigned int16(81)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.ConstructorBlock" />
      <MemberSignature Language="VB.NET" Value="ConstructorBlock" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>81</MemberValue>
      <Docs>
        <summary>
 Represents a constructor block declaration: A declaration that has a beginning
 declaration, a body of executable statements and an end statement.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="ContinueDoStatement">
      <MemberSignature Language="C#" Value="ContinueDoStatement" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind ContinueDoStatement = unsigned int16(167)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.ContinueDoStatement" />
      <MemberSignature Language="VB.NET" Value="ContinueDoStatement" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>167</MemberValue>
      <Docs>
        <summary>
 Represents a "Continue (block)" statement. THe kind of block referenced can be
 determined by examining the Kind.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="ContinueForStatement">
      <MemberSignature Language="C#" Value="ContinueForStatement" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind ContinueForStatement = unsigned int16(168)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.ContinueForStatement" />
      <MemberSignature Language="VB.NET" Value="ContinueForStatement" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>168</MemberValue>
      <Docs>
        <summary>
 Represents a "Continue (block)" statement. THe kind of block referenced can be
 determined by examining the Kind.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="ContinueKeyword">
      <MemberSignature Language="C#" Value="ContinueKeyword" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind ContinueKeyword = unsigned int16(443)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.ContinueKeyword" />
      <MemberSignature Language="VB.NET" Value="ContinueKeyword" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>443</MemberValue>
      <Docs>
        <summary>
 Represents a single keyword in a VB program. Which keyword can be determined
 from the Kind property.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="ContinueWhileStatement">
      <MemberSignature Language="C#" Value="ContinueWhileStatement" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind ContinueWhileStatement = unsigned int16(166)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.ContinueWhileStatement" />
      <MemberSignature Language="VB.NET" Value="ContinueWhileStatement" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>166</MemberValue>
      <Docs>
        <summary>
 Represents a "Continue (block)" statement. THe kind of block referenced can be
 determined by examining the Kind.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="CrefOperatorReference">
      <MemberSignature Language="C#" Value="CrefOperatorReference" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind CrefOperatorReference = unsigned int16(409)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.CrefOperatorReference" />
      <MemberSignature Language="VB.NET" Value="CrefOperatorReference" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>409</MemberValue>
      <Docs>
        <summary>To be added.</summary>
      </Docs>
    </Member>
    <Member MemberName="CrefReference">
      <MemberSignature Language="C#" Value="CrefReference" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind CrefReference = unsigned int16(404)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.CrefReference" />
      <MemberSignature Language="VB.NET" Value="CrefReference" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>404</MemberValue>
      <Docs>
        <summary>
 Syntax node class that represents a value of 'cref' attribute inside
 documentation comment trivia.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="CrefSignature">
      <MemberSignature Language="C#" Value="CrefSignature" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind CrefSignature = unsigned int16(407)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.CrefSignature" />
      <MemberSignature Language="VB.NET" Value="CrefSignature" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>407</MemberValue>
      <Docs>
        <summary>
 Represents a parenthesized list of argument types for a signature inside
 CrefReferenceSyntax syntax.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="CrefSignaturePart">
      <MemberSignature Language="C#" Value="CrefSignaturePart" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind CrefSignaturePart = unsigned int16(408)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.CrefSignaturePart" />
      <MemberSignature Language="VB.NET" Value="CrefSignaturePart" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>408</MemberValue>
      <Docs>
        <summary>To be added.</summary>
      </Docs>
    </Member>
    <Member MemberName="CSByteKeyword">
      <MemberSignature Language="C#" Value="CSByteKeyword" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind CSByteKeyword = unsigned int16(444)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.CSByteKeyword" />
      <MemberSignature Language="VB.NET" Value="CSByteKeyword" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>444</MemberValue>
      <Docs>
        <summary>
 Represents a single keyword in a VB program. Which keyword can be determined
 from the Kind property.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="CShortKeyword">
      <MemberSignature Language="C#" Value="CShortKeyword" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind CShortKeyword = unsigned int16(445)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.CShortKeyword" />
      <MemberSignature Language="VB.NET" Value="CShortKeyword" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>445</MemberValue>
      <Docs>
        <summary>
 Represents a single keyword in a VB program. Which keyword can be determined
 from the Kind property.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="CSngKeyword">
      <MemberSignature Language="C#" Value="CSngKeyword" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind CSngKeyword = unsigned int16(446)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.CSngKeyword" />
      <MemberSignature Language="VB.NET" Value="CSngKeyword" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>446</MemberValue>
      <Docs>
        <summary>
 Represents a single keyword in a VB program. Which keyword can be determined
 from the Kind property.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="CStrKeyword">
      <MemberSignature Language="C#" Value="CStrKeyword" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind CStrKeyword = unsigned int16(447)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.CStrKeyword" />
      <MemberSignature Language="VB.NET" Value="CStrKeyword" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>447</MemberValue>
      <Docs>
        <summary>
 Represents a single keyword in a VB program. Which keyword can be determined
 from the Kind property.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="CTypeExpression">
      <MemberSignature Language="C#" Value="CTypeExpression" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind CTypeExpression = unsigned int16(303)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.CTypeExpression" />
      <MemberSignature Language="VB.NET" Value="CTypeExpression" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>303</MemberValue>
      <Docs>
        <summary>To be added.</summary>
      </Docs>
    </Member>
    <Member MemberName="CTypeKeyword">
      <MemberSignature Language="C#" Value="CTypeKeyword" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind CTypeKeyword = unsigned int16(448)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.CTypeKeyword" />
      <MemberSignature Language="VB.NET" Value="CTypeKeyword" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>448</MemberValue>
      <Docs>
        <summary>
 Represents a single keyword in a VB program. Which keyword can be determined
 from the Kind property.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="CUIntKeyword">
      <MemberSignature Language="C#" Value="CUIntKeyword" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind CUIntKeyword = unsigned int16(449)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.CUIntKeyword" />
      <MemberSignature Language="VB.NET" Value="CUIntKeyword" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>449</MemberValue>
      <Docs>
        <summary>
 Represents a single keyword in a VB program. Which keyword can be determined
 from the Kind property.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="CULngKeyword">
      <MemberSignature Language="C#" Value="CULngKeyword" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind CULngKeyword = unsigned int16(450)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.CULngKeyword" />
      <MemberSignature Language="VB.NET" Value="CULngKeyword" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>450</MemberValue>
      <Docs>
        <summary>
 Represents a single keyword in a VB program. Which keyword can be determined
 from the Kind property.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="CUShortKeyword">
      <MemberSignature Language="C#" Value="CUShortKeyword" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind CUShortKeyword = unsigned int16(453)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.CUShortKeyword" />
      <MemberSignature Language="VB.NET" Value="CUShortKeyword" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>453</MemberValue>
      <Docs>
        <summary>
 Represents a single keyword in a VB program. Which keyword can be determined
 from the Kind property.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="CustomKeyword">
      <MemberSignature Language="C#" Value="CustomKeyword" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind CustomKeyword = unsigned int16(593)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.CustomKeyword" />
      <MemberSignature Language="VB.NET" Value="CustomKeyword" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>593</MemberValue>
      <Docs>
        <summary>
 Represents a single keyword in a VB program. Which keyword can be determined
 from the Kind property.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="DateKeyword">
      <MemberSignature Language="C#" Value="DateKeyword" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind DateKeyword = unsigned int16(454)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.DateKeyword" />
      <MemberSignature Language="VB.NET" Value="DateKeyword" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>454</MemberValue>
      <Docs>
        <summary>
 Represents a single keyword in a VB program. Which keyword can be determined
 from the Kind property.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="DateLiteralExpression">
      <MemberSignature Language="C#" Value="DateLiteralExpression" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind DateLiteralExpression = unsigned int16(276)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.DateLiteralExpression" />
      <MemberSignature Language="VB.NET" Value="DateLiteralExpression" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>276</MemberValue>
      <Docs>
        <summary>
 Represents a literal. The kind of literal is determined by the Kind property:
 IntegerLiteral, CharacterLiteral, BooleanLiteral, DecimalLiteral,
 FloatingLiteral, DateLiteral or StringLiteral. The value of the literal can be
 determined by casting the associated Token to the correct type and getting the
 value from the token.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="DateLiteralToken">
      <MemberSignature Language="C#" Value="DateLiteralToken" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind DateLiteralToken = unsigned int16(704)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.DateLiteralToken" />
      <MemberSignature Language="VB.NET" Value="DateLiteralToken" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>704</MemberValue>
      <Docs>
        <summary>
 Represents an Date literal token.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="DecimalKeyword">
      <MemberSignature Language="C#" Value="DecimalKeyword" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind DecimalKeyword = unsigned int16(455)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.DecimalKeyword" />
      <MemberSignature Language="VB.NET" Value="DecimalKeyword" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>455</MemberValue>
      <Docs>
        <summary>
 Represents a single keyword in a VB program. Which keyword can be determined
 from the Kind property.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="DecimalLiteralToken">
      <MemberSignature Language="C#" Value="DecimalLiteralToken" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind DecimalLiteralToken = unsigned int16(703)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.DecimalLiteralToken" />
      <MemberSignature Language="VB.NET" Value="DecimalLiteralToken" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>703</MemberValue>
      <Docs>
        <summary>
 Represents a Decimal literal token.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="DeclareFunctionStatement">
      <MemberSignature Language="C#" Value="DeclareFunctionStatement" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind DeclareFunctionStatement = unsigned int16(97)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.DeclareFunctionStatement" />
      <MemberSignature Language="VB.NET" Value="DeclareFunctionStatement" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>97</MemberValue>
      <Docs>
        <summary>
 A Declare statement that declares an external DLL method.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="DeclareKeyword">
      <MemberSignature Language="C#" Value="DeclareKeyword" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind DeclareKeyword = unsigned int16(456)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.DeclareKeyword" />
      <MemberSignature Language="VB.NET" Value="DeclareKeyword" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>456</MemberValue>
      <Docs>
        <summary>
 Represents a single keyword in a VB program. Which keyword can be determined
 from the Kind property.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="DeclareSubStatement">
      <MemberSignature Language="C#" Value="DeclareSubStatement" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind DeclareSubStatement = unsigned int16(96)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.DeclareSubStatement" />
      <MemberSignature Language="VB.NET" Value="DeclareSubStatement" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>96</MemberValue>
      <Docs>
        <summary>
 A Declare statement that declares an external DLL method.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="DefaultKeyword">
      <MemberSignature Language="C#" Value="DefaultKeyword" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind DefaultKeyword = unsigned int16(457)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.DefaultKeyword" />
      <MemberSignature Language="VB.NET" Value="DefaultKeyword" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>457</MemberValue>
      <Docs>
        <summary>
 Represents a single keyword in a VB program. Which keyword can be determined
 from the Kind property.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="DelegateFunctionStatement">
      <MemberSignature Language="C#" Value="DelegateFunctionStatement" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind DelegateFunctionStatement = unsigned int16(99)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.DelegateFunctionStatement" />
      <MemberSignature Language="VB.NET" Value="DelegateFunctionStatement" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>99</MemberValue>
      <Docs>
        <summary>
 A statement that declares a delegate type.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="DelegateKeyword">
      <MemberSignature Language="C#" Value="DelegateKeyword" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind DelegateKeyword = unsigned int16(458)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.DelegateKeyword" />
      <MemberSignature Language="VB.NET" Value="DelegateKeyword" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>458</MemberValue>
      <Docs>
        <summary>
 Represents a single keyword in a VB program. Which keyword can be determined
 from the Kind property.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="DelegateSubStatement">
      <MemberSignature Language="C#" Value="DelegateSubStatement" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind DelegateSubStatement = unsigned int16(98)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.DelegateSubStatement" />
      <MemberSignature Language="VB.NET" Value="DelegateSubStatement" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>98</MemberValue>
      <Docs>
        <summary>
 A statement that declares a delegate type.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="DescendingKeyword">
      <MemberSignature Language="C#" Value="DescendingKeyword" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind DescendingKeyword = unsigned int16(594)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.DescendingKeyword" />
      <MemberSignature Language="VB.NET" Value="DescendingKeyword" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>594</MemberValue>
      <Docs>
        <summary>
 Represents a single keyword in a VB program. Which keyword can be determined
 from the Kind property.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="DescendingOrdering">
      <MemberSignature Language="C#" Value="DescendingOrdering" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind DescendingOrdering = unsigned int16(376)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.DescendingOrdering" />
      <MemberSignature Language="VB.NET" Value="DescendingOrdering" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>376</MemberValue>
      <Docs>
        <summary>
 An expression to order by, plus an optional ordering. The Kind indicates
 whether to order in ascending or descending order.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="DictionaryAccessExpression">
      <MemberSignature Language="C#" Value="DictionaryAccessExpression" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind DictionaryAccessExpression = unsigned int16(292)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.DictionaryAccessExpression" />
      <MemberSignature Language="VB.NET" Value="DictionaryAccessExpression" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>292</MemberValue>
      <Docs>
        <summary>
 Represents member access (.name) or dictionary access (!name). The Kind
 property determines which kind of access.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="DimKeyword">
      <MemberSignature Language="C#" Value="DimKeyword" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind DimKeyword = unsigned int16(459)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.DimKeyword" />
      <MemberSignature Language="VB.NET" Value="DimKeyword" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>459</MemberValue>
      <Docs>
        <summary>
 Represents a single keyword in a VB program. Which keyword can be determined
 from the Kind property.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="DirectCastExpression">
      <MemberSignature Language="C#" Value="DirectCastExpression" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind DirectCastExpression = unsigned int16(304)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.DirectCastExpression" />
      <MemberSignature Language="VB.NET" Value="DirectCastExpression" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>304</MemberValue>
      <Docs>
        <summary>To be added.</summary>
      </Docs>
    </Member>
    <Member MemberName="DirectCastKeyword">
      <MemberSignature Language="C#" Value="DirectCastKeyword" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind DirectCastKeyword = unsigned int16(460)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.DirectCastKeyword" />
      <MemberSignature Language="VB.NET" Value="DirectCastKeyword" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>460</MemberValue>
      <Docs>
        <summary>
 Represents a single keyword in a VB program. Which keyword can be determined
 from the Kind property.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="DisabledTextTrivia">
      <MemberSignature Language="C#" Value="DisabledTextTrivia" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind DisabledTextTrivia = unsigned int16(735)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.DisabledTextTrivia" />
      <MemberSignature Language="VB.NET" Value="DisabledTextTrivia" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>735</MemberValue>
      <Docs>
        <summary>
 Represents text in a false preprocessor block
 </summary>
      </Docs>
    </Member>
    <Member MemberName="DisableKeyword">
      <MemberSignature Language="C#" Value="DisableKeyword" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind DisableKeyword = unsigned int16(595)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.DisableKeyword" />
      <MemberSignature Language="VB.NET" Value="DisableKeyword" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>595</MemberValue>
      <Docs>
        <summary>
 Represents a single keyword in a VB program. Which keyword can be determined
 from the Kind property.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="DisableWarningDirectiveTrivia">
      <MemberSignature Language="C#" Value="DisableWarningDirectiveTrivia" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind DisableWarningDirectiveTrivia = unsigned int16(749)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.DisableWarningDirectiveTrivia" />
      <MemberSignature Language="VB.NET" Value="DisableWarningDirectiveTrivia" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>749</MemberValue>
      <Docs>
        <summary>
 Represents #Disable Warning pre-processing directive appearing in source.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="DistinctClause">
      <MemberSignature Language="C#" Value="DistinctClause" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind DistinctClause = unsigned int16(362)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.DistinctClause" />
      <MemberSignature Language="VB.NET" Value="DistinctClause" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>362</MemberValue>
      <Docs>
        <summary>
 Represents the "Distinct" query operator.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="DistinctKeyword">
      <MemberSignature Language="C#" Value="DistinctKeyword" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind DistinctKeyword = unsigned int16(596)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.DistinctKeyword" />
      <MemberSignature Language="VB.NET" Value="DistinctKeyword" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>596</MemberValue>
      <Docs>
        <summary>
 Represents a single keyword in a VB program. Which keyword can be determined
 from the Kind property.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="DivideAssignmentStatement">
      <MemberSignature Language="C#" Value="DivideAssignmentStatement" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind DivideAssignmentStatement = unsigned int16(252)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.DivideAssignmentStatement" />
      <MemberSignature Language="VB.NET" Value="DivideAssignmentStatement" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>252</MemberValue>
      <Docs>
        <summary>
 Represents a simple, compound, or Mid assignment statement. Which one can be
 determined by checking the Kind.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="DivideExpression">
      <MemberSignature Language="C#" Value="DivideExpression" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind DivideExpression = unsigned int16(310)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.DivideExpression" />
      <MemberSignature Language="VB.NET" Value="DivideExpression" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>310</MemberValue>
      <Docs>
        <summary>
 Represents a binary operator. The Kind property classifies the operators into
 similar kind of operators (arithmetic, relational, logical or string); the
 exact operation being performed is determined by the Operator property.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="DocumentationCommentExteriorTrivia">
      <MemberSignature Language="C#" Value="DocumentationCommentExteriorTrivia" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind DocumentationCommentExteriorTrivia = unsigned int16(734)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.DocumentationCommentExteriorTrivia" />
      <MemberSignature Language="VB.NET" Value="DocumentationCommentExteriorTrivia" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>734</MemberValue>
      <Docs>
        <summary>
 Represents a ''' prefix for an XML Documentation Comment.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="DocumentationCommentLineBreakToken">
      <MemberSignature Language="C#" Value="DocumentationCommentLineBreakToken" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind DocumentationCommentLineBreakToken = unsigned int16(697)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.DocumentationCommentLineBreakToken" />
      <MemberSignature Language="VB.NET" Value="DocumentationCommentLineBreakToken" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>697</MemberValue>
      <Docs>
        <summary>
 Represents character data in Xml content also known as PCData or in an Xml
 attribute value. All text is here for now even text that does not need
 normalization such as comment, pi and cdata text.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="DocumentationCommentTrivia">
      <MemberSignature Language="C#" Value="DocumentationCommentTrivia" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind DocumentationCommentTrivia = unsigned int16(710)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.DocumentationCommentTrivia" />
      <MemberSignature Language="VB.NET" Value="DocumentationCommentTrivia" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>710</MemberValue>
      <Docs>
        <summary>
 Represents a documentation comment e.g. ''' &lt;Summary&gt; appearing in source.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="DoKeyword">
      <MemberSignature Language="C#" Value="DoKeyword" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind DoKeyword = unsigned int16(461)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.DoKeyword" />
      <MemberSignature Language="VB.NET" Value="DoKeyword" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>461</MemberValue>
      <Docs>
        <summary>
 Represents a single keyword in a VB program. Which keyword can be determined
 from the Kind property.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="DollarSignDoubleQuoteToken">
      <MemberSignature Language="C#" Value="DollarSignDoubleQuoteToken" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind DollarSignDoubleQuoteToken = unsigned int16(785)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.DollarSignDoubleQuoteToken" />
      <MemberSignature Language="VB.NET" Value="DollarSignDoubleQuoteToken" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>785</MemberValue>
      <Docs>
        <summary>
 Represents a '$"' token in an interpolated string expression.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="DoLoopUntilBlock">
      <MemberSignature Language="C#" Value="DoLoopUntilBlock" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind DoLoopUntilBlock = unsigned int16(760)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.DoLoopUntilBlock" />
      <MemberSignature Language="VB.NET" Value="DoLoopUntilBlock" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>760</MemberValue>
      <Docs>
        <summary>
 Represents a "Do ... Loop" block.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="DoLoopWhileBlock">
      <MemberSignature Language="C#" Value="DoLoopWhileBlock" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind DoLoopWhileBlock = unsigned int16(759)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.DoLoopWhileBlock" />
      <MemberSignature Language="VB.NET" Value="DoLoopWhileBlock" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>759</MemberValue>
      <Docs>
        <summary>
 Represents a "Do ... Loop" block.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="DotToken">
      <MemberSignature Language="C#" Value="DotToken" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind DotToken = unsigned int16(650)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.DotToken" />
      <MemberSignature Language="VB.NET" Value="DotToken" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>650</MemberValue>
      <Docs>
        <summary>
 Represents a single punctuation mark or operator in a VB program. Which one can
 be determined from the Kind property.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="DoubleKeyword">
      <MemberSignature Language="C#" Value="DoubleKeyword" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind DoubleKeyword = unsigned int16(462)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.DoubleKeyword" />
      <MemberSignature Language="VB.NET" Value="DoubleKeyword" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>462</MemberValue>
      <Docs>
        <summary>
 Represents a single keyword in a VB program. Which keyword can be determined
 from the Kind property.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="DoubleQuoteToken">
      <MemberSignature Language="C#" Value="DoubleQuoteToken" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind DoubleQuoteToken = unsigned int16(676)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.DoubleQuoteToken" />
      <MemberSignature Language="VB.NET" Value="DoubleQuoteToken" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>676</MemberValue>
      <Docs>
        <summary>
 Represents a single punctuation mark or operator in a VB program. Which one can
 be determined from the Kind property.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="DoUntilLoopBlock">
      <MemberSignature Language="C#" Value="DoUntilLoopBlock" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind DoUntilLoopBlock = unsigned int16(758)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.DoUntilLoopBlock" />
      <MemberSignature Language="VB.NET" Value="DoUntilLoopBlock" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>758</MemberValue>
      <Docs>
        <summary>
 Represents a "Do ... Loop" block.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="DoUntilStatement">
      <MemberSignature Language="C#" Value="DoUntilStatement" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind DoUntilStatement = unsigned int16(772)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.DoUntilStatement" />
      <MemberSignature Language="VB.NET" Value="DoUntilStatement" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>772</MemberValue>
      <Docs>
        <summary>
 Represents a "Do Until" statement that begins a "Do ... Loop" block.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="DoWhileLoopBlock">
      <MemberSignature Language="C#" Value="DoWhileLoopBlock" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind DoWhileLoopBlock = unsigned int16(757)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.DoWhileLoopBlock" />
      <MemberSignature Language="VB.NET" Value="DoWhileLoopBlock" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>757</MemberValue>
      <Docs>
        <summary>
 Represents a "Do ... Loop" block.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="DoWhileStatement">
      <MemberSignature Language="C#" Value="DoWhileStatement" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind DoWhileStatement = unsigned int16(771)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.DoWhileStatement" />
      <MemberSignature Language="VB.NET" Value="DoWhileStatement" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>771</MemberValue>
      <Docs>
        <summary>
 Represents a "Do While" statement that begins a "Do ... Loop" block.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="EachKeyword">
      <MemberSignature Language="C#" Value="EachKeyword" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind EachKeyword = unsigned int16(463)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.EachKeyword" />
      <MemberSignature Language="VB.NET" Value="EachKeyword" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>463</MemberValue>
      <Docs>
        <summary>
 Represents a single keyword in a VB program. Which keyword can be determined
 from the Kind property.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="ElseBlock">
      <MemberSignature Language="C#" Value="ElseBlock" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind ElseBlock = unsigned int16(181)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.ElseBlock" />
      <MemberSignature Language="VB.NET" Value="ElseBlock" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>181</MemberValue>
      <Docs>
        <summary>
 Represents the Else part of an If statement, consisting of a Else statement,
 followed by a body of statement controlled by that Else.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="ElseCaseClause">
      <MemberSignature Language="C#" Value="ElseCaseClause" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind ElseCaseClause = unsigned int16(213)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.ElseCaseClause" />
      <MemberSignature Language="VB.NET" Value="ElseCaseClause" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>213</MemberValue>
      <Docs>
        <summary>
 The "Else" part in a Case Else statement.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="ElseDirectiveTrivia">
      <MemberSignature Language="C#" Value="ElseDirectiveTrivia" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind ElseDirectiveTrivia = unsigned int16(739)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.ElseDirectiveTrivia" />
      <MemberSignature Language="VB.NET" Value="ElseDirectiveTrivia" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>739</MemberValue>
      <Docs>
        <summary>
 Represents an #Else pre-processing directive appearing in source.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="ElseIfBlock">
      <MemberSignature Language="C#" Value="ElseIfBlock" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind ElseIfBlock = unsigned int16(180)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.ElseIfBlock" />
      <MemberSignature Language="VB.NET" Value="ElseIfBlock" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>180</MemberValue>
      <Docs>
        <summary>
 Represents part of an If statement, consisting of a beginning statement (If or
 ElseIf), followed by a body of statement controlled by that beginning
 statement. The Kind property returns if this is an If or ElseIf.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="ElseIfDirectiveTrivia">
      <MemberSignature Language="C#" Value="ElseIfDirectiveTrivia" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind ElseIfDirectiveTrivia = unsigned int16(738)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.ElseIfDirectiveTrivia" />
      <MemberSignature Language="VB.NET" Value="ElseIfDirectiveTrivia" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>738</MemberValue>
      <Docs>
        <summary>
 Represents the beginning of an #If pre-processing directive appearing in
 source.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="ElseIfKeyword">
      <MemberSignature Language="C#" Value="ElseIfKeyword" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind ElseIfKeyword = unsigned int16(465)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.ElseIfKeyword" />
      <MemberSignature Language="VB.NET" Value="ElseIfKeyword" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>465</MemberValue>
      <Docs>
        <summary>
 Represents a single keyword in a VB program. Which keyword can be determined
 from the Kind property.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="ElseIfStatement">
      <MemberSignature Language="C#" Value="ElseIfStatement" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind ElseIfStatement = unsigned int16(183)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.ElseIfStatement" />
      <MemberSignature Language="VB.NET" Value="ElseIfStatement" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>183</MemberValue>
      <Docs>
        <summary>
 Represents the If part or ElseIf part of a If...End If block (or line If). This
 statement is always the Begin of a IfPart. The Kind can be examined to
 determine if this is an If or an ElseIf statement.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="ElseKeyword">
      <MemberSignature Language="C#" Value="ElseKeyword" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind ElseKeyword = unsigned int16(464)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.ElseKeyword" />
      <MemberSignature Language="VB.NET" Value="ElseKeyword" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>464</MemberValue>
      <Docs>
        <summary>
 Represents a single keyword in a VB program. Which keyword can be determined
 from the Kind property.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="ElseStatement">
      <MemberSignature Language="C#" Value="ElseStatement" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind ElseStatement = unsigned int16(184)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.ElseStatement" />
      <MemberSignature Language="VB.NET" Value="ElseStatement" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>184</MemberValue>
      <Docs>
        <summary>
 Represents the Else part of a If...End If block (or line If). This statement is
 always the Begin of a ElsePart.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="EmptyStatement">
      <MemberSignature Language="C#" Value="EmptyStatement" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind EmptyStatement = unsigned int16(2)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.EmptyStatement" />
      <MemberSignature Language="VB.NET" Value="EmptyStatement" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>2</MemberValue>
      <Docs>
        <summary>
 A class to represent an empty statement. This can occur when a colon is on a
 line without anything else.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="EmptyToken">
      <MemberSignature Language="C#" Value="EmptyToken" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind EmptyToken = unsigned int16(679)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.EmptyToken" />
      <MemberSignature Language="VB.NET" Value="EmptyToken" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>679</MemberValue>
      <Docs>
        <summary>
 Represents a single punctuation mark or operator in a VB program. Which one can
 be determined from the Kind property.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="EnableKeyword">
      <MemberSignature Language="C#" Value="EnableKeyword" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind EnableKeyword = unsigned int16(599)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.EnableKeyword" />
      <MemberSignature Language="VB.NET" Value="EnableKeyword" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>599</MemberValue>
      <Docs>
        <summary>
 Represents a single keyword in a VB program. Which keyword can be determined
 from the Kind property.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="EnableWarningDirectiveTrivia">
      <MemberSignature Language="C#" Value="EnableWarningDirectiveTrivia" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind EnableWarningDirectiveTrivia = unsigned int16(748)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.EnableWarningDirectiveTrivia" />
      <MemberSignature Language="VB.NET" Value="EnableWarningDirectiveTrivia" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>748</MemberValue>
      <Docs>
        <summary>
 Represents #Enable Warning pre-processing directive appearing in source.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="EndAddHandlerStatement">
      <MemberSignature Language="C#" Value="EndAddHandlerStatement" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind EndAddHandlerStatement = unsigned int16(22)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.EndAddHandlerStatement" />
      <MemberSignature Language="VB.NET" Value="EndAddHandlerStatement" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>22</MemberValue>
      <Docs>
        <summary>
 Represents an "End XXX" statement, where XXX is a single keyword.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="EndCDataToken">
      <MemberSignature Language="C#" Value="EndCDataToken" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind EndCDataToken = unsigned int16(691)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.EndCDataToken" />
      <MemberSignature Language="VB.NET" Value="EndCDataToken" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>691</MemberValue>
      <Docs>
        <summary>
 Represents a single punctuation mark or operator in a VB program. Which one can
 be determined from the Kind property.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="EndClassStatement">
      <MemberSignature Language="C#" Value="EndClassStatement" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind EndClassStatement = unsigned int16(12)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.EndClassStatement" />
      <MemberSignature Language="VB.NET" Value="EndClassStatement" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>12</MemberValue>
      <Docs>
        <summary>
 Represents an "End XXX" statement, where XXX is a single keyword.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="EndEnumStatement">
      <MemberSignature Language="C#" Value="EndEnumStatement" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind EndEnumStatement = unsigned int16(10)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.EndEnumStatement" />
      <MemberSignature Language="VB.NET" Value="EndEnumStatement" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>10</MemberValue>
      <Docs>
        <summary>
 Represents an "End XXX" statement, where XXX is a single keyword.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="EndEventStatement">
      <MemberSignature Language="C#" Value="EndEventStatement" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind EndEventStatement = unsigned int16(21)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.EndEventStatement" />
      <MemberSignature Language="VB.NET" Value="EndEventStatement" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>21</MemberValue>
      <Docs>
        <summary>
 Represents an "End XXX" statement, where XXX is a single keyword.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="EndExternalSourceDirectiveTrivia">
      <MemberSignature Language="C#" Value="EndExternalSourceDirectiveTrivia" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind EndExternalSourceDirectiveTrivia = unsigned int16(746)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.EndExternalSourceDirectiveTrivia" />
      <MemberSignature Language="VB.NET" Value="EndExternalSourceDirectiveTrivia" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>746</MemberValue>
      <Docs>
        <summary>
 Represents an #End ExternalSource pre-processing directive appearing in source.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="EndFunctionStatement">
      <MemberSignature Language="C#" Value="EndFunctionStatement" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind EndFunctionStatement = unsigned int16(16)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.EndFunctionStatement" />
      <MemberSignature Language="VB.NET" Value="EndFunctionStatement" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>16</MemberValue>
      <Docs>
        <summary>
 Represents an "End XXX" statement, where XXX is a single keyword.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="EndGetStatement">
      <MemberSignature Language="C#" Value="EndGetStatement" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind EndGetStatement = unsigned int16(17)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.EndGetStatement" />
      <MemberSignature Language="VB.NET" Value="EndGetStatement" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>17</MemberValue>
      <Docs>
        <summary>
 Represents an "End XXX" statement, where XXX is a single keyword.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="EndIfDirectiveTrivia">
      <MemberSignature Language="C#" Value="EndIfDirectiveTrivia" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind EndIfDirectiveTrivia = unsigned int16(740)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.EndIfDirectiveTrivia" />
      <MemberSignature Language="VB.NET" Value="EndIfDirectiveTrivia" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>740</MemberValue>
      <Docs>
        <summary>
 Represents an #End If pre-processing directive appearing in source.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="EndIfKeyword">
      <MemberSignature Language="C#" Value="EndIfKeyword" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind EndIfKeyword = unsigned int16(580)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.EndIfKeyword" />
      <MemberSignature Language="VB.NET" Value="EndIfKeyword" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>580</MemberValue>
      <Docs>
        <summary>
 Represents a single keyword in a VB program. Which keyword can be determined
 from the Kind property.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="EndIfStatement">
      <MemberSignature Language="C#" Value="EndIfStatement" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind EndIfStatement = unsigned int16(5)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.EndIfStatement" />
      <MemberSignature Language="VB.NET" Value="EndIfStatement" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>5</MemberValue>
      <Docs>
        <summary>
 Represents an "End XXX" statement, where XXX is a single keyword.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="EndInterfaceStatement">
      <MemberSignature Language="C#" Value="EndInterfaceStatement" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind EndInterfaceStatement = unsigned int16(11)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.EndInterfaceStatement" />
      <MemberSignature Language="VB.NET" Value="EndInterfaceStatement" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>11</MemberValue>
      <Docs>
        <summary>
 Represents an "End XXX" statement, where XXX is a single keyword.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="EndKeyword">
      <MemberSignature Language="C#" Value="EndKeyword" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind EndKeyword = unsigned int16(466)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.EndKeyword" />
      <MemberSignature Language="VB.NET" Value="EndKeyword" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>466</MemberValue>
      <Docs>
        <summary>
 Represents a single keyword in a VB program. Which keyword can be determined
 from the Kind property.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="EndModuleStatement">
      <MemberSignature Language="C#" Value="EndModuleStatement" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind EndModuleStatement = unsigned int16(13)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.EndModuleStatement" />
      <MemberSignature Language="VB.NET" Value="EndModuleStatement" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>13</MemberValue>
      <Docs>
        <summary>
 Represents an "End XXX" statement, where XXX is a single keyword.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="EndNamespaceStatement">
      <MemberSignature Language="C#" Value="EndNamespaceStatement" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind EndNamespaceStatement = unsigned int16(14)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.EndNamespaceStatement" />
      <MemberSignature Language="VB.NET" Value="EndNamespaceStatement" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>14</MemberValue>
      <Docs>
        <summary>
 Represents an "End XXX" statement, where XXX is a single keyword.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="EndOfFileToken">
      <MemberSignature Language="C#" Value="EndOfFileToken" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind EndOfFileToken = unsigned int16(678)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.EndOfFileToken" />
      <MemberSignature Language="VB.NET" Value="EndOfFileToken" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>678</MemberValue>
      <Docs>
        <summary>
 Represents a single punctuation mark or operator in a VB program. Which one can
 be determined from the Kind property.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="EndOfInterpolatedStringToken">
      <MemberSignature Language="C#" Value="EndOfInterpolatedStringToken" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind EndOfInterpolatedStringToken = unsigned int16(787)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.EndOfInterpolatedStringToken" />
      <MemberSignature Language="VB.NET" Value="EndOfInterpolatedStringToken" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>787</MemberValue>
      <Docs>
        <summary>
 Represents the end of interpolated string when parsing.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="EndOfLineTrivia">
      <MemberSignature Language="C#" Value="EndOfLineTrivia" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind EndOfLineTrivia = unsigned int16(730)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.EndOfLineTrivia" />
      <MemberSignature Language="VB.NET" Value="EndOfLineTrivia" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>730</MemberValue>
      <Docs>
        <summary>
 Represents line breaks that are syntactically insignificant.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="EndOfXmlToken">
      <MemberSignature Language="C#" Value="EndOfXmlToken" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind EndOfXmlToken = unsigned int16(692)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.EndOfXmlToken" />
      <MemberSignature Language="VB.NET" Value="EndOfXmlToken" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>692</MemberValue>
      <Docs>
        <summary>
 Represents a single punctuation mark or operator in a VB program. Which one can
 be determined from the Kind property.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="EndOperatorStatement">
      <MemberSignature Language="C#" Value="EndOperatorStatement" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind EndOperatorStatement = unsigned int16(20)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.EndOperatorStatement" />
      <MemberSignature Language="VB.NET" Value="EndOperatorStatement" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>20</MemberValue>
      <Docs>
        <summary>
 Represents an "End XXX" statement, where XXX is a single keyword.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="EndPropertyStatement">
      <MemberSignature Language="C#" Value="EndPropertyStatement" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind EndPropertyStatement = unsigned int16(19)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.EndPropertyStatement" />
      <MemberSignature Language="VB.NET" Value="EndPropertyStatement" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>19</MemberValue>
      <Docs>
        <summary>
 Represents an "End XXX" statement, where XXX is a single keyword.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="EndRaiseEventStatement">
      <MemberSignature Language="C#" Value="EndRaiseEventStatement" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind EndRaiseEventStatement = unsigned int16(24)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.EndRaiseEventStatement" />
      <MemberSignature Language="VB.NET" Value="EndRaiseEventStatement" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>24</MemberValue>
      <Docs>
        <summary>
 Represents an "End XXX" statement, where XXX is a single keyword.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="EndRegionDirectiveTrivia">
      <MemberSignature Language="C#" Value="EndRegionDirectiveTrivia" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind EndRegionDirectiveTrivia = unsigned int16(744)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.EndRegionDirectiveTrivia" />
      <MemberSignature Language="VB.NET" Value="EndRegionDirectiveTrivia" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>744</MemberValue>
      <Docs>
        <summary>
 Represents an #End Region directive appearing in source.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="EndRemoveHandlerStatement">
      <MemberSignature Language="C#" Value="EndRemoveHandlerStatement" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind EndRemoveHandlerStatement = unsigned int16(23)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.EndRemoveHandlerStatement" />
      <MemberSignature Language="VB.NET" Value="EndRemoveHandlerStatement" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>23</MemberValue>
      <Docs>
        <summary>
 Represents an "End XXX" statement, where XXX is a single keyword.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="EndSelectStatement">
      <MemberSignature Language="C#" Value="EndSelectStatement" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind EndSelectStatement = unsigned int16(8)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.EndSelectStatement" />
      <MemberSignature Language="VB.NET" Value="EndSelectStatement" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>8</MemberValue>
      <Docs>
        <summary>
 Represents an "End XXX" statement, where XXX is a single keyword.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="EndSetStatement">
      <MemberSignature Language="C#" Value="EndSetStatement" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind EndSetStatement = unsigned int16(18)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.EndSetStatement" />
      <MemberSignature Language="VB.NET" Value="EndSetStatement" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>18</MemberValue>
      <Docs>
        <summary>
 Represents an "End XXX" statement, where XXX is a single keyword.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="EndStatement">
      <MemberSignature Language="C#" Value="EndStatement" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind EndStatement = unsigned int16(156)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.EndStatement" />
      <MemberSignature Language="VB.NET" Value="EndStatement" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>156</MemberValue>
      <Docs>
        <summary>
 Represents a "Stop" or "End" statement. The Kind can be used to determine which
 kind of statement this is.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="EndStructureStatement">
      <MemberSignature Language="C#" Value="EndStructureStatement" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind EndStructureStatement = unsigned int16(9)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.EndStructureStatement" />
      <MemberSignature Language="VB.NET" Value="EndStructureStatement" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>9</MemberValue>
      <Docs>
        <summary>
 Represents an "End XXX" statement, where XXX is a single keyword.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="EndSubStatement">
      <MemberSignature Language="C#" Value="EndSubStatement" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind EndSubStatement = unsigned int16(15)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.EndSubStatement" />
      <MemberSignature Language="VB.NET" Value="EndSubStatement" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>15</MemberValue>
      <Docs>
        <summary>
 Represents an "End XXX" statement, where XXX is a single keyword.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="EndSyncLockStatement">
      <MemberSignature Language="C#" Value="EndSyncLockStatement" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind EndSyncLockStatement = unsigned int16(27)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.EndSyncLockStatement" />
      <MemberSignature Language="VB.NET" Value="EndSyncLockStatement" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>27</MemberValue>
      <Docs>
        <summary>
 Represents an "End XXX" statement, where XXX is a single keyword.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="EndTryStatement">
      <MemberSignature Language="C#" Value="EndTryStatement" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind EndTryStatement = unsigned int16(26)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.EndTryStatement" />
      <MemberSignature Language="VB.NET" Value="EndTryStatement" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>26</MemberValue>
      <Docs>
        <summary>
 Represents an "End XXX" statement, where XXX is a single keyword.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="EndUsingStatement">
      <MemberSignature Language="C#" Value="EndUsingStatement" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind EndUsingStatement = unsigned int16(6)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.EndUsingStatement" />
      <MemberSignature Language="VB.NET" Value="EndUsingStatement" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>6</MemberValue>
      <Docs>
        <summary>
 Represents an "End XXX" statement, where XXX is a single keyword.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="EndWhileStatement">
      <MemberSignature Language="C#" Value="EndWhileStatement" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind EndWhileStatement = unsigned int16(25)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.EndWhileStatement" />
      <MemberSignature Language="VB.NET" Value="EndWhileStatement" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>25</MemberValue>
      <Docs>
        <summary>
 Represents an "End XXX" statement, where XXX is a single keyword.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="EndWithStatement">
      <MemberSignature Language="C#" Value="EndWithStatement" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind EndWithStatement = unsigned int16(7)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.EndWithStatement" />
      <MemberSignature Language="VB.NET" Value="EndWithStatement" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>7</MemberValue>
      <Docs>
        <summary>
 Represents an "End XXX" statement, where XXX is a single keyword.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="EnumBlock">
      <MemberSignature Language="C#" Value="EnumBlock" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind EnumBlock = unsigned int16(54)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.EnumBlock" />
      <MemberSignature Language="VB.NET" Value="EnumBlock" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>54</MemberValue>
      <Docs>
        <summary>
 Represents a declaration of an Enum, its contents and the End Enum statement
 that ends it.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="EnumKeyword">
      <MemberSignature Language="C#" Value="EnumKeyword" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind EnumKeyword = unsigned int16(467)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.EnumKeyword" />
      <MemberSignature Language="VB.NET" Value="EnumKeyword" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>467</MemberValue>
      <Docs>
        <summary>
 Represents a single keyword in a VB program. Which keyword can be determined
 from the Kind property.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="EnumMemberDeclaration">
      <MemberSignature Language="C#" Value="EnumMemberDeclaration" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind EnumMemberDeclaration = unsigned int16(78)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.EnumMemberDeclaration" />
      <MemberSignature Language="VB.NET" Value="EnumMemberDeclaration" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>78</MemberValue>
      <Docs>
        <summary>
 Represents a name and value in an EnumDeclarationBlock.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="EnumStatement">
      <MemberSignature Language="C#" Value="EnumStatement" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind EnumStatement = unsigned int16(63)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.EnumStatement" />
      <MemberSignature Language="VB.NET" Value="EnumStatement" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>63</MemberValue>
      <Docs>
        <summary>
 Represents the beginning statement of an Enum declaration. This node always
 appears as the Begin of an EnumBlock with Kind=EnumDeclarationBlock.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="EqualsExpression">
      <MemberSignature Language="C#" Value="EqualsExpression" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind EqualsExpression = unsigned int16(319)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.EqualsExpression" />
      <MemberSignature Language="VB.NET" Value="EqualsExpression" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>319</MemberValue>
      <Docs>
        <summary>
 Represents a binary operator. The Kind property classifies the operators into
 similar kind of operators (arithmetic, relational, logical or string); the
 exact operation being performed is determined by the Operator property.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="EqualsKeyword">
      <MemberSignature Language="C#" Value="EqualsKeyword" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind EqualsKeyword = unsigned int16(600)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.EqualsKeyword" />
      <MemberSignature Language="VB.NET" Value="EqualsKeyword" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>600</MemberValue>
      <Docs>
        <summary>
 Represents a single keyword in a VB program. Which keyword can be determined
 from the Kind property.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="EqualsToken">
      <MemberSignature Language="C#" Value="EqualsToken" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind EqualsToken = unsigned int16(656)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.EqualsToken" />
      <MemberSignature Language="VB.NET" Value="EqualsToken" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>656</MemberValue>
      <Docs>
        <summary>
 Represents a single punctuation mark or operator in a VB program. Which one can
 be determined from the Kind property.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="EqualsValue">
      <MemberSignature Language="C#" Value="EqualsValue" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind EqualsValue = unsigned int16(129)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.EqualsValue" />
      <MemberSignature Language="VB.NET" Value="EqualsValue" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>129</MemberValue>
      <Docs>
        <summary>
 Represents an "= initializer" clause in a declaration for a variable,
 parameter or automatic property.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="EraseKeyword">
      <MemberSignature Language="C#" Value="EraseKeyword" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind EraseKeyword = unsigned int16(468)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.EraseKeyword" />
      <MemberSignature Language="VB.NET" Value="EraseKeyword" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>468</MemberValue>
      <Docs>
        <summary>
 Represents a single keyword in a VB program. Which keyword can be determined
 from the Kind property.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="EraseStatement">
      <MemberSignature Language="C#" Value="EraseStatement" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind EraseStatement = unsigned int16(271)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.EraseStatement" />
      <MemberSignature Language="VB.NET" Value="EraseStatement" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>271</MemberValue>
      <Docs>
        <summary>
 Represents an "Erase" statement.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="ErrorKeyword">
      <MemberSignature Language="C#" Value="ErrorKeyword" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind ErrorKeyword = unsigned int16(469)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.ErrorKeyword" />
      <MemberSignature Language="VB.NET" Value="ErrorKeyword" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>469</MemberValue>
      <Docs>
        <summary>
 Represents a single keyword in a VB program. Which keyword can be determined
 from the Kind property.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="ErrorStatement">
      <MemberSignature Language="C#" Value="ErrorStatement" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind ErrorStatement = unsigned int16(195)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.ErrorStatement" />
      <MemberSignature Language="VB.NET" Value="ErrorStatement" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>195</MemberValue>
      <Docs>
        <summary>
 Represents the "Error" statement.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="EventBlock">
      <MemberSignature Language="C#" Value="EventBlock" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind EventBlock = unsigned int16(89)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.EventBlock" />
      <MemberSignature Language="VB.NET" Value="EventBlock" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>89</MemberValue>
      <Docs>
        <summary>
 Represents a custom event declaration: A declaration that has a beginning event
 declaration, some accessor blocks and an end statement.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="EventKeyword">
      <MemberSignature Language="C#" Value="EventKeyword" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind EventKeyword = unsigned int16(470)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.EventKeyword" />
      <MemberSignature Language="VB.NET" Value="EventKeyword" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>470</MemberValue>
      <Docs>
        <summary>
 Represents a single keyword in a VB program. Which keyword can be determined
 from the Kind property.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="EventStatement">
      <MemberSignature Language="C#" Value="EventStatement" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind EventStatement = unsigned int16(102)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.EventStatement" />
      <MemberSignature Language="VB.NET" Value="EventStatement" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>102</MemberValue>
      <Docs>
        <summary>
 A statement that declares an event. If the event being declared is a custom
 event, this statement will be the Begin of a PropertyOrEventBlock, and the
 accessors will be part of the Accessors of that node.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="ExclamationToken">
      <MemberSignature Language="C#" Value="ExclamationToken" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind ExclamationToken = unsigned int16(634)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.ExclamationToken" />
      <MemberSignature Language="VB.NET" Value="ExclamationToken" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>634</MemberValue>
      <Docs>
        <summary>
 Represents a single punctuation mark or operator in a VB program. Which one can
 be determined from the Kind property.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="ExclusiveOrExpression">
      <MemberSignature Language="C#" Value="ExclusiveOrExpression" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind ExclusiveOrExpression = unsigned int16(329)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.ExclusiveOrExpression" />
      <MemberSignature Language="VB.NET" Value="ExclusiveOrExpression" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>329</MemberValue>
      <Docs>
        <summary>
 Represents a binary operator. The Kind property classifies the operators into
 similar kind of operators (arithmetic, relational, logical or string); the
 exact operation being performed is determined by the Operator property.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="ExitDoStatement">
      <MemberSignature Language="C#" Value="ExitDoStatement" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind ExitDoStatement = unsigned int16(157)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.ExitDoStatement" />
      <MemberSignature Language="VB.NET" Value="ExitDoStatement" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>157</MemberValue>
      <Docs>
        <summary>
 An exit statement. The kind of block being exited can be found by examining the
 Kind.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="ExitForStatement">
      <MemberSignature Language="C#" Value="ExitForStatement" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind ExitForStatement = unsigned int16(158)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.ExitForStatement" />
      <MemberSignature Language="VB.NET" Value="ExitForStatement" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>158</MemberValue>
      <Docs>
        <summary>
 An exit statement. The kind of block being exited can be found by examining the
 Kind.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="ExitFunctionStatement">
      <MemberSignature Language="C#" Value="ExitFunctionStatement" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind ExitFunctionStatement = unsigned int16(160)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.ExitFunctionStatement" />
      <MemberSignature Language="VB.NET" Value="ExitFunctionStatement" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>160</MemberValue>
      <Docs>
        <summary>
 An exit statement. The kind of block being exited can be found by examining the
 Kind.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="ExitKeyword">
      <MemberSignature Language="C#" Value="ExitKeyword" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind ExitKeyword = unsigned int16(471)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.ExitKeyword" />
      <MemberSignature Language="VB.NET" Value="ExitKeyword" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>471</MemberValue>
      <Docs>
        <summary>
 Represents a single keyword in a VB program. Which keyword can be determined
 from the Kind property.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="ExitOperatorStatement">
      <MemberSignature Language="C#" Value="ExitOperatorStatement" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind ExitOperatorStatement = unsigned int16(161)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.ExitOperatorStatement" />
      <MemberSignature Language="VB.NET" Value="ExitOperatorStatement" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>161</MemberValue>
      <Docs>
        <summary>
 An exit statement. The kind of block being exited can be found by examining the
 Kind.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="ExitPropertyStatement">
      <MemberSignature Language="C#" Value="ExitPropertyStatement" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind ExitPropertyStatement = unsigned int16(162)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.ExitPropertyStatement" />
      <MemberSignature Language="VB.NET" Value="ExitPropertyStatement" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>162</MemberValue>
      <Docs>
        <summary>
 An exit statement. The kind of block being exited can be found by examining the
 Kind.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="ExitSelectStatement">
      <MemberSignature Language="C#" Value="ExitSelectStatement" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind ExitSelectStatement = unsigned int16(164)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.ExitSelectStatement" />
      <MemberSignature Language="VB.NET" Value="ExitSelectStatement" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>164</MemberValue>
      <Docs>
        <summary>
 An exit statement. The kind of block being exited can be found by examining the
 Kind.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="ExitSubStatement">
      <MemberSignature Language="C#" Value="ExitSubStatement" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind ExitSubStatement = unsigned int16(159)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.ExitSubStatement" />
      <MemberSignature Language="VB.NET" Value="ExitSubStatement" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>159</MemberValue>
      <Docs>
        <summary>
 An exit statement. The kind of block being exited can be found by examining the
 Kind.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="ExitTryStatement">
      <MemberSignature Language="C#" Value="ExitTryStatement" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind ExitTryStatement = unsigned int16(163)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.ExitTryStatement" />
      <MemberSignature Language="VB.NET" Value="ExitTryStatement" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>163</MemberValue>
      <Docs>
        <summary>
 An exit statement. The kind of block being exited can be found by examining the
 Kind.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="ExitWhileStatement">
      <MemberSignature Language="C#" Value="ExitWhileStatement" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind ExitWhileStatement = unsigned int16(165)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.ExitWhileStatement" />
      <MemberSignature Language="VB.NET" Value="ExitWhileStatement" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>165</MemberValue>
      <Docs>
        <summary>
 An exit statement. The kind of block being exited can be found by examining the
 Kind.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="ExplicitKeyword">
      <MemberSignature Language="C#" Value="ExplicitKeyword" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind ExplicitKeyword = unsigned int16(601)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.ExplicitKeyword" />
      <MemberSignature Language="VB.NET" Value="ExplicitKeyword" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>601</MemberValue>
      <Docs>
        <summary>
 Represents a single keyword in a VB program. Which keyword can be determined
 from the Kind property.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="ExponentiateAssignmentStatement">
      <MemberSignature Language="C#" Value="ExponentiateAssignmentStatement" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind ExponentiateAssignmentStatement = unsigned int16(254)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.ExponentiateAssignmentStatement" />
      <MemberSignature Language="VB.NET" Value="ExponentiateAssignmentStatement" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>254</MemberValue>
      <Docs>
        <summary>
 Represents a simple, compound, or Mid assignment statement. Which one can be
 determined by checking the Kind.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="ExponentiateExpression">
      <MemberSignature Language="C#" Value="ExponentiateExpression" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind ExponentiateExpression = unsigned int16(314)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.ExponentiateExpression" />
      <MemberSignature Language="VB.NET" Value="ExponentiateExpression" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>314</MemberValue>
      <Docs>
        <summary>
 Represents a binary operator. The Kind property classifies the operators into
 similar kind of operators (arithmetic, relational, logical or string); the
 exact operation being performed is determined by the Operator property.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="ExpressionRangeVariable">
      <MemberSignature Language="C#" Value="ExpressionRangeVariable" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind ExpressionRangeVariable = unsigned int16(354)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.ExpressionRangeVariable" />
      <MemberSignature Language="VB.NET" Value="ExpressionRangeVariable" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>354</MemberValue>
      <Docs>
        <summary>
 Describes a single variable of the form "[x [As Type] =] expression" for use in
 query expressions.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="ExpressionStatement">
      <MemberSignature Language="C#" Value="ExpressionStatement" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind ExpressionStatement = unsigned int16(139)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.ExpressionStatement" />
      <MemberSignature Language="VB.NET" Value="ExpressionStatement" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>139</MemberValue>
      <Docs>
        <summary>
 Represent an expression in a statement context. This may only be a invocation
 or await expression in standard code but may be any expression in VB
 Interactive code.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="ExternalChecksumDirectiveTrivia">
      <MemberSignature Language="C#" Value="ExternalChecksumDirectiveTrivia" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind ExternalChecksumDirectiveTrivia = unsigned int16(747)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.ExternalChecksumDirectiveTrivia" />
      <MemberSignature Language="VB.NET" Value="ExternalChecksumDirectiveTrivia" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>747</MemberValue>
      <Docs>
        <summary>
 Represents an #ExternalChecksum pre-processing directive appearing in source.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="ExternalChecksumKeyword">
      <MemberSignature Language="C#" Value="ExternalChecksumKeyword" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind ExternalChecksumKeyword = unsigned int16(603)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.ExternalChecksumKeyword" />
      <MemberSignature Language="VB.NET" Value="ExternalChecksumKeyword" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>603</MemberValue>
      <Docs>
        <summary>
 Represents a single keyword in a VB program. Which keyword can be determined
 from the Kind property.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="ExternalSourceDirectiveTrivia">
      <MemberSignature Language="C#" Value="ExternalSourceDirectiveTrivia" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind ExternalSourceDirectiveTrivia = unsigned int16(745)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.ExternalSourceDirectiveTrivia" />
      <MemberSignature Language="VB.NET" Value="ExternalSourceDirectiveTrivia" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>745</MemberValue>
      <Docs>
        <summary>
 Represents the beginning of a #ExternalSource pre-processing directive
 appearing in source.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="ExternalSourceKeyword">
      <MemberSignature Language="C#" Value="ExternalSourceKeyword" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind ExternalSourceKeyword = unsigned int16(602)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.ExternalSourceKeyword" />
      <MemberSignature Language="VB.NET" Value="ExternalSourceKeyword" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>602</MemberValue>
      <Docs>
        <summary>
 Represents a single keyword in a VB program. Which keyword can be determined
 from the Kind property.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="FalseKeyword">
      <MemberSignature Language="C#" Value="FalseKeyword" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind FalseKeyword = unsigned int16(474)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.FalseKeyword" />
      <MemberSignature Language="VB.NET" Value="FalseKeyword" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>474</MemberValue>
      <Docs>
        <summary>
 Represents a single keyword in a VB program. Which keyword can be determined
 from the Kind property.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="FalseLiteralExpression">
      <MemberSignature Language="C#" Value="FalseLiteralExpression" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind FalseLiteralExpression = unsigned int16(274)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.FalseLiteralExpression" />
      <MemberSignature Language="VB.NET" Value="FalseLiteralExpression" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>274</MemberValue>
      <Docs>
        <summary>
 Represents a literal. The kind of literal is determined by the Kind property:
 IntegerLiteral, CharacterLiteral, BooleanLiteral, DecimalLiteral,
 FloatingLiteral, DateLiteral or StringLiteral. The value of the literal can be
 determined by casting the associated Token to the correct type and getting the
 value from the token.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="FieldDeclaration">
      <MemberSignature Language="C#" Value="FieldDeclaration" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind FieldDeclaration = unsigned int16(119)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.FieldDeclaration" />
      <MemberSignature Language="VB.NET" Value="FieldDeclaration" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>119</MemberValue>
      <Docs>
        <summary>
 Represents the declaration of one or more variables or constants, either as
 local variables or as class/structure members. In the case of a constant, it is
 represented by having "Const" in the Modifiers (although technically "Const" is
 not a modifier, it is represented as one in the parse trees.)
 </summary>
      </Docs>
    </Member>
    <Member MemberName="FinallyBlock">
      <MemberSignature Language="C#" Value="FinallyBlock" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind FinallyBlock = unsigned int16(188)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.FinallyBlock" />
      <MemberSignature Language="VB.NET" Value="FinallyBlock" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>188</MemberValue>
      <Docs>
        <summary>
 Represents the Finally part of an Try...Catch...Finally...End Try statement,
 consisting of a Finally statement, followed by a body of statements controlled
 by the Finally.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="FinallyKeyword">
      <MemberSignature Language="C#" Value="FinallyKeyword" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind FinallyKeyword = unsigned int16(475)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.FinallyKeyword" />
      <MemberSignature Language="VB.NET" Value="FinallyKeyword" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>475</MemberValue>
      <Docs>
        <summary>
 Represents a single keyword in a VB program. Which keyword can be determined
 from the Kind property.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="FinallyStatement">
      <MemberSignature Language="C#" Value="FinallyStatement" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind FinallyStatement = unsigned int16(194)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.FinallyStatement" />
      <MemberSignature Language="VB.NET" Value="FinallyStatement" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>194</MemberValue>
      <Docs>
        <summary>
 Represents the Finally part of a Try...Catch...Finally...End Try. This
 statement is always the Begin of a FinallyPart.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="FloatingLiteralToken">
      <MemberSignature Language="C#" Value="FloatingLiteralToken" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind FloatingLiteralToken = unsigned int16(702)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.FloatingLiteralToken" />
      <MemberSignature Language="VB.NET" Value="FloatingLiteralToken" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>702</MemberValue>
      <Docs>
        <summary>
 Represents an floating literal token.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="ForBlock">
      <MemberSignature Language="C#" Value="ForBlock" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind ForBlock = unsigned int16(237)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.ForBlock" />
      <MemberSignature Language="VB.NET" Value="ForBlock" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>237</MemberValue>
      <Docs>
        <summary>
 Represents a For or For Each block, including the introducing statement, the
 body and the "Next" (which can be omitted if a containing For has a Next with
 multiple variables).
 </summary>
      </Docs>
    </Member>
    <Member MemberName="ForEachBlock">
      <MemberSignature Language="C#" Value="ForEachBlock" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind ForEachBlock = unsigned int16(238)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.ForEachBlock" />
      <MemberSignature Language="VB.NET" Value="ForEachBlock" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>238</MemberValue>
      <Docs>
        <summary>
 Represents a For or For Each block, including the introducing statement, the
 body and the "Next" (which can be omitted if a containing For has a Next with
 multiple variables).
 </summary>
      </Docs>
    </Member>
    <Member MemberName="ForEachStatement">
      <MemberSignature Language="C#" Value="ForEachStatement" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind ForEachStatement = unsigned int16(241)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.ForEachStatement" />
      <MemberSignature Language="VB.NET" Value="ForEachStatement" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>241</MemberValue>
      <Docs>
        <summary>
 The For Each statement that begins a For Each-Next block. This statement always
 occurs as the Begin of a ForBlock, and the body of the For Each-Next is the
 Body of that ForBlock. Most of the time, the End of that ForBlock is the
 corresponding Next statement. However, multiple nested For statements are ended
 by a single Next statement with multiple variables, then the inner For
 statements will have End set to Nothing, and the Next statement is the End of
 the outermost For statement that is being ended.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="ForKeyword">
      <MemberSignature Language="C#" Value="ForKeyword" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind ForKeyword = unsigned int16(476)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.ForKeyword" />
      <MemberSignature Language="VB.NET" Value="ForKeyword" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>476</MemberValue>
      <Docs>
        <summary>
 Represents a single keyword in a VB program. Which keyword can be determined
 from the Kind property.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="ForStatement">
      <MemberSignature Language="C#" Value="ForStatement" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind ForStatement = unsigned int16(239)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.ForStatement" />
      <MemberSignature Language="VB.NET" Value="ForStatement" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>239</MemberValue>
      <Docs>
        <summary>
 The For statement that begins a For-Next block. This statement always occurs as
 the Begin of a ForBlock. Most of the time, the End of that ForBlock is the
 corresponding Next statement. However, multiple nested For statements are ended
 by a single Next statement with multiple variables, then the inner For
 statements will have End set to Nothing, and the Next statement is the End of
 the outermost For statement that is being ended.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="ForStepClause">
      <MemberSignature Language="C#" Value="ForStepClause" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind ForStepClause = unsigned int16(240)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.ForStepClause" />
      <MemberSignature Language="VB.NET" Value="ForStepClause" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>240</MemberValue>
      <Docs>
        <summary>
 The Step clause in a For Statement.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="FriendKeyword">
      <MemberSignature Language="C#" Value="FriendKeyword" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind FriendKeyword = unsigned int16(477)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.FriendKeyword" />
      <MemberSignature Language="VB.NET" Value="FriendKeyword" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>477</MemberValue>
      <Docs>
        <summary>
 Represents a single keyword in a VB program. Which keyword can be determined
 from the Kind property.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="FromClause">
      <MemberSignature Language="C#" Value="FromClause" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind FromClause = unsigned int16(359)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.FromClause" />
      <MemberSignature Language="VB.NET" Value="FromClause" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>359</MemberValue>
      <Docs>
        <summary>
 Represents a "From" query operator. If this is the beginning of a query, the
 Source will be Nothing. Otherwise, the Source will be the part of the query to
 the left of the From.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="FromKeyword">
      <MemberSignature Language="C#" Value="FromKeyword" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind FromKeyword = unsigned int16(604)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.FromKeyword" />
      <MemberSignature Language="VB.NET" Value="FromKeyword" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>604</MemberValue>
      <Docs>
        <summary>
 Represents a single keyword in a VB program. Which keyword can be determined
 from the Kind property.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="FunctionAggregation">
      <MemberSignature Language="C#" Value="FunctionAggregation" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind FunctionAggregation = unsigned int16(357)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.FunctionAggregation" />
      <MemberSignature Language="VB.NET" Value="FunctionAggregation" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>357</MemberValue>
      <Docs>
        <summary>
 Represents an invocation of an Aggregation function in the aggregation range
 variable declaration of a Group By, Group Join or Aggregate query operator.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="FunctionBlock">
      <MemberSignature Language="C#" Value="FunctionBlock" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind FunctionBlock = unsigned int16(80)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.FunctionBlock" />
      <MemberSignature Language="VB.NET" Value="FunctionBlock" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>80</MemberValue>
      <Docs>
        <summary>
 Represents a Function or Sub block declaration: A declaration that has a
 beginning declaration, a body of executable statements and an end statement.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="FunctionKeyword">
      <MemberSignature Language="C#" Value="FunctionKeyword" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind FunctionKeyword = unsigned int16(478)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.FunctionKeyword" />
      <MemberSignature Language="VB.NET" Value="FunctionKeyword" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>478</MemberValue>
      <Docs>
        <summary>
 Represents a single keyword in a VB program. Which keyword can be determined
 from the Kind property.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="FunctionLambdaHeader">
      <MemberSignature Language="C#" Value="FunctionLambdaHeader" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind FunctionLambdaHeader = unsigned int16(346)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.FunctionLambdaHeader" />
      <MemberSignature Language="VB.NET" Value="FunctionLambdaHeader" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>346</MemberValue>
      <Docs>
        <summary>
 Represents the header part of a lambda expression
 </summary>
      </Docs>
    </Member>
    <Member MemberName="FunctionStatement">
      <MemberSignature Language="C#" Value="FunctionStatement" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind FunctionStatement = unsigned int16(94)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.FunctionStatement" />
      <MemberSignature Language="VB.NET" Value="FunctionStatement" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>94</MemberValue>
      <Docs>
        <summary>
 The statement that declares a Sub or Function. If this method has a body, this
 statement will be the Begin of a BlockStatement with
 Kind=MethodDeclarationBlock, and the body of the method will be the Body of
 that BlockStatement.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="GenericName">
      <MemberSignature Language="C#" Value="GenericName" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind GenericName = unsigned int16(400)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.GenericName" />
      <MemberSignature Language="VB.NET" Value="GenericName" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>400</MemberValue>
      <Docs>
        <summary>
 Represents a simple type name with one or more generic arguments, such as "X(Of
 Y, Z).
 </summary>
      </Docs>
    </Member>
    <Member MemberName="GetAccessorBlock">
      <MemberSignature Language="C#" Value="GetAccessorBlock" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind GetAccessorBlock = unsigned int16(83)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.GetAccessorBlock" />
      <MemberSignature Language="VB.NET" Value="GetAccessorBlock" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>83</MemberValue>
      <Docs>
        <summary>
 Represents an accessor block member declaration: A declaration that has a
 beginning declaration, a body of executable statements and an end statement.
 Examples include property accessors and custom event accessors.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="GetAccessorStatement">
      <MemberSignature Language="C#" Value="GetAccessorStatement" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind GetAccessorStatement = unsigned int16(105)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.GetAccessorStatement" />
      <MemberSignature Language="VB.NET" Value="GetAccessorStatement" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>105</MemberValue>
      <Docs>
        <summary>
 Represents a Get or Set accessor on a property declaration or an AddHandler,
 RemoveHandler or RaiseEvent accessor on a custom event declaration. The Kind of
 the node determines what kind of accessor this is. This statement is always the
 Begin of a BlockNode, and the body of the accessor is the Body of that node.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="GetKeyword">
      <MemberSignature Language="C#" Value="GetKeyword" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind GetKeyword = unsigned int16(479)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.GetKeyword" />
      <MemberSignature Language="VB.NET" Value="GetKeyword" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>479</MemberValue>
      <Docs>
        <summary>
 Represents a single keyword in a VB program. Which keyword can be determined
 from the Kind property.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="GetTypeExpression">
      <MemberSignature Language="C#" Value="GetTypeExpression" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind GetTypeExpression = unsigned int16(285)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.GetTypeExpression" />
      <MemberSignature Language="VB.NET" Value="GetTypeExpression" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>285</MemberValue>
      <Docs>
        <summary>
 Represents a GetType expression.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="GetTypeKeyword">
      <MemberSignature Language="C#" Value="GetTypeKeyword" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind GetTypeKeyword = unsigned int16(480)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.GetTypeKeyword" />
      <MemberSignature Language="VB.NET" Value="GetTypeKeyword" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>480</MemberValue>
      <Docs>
        <summary>
 Represents a single keyword in a VB program. Which keyword can be determined
 from the Kind property.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="GetXmlNamespaceExpression">
      <MemberSignature Language="C#" Value="GetXmlNamespaceExpression" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind GetXmlNamespaceExpression = unsigned int16(290)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.GetXmlNamespaceExpression" />
      <MemberSignature Language="VB.NET" Value="GetXmlNamespaceExpression" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>290</MemberValue>
      <Docs>
        <summary>
 Represents a GetXmlNamespace expression.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="GetXmlNamespaceKeyword">
      <MemberSignature Language="C#" Value="GetXmlNamespaceKeyword" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind GetXmlNamespaceKeyword = unsigned int16(481)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.GetXmlNamespaceKeyword" />
      <MemberSignature Language="VB.NET" Value="GetXmlNamespaceKeyword" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>481</MemberValue>
      <Docs>
        <summary>
 Represents a single keyword in a VB program. Which keyword can be determined
 from the Kind property.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="GlobalKeyword">
      <MemberSignature Language="C#" Value="GlobalKeyword" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind GlobalKeyword = unsigned int16(482)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.GlobalKeyword" />
      <MemberSignature Language="VB.NET" Value="GlobalKeyword" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>482</MemberValue>
      <Docs>
        <summary>
 Represents a single keyword in a VB program. Which keyword can be determined
 from the Kind property.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="GlobalName">
      <MemberSignature Language="C#" Value="GlobalName" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind GlobalName = unsigned int16(402)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.GlobalName" />
      <MemberSignature Language="VB.NET" Value="GlobalName" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>402</MemberValue>
      <Docs>
        <summary>
 Represents a name in the global namespace.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="GosubKeyword">
      <MemberSignature Language="C#" Value="GosubKeyword" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind GosubKeyword = unsigned int16(581)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.GosubKeyword" />
      <MemberSignature Language="VB.NET" Value="GosubKeyword" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>581</MemberValue>
      <Docs>
        <summary>
 Represents a single keyword in a VB program. Which keyword can be determined
 from the Kind property.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="GoToKeyword">
      <MemberSignature Language="C#" Value="GoToKeyword" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind GoToKeyword = unsigned int16(483)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.GoToKeyword" />
      <MemberSignature Language="VB.NET" Value="GoToKeyword" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>483</MemberValue>
      <Docs>
        <summary>
 Represents a single keyword in a VB program. Which keyword can be determined
 from the Kind property.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="GoToStatement">
      <MemberSignature Language="C#" Value="GoToStatement" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind GoToStatement = unsigned int16(149)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.GoToStatement" />
      <MemberSignature Language="VB.NET" Value="GoToStatement" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>149</MemberValue>
      <Docs>
        <summary>
 Represents a "GoTo" statement.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="GreaterThanEqualsToken">
      <MemberSignature Language="C#" Value="GreaterThanEqualsToken" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind GreaterThanEqualsToken = unsigned int16(658)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.GreaterThanEqualsToken" />
      <MemberSignature Language="VB.NET" Value="GreaterThanEqualsToken" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>658</MemberValue>
      <Docs>
        <summary>
 Represents a single punctuation mark or operator in a VB program. Which one can
 be determined from the Kind property.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="GreaterThanExpression">
      <MemberSignature Language="C#" Value="GreaterThanExpression" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind GreaterThanExpression = unsigned int16(324)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.GreaterThanExpression" />
      <MemberSignature Language="VB.NET" Value="GreaterThanExpression" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>324</MemberValue>
      <Docs>
        <summary>
 Represents a binary operator. The Kind property classifies the operators into
 similar kind of operators (arithmetic, relational, logical or string); the
 exact operation being performed is determined by the Operator property.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="GreaterThanGreaterThanEqualsToken">
      <MemberSignature Language="C#" Value="GreaterThanGreaterThanEqualsToken" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind GreaterThanGreaterThanEqualsToken = unsigned int16(674)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.GreaterThanGreaterThanEqualsToken" />
      <MemberSignature Language="VB.NET" Value="GreaterThanGreaterThanEqualsToken" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>674</MemberValue>
      <Docs>
        <summary>
 Represents a single punctuation mark or operator in a VB program. Which one can
 be determined from the Kind property.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="GreaterThanGreaterThanToken">
      <MemberSignature Language="C#" Value="GreaterThanGreaterThanToken" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind GreaterThanGreaterThanToken = unsigned int16(672)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.GreaterThanGreaterThanToken" />
      <MemberSignature Language="VB.NET" Value="GreaterThanGreaterThanToken" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>672</MemberValue>
      <Docs>
        <summary>
 Represents a single punctuation mark or operator in a VB program. Which one can
 be determined from the Kind property.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="GreaterThanOrEqualExpression">
      <MemberSignature Language="C#" Value="GreaterThanOrEqualExpression" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind GreaterThanOrEqualExpression = unsigned int16(323)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.GreaterThanOrEqualExpression" />
      <MemberSignature Language="VB.NET" Value="GreaterThanOrEqualExpression" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>323</MemberValue>
      <Docs>
        <summary>
 Represents a binary operator. The Kind property classifies the operators into
 similar kind of operators (arithmetic, relational, logical or string); the
 exact operation being performed is determined by the Operator property.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="GreaterThanToken">
      <MemberSignature Language="C#" Value="GreaterThanToken" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind GreaterThanToken = unsigned int16(657)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.GreaterThanToken" />
      <MemberSignature Language="VB.NET" Value="GreaterThanToken" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>657</MemberValue>
      <Docs>
        <summary>
 Represents a single punctuation mark or operator in a VB program. Which one can
 be determined from the Kind property.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="GroupAggregation">
      <MemberSignature Language="C#" Value="GroupAggregation" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind GroupAggregation = unsigned int16(358)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.GroupAggregation" />
      <MemberSignature Language="VB.NET" Value="GroupAggregation" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>358</MemberValue>
      <Docs>
        <summary>
 Represents the use of "Group" as the aggregation function in the in the
 aggregation range variable declaration of a Group By or Group Join query
 operator.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="GroupByClause">
      <MemberSignature Language="C#" Value="GroupByClause" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind GroupByClause = unsigned int16(368)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.GroupByClause" />
      <MemberSignature Language="VB.NET" Value="GroupByClause" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>368</MemberValue>
      <Docs>
        <summary>
 Represents the "Group By" query operator.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="GroupJoinClause">
      <MemberSignature Language="C#" Value="GroupJoinClause" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind GroupJoinClause = unsigned int16(371)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.GroupJoinClause" />
      <MemberSignature Language="VB.NET" Value="GroupJoinClause" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>371</MemberValue>
      <Docs>
        <summary>
 Represents the "Group Join" query operator.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="GroupKeyword">
      <MemberSignature Language="C#" Value="GroupKeyword" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind GroupKeyword = unsigned int16(605)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.GroupKeyword" />
      <MemberSignature Language="VB.NET" Value="GroupKeyword" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>605</MemberValue>
      <Docs>
        <summary>
 Represents a single keyword in a VB program. Which keyword can be determined
 from the Kind property.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="HandlesClause">
      <MemberSignature Language="C#" Value="HandlesClause" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind HandlesClause = unsigned int16(113)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.HandlesClause" />
      <MemberSignature Language="VB.NET" Value="HandlesClause" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>113</MemberValue>
      <Docs>
        <summary>
 Represents the "Handles ..." clause on a method declaration that describes
 which events this method handles.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="HandlesClauseItem">
      <MemberSignature Language="C#" Value="HandlesClauseItem" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind HandlesClauseItem = unsigned int16(117)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.HandlesClauseItem" />
      <MemberSignature Language="VB.NET" Value="HandlesClauseItem" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>117</MemberValue>
      <Docs>
        <summary>
 Represents a single handled event in a "Handles ..." clause.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="HandlesKeyword">
      <MemberSignature Language="C#" Value="HandlesKeyword" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind HandlesKeyword = unsigned int16(484)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.HandlesKeyword" />
      <MemberSignature Language="VB.NET" Value="HandlesKeyword" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>484</MemberValue>
      <Docs>
        <summary>
 Represents a single keyword in a VB program. Which keyword can be determined
 from the Kind property.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="HashToken">
      <MemberSignature Language="C#" Value="HashToken" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind HashToken = unsigned int16(637)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.HashToken" />
      <MemberSignature Language="VB.NET" Value="HashToken" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>637</MemberValue>
      <Docs>
        <summary>
 Represents a single punctuation mark or operator in a VB program. Which one can
 be determined from the Kind property.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="IdentifierLabel">
      <MemberSignature Language="C#" Value="IdentifierLabel" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind IdentifierLabel = unsigned int16(150)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.IdentifierLabel" />
      <MemberSignature Language="VB.NET" Value="IdentifierLabel" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>150</MemberValue>
      <Docs>
        <summary>
 A label for a GoTo, Resume, or On Error statement. An identifier, line number,
 or next keyword.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="IdentifierName">
      <MemberSignature Language="C#" Value="IdentifierName" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind IdentifierName = unsigned int16(399)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.IdentifierName" />
      <MemberSignature Language="VB.NET" Value="IdentifierName" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>399</MemberValue>
      <Docs>
        <summary>
 Represents a type name consisting of a single identifier (which might include
 brackets or a type character).
 </summary>
      </Docs>
    </Member>
    <Member MemberName="IdentifierToken">
      <MemberSignature Language="C#" Value="IdentifierToken" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind IdentifierToken = unsigned int16(700)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.IdentifierToken" />
      <MemberSignature Language="VB.NET" Value="IdentifierToken" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>700</MemberValue>
      <Docs>
        <summary>
 Represents an identifier token. This might include brackets around the name and
 a type character.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="IfDirectiveTrivia">
      <MemberSignature Language="C#" Value="IfDirectiveTrivia" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind IfDirectiveTrivia = unsigned int16(737)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.IfDirectiveTrivia" />
      <MemberSignature Language="VB.NET" Value="IfDirectiveTrivia" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>737</MemberValue>
      <Docs>
        <summary>
 Represents the beginning of an #If pre-processing directive appearing in
 source.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="IfKeyword">
      <MemberSignature Language="C#" Value="IfKeyword" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind IfKeyword = unsigned int16(485)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.IfKeyword" />
      <MemberSignature Language="VB.NET" Value="IfKeyword" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>485</MemberValue>
      <Docs>
        <summary>
 Represents a single keyword in a VB program. Which keyword can be determined
 from the Kind property.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="IfStatement">
      <MemberSignature Language="C#" Value="IfStatement" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind IfStatement = unsigned int16(182)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.IfStatement" />
      <MemberSignature Language="VB.NET" Value="IfStatement" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>182</MemberValue>
      <Docs>
        <summary>
 Represents the If part or ElseIf part of a If...End If block (or line If). This
 statement is always the Begin of a IfPart. The Kind can be examined to
 determine if this is an If or an ElseIf statement.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="ImplementsClause">
      <MemberSignature Language="C#" Value="ImplementsClause" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind ImplementsClause = unsigned int16(112)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.ImplementsClause" />
      <MemberSignature Language="VB.NET" Value="ImplementsClause" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>112</MemberValue>
      <Docs>
        <summary>
 Represents the "Implements ..." clause on a type member, which describes which
 interface members this member implements.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="ImplementsKeyword">
      <MemberSignature Language="C#" Value="ImplementsKeyword" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind ImplementsKeyword = unsigned int16(486)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.ImplementsKeyword" />
      <MemberSignature Language="VB.NET" Value="ImplementsKeyword" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>486</MemberValue>
      <Docs>
        <summary>
 Represents a single keyword in a VB program. Which keyword can be determined
 from the Kind property.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="ImplementsStatement">
      <MemberSignature Language="C#" Value="ImplementsStatement" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind ImplementsStatement = unsigned int16(58)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.ImplementsStatement" />
      <MemberSignature Language="VB.NET" Value="ImplementsStatement" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>58</MemberValue>
      <Docs>
        <summary>
 Represents an Implements statement in a Class or Structure.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="ImportAliasClause">
      <MemberSignature Language="C#" Value="ImportAliasClause" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind ImportAliasClause = unsigned int16(754)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.ImportAliasClause" />
      <MemberSignature Language="VB.NET" Value="ImportAliasClause" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>754</MemberValue>
      <Docs>
        <summary>
 Represents an alias identifier followed by an "=" token in an Imports clause.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="ImportsKeyword">
      <MemberSignature Language="C#" Value="ImportsKeyword" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind ImportsKeyword = unsigned int16(487)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.ImportsKeyword" />
      <MemberSignature Language="VB.NET" Value="ImportsKeyword" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>487</MemberValue>
      <Docs>
        <summary>
 Represents a single keyword in a VB program. Which keyword can be determined
 from the Kind property.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="ImportsStatement">
      <MemberSignature Language="C#" Value="ImportsStatement" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind ImportsStatement = unsigned int16(42)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.ImportsStatement" />
      <MemberSignature Language="VB.NET" Value="ImportsStatement" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>42</MemberValue>
      <Docs>
        <summary>
 Represents an Imports statement, which has one or more imports clauses.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="IncompleteMember">
      <MemberSignature Language="C#" Value="IncompleteMember" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind IncompleteMember = unsigned int16(118)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.IncompleteMember" />
      <MemberSignature Language="VB.NET" Value="IncompleteMember" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>118</MemberValue>
      <Docs>
        <summary>
 Represents the beginning of a declaration. However, not enough syntax is
 detected to classify this as a field, method, property or event. This is node
 always represents a syntax error.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="InferKeyword">
      <MemberSignature Language="C#" Value="InferKeyword" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind InferKeyword = unsigned int16(606)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.InferKeyword" />
      <MemberSignature Language="VB.NET" Value="InferKeyword" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>606</MemberValue>
      <Docs>
        <summary>
 Represents a single keyword in a VB program. Which keyword can be determined
 from the Kind property.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="InferredFieldInitializer">
      <MemberSignature Language="C#" Value="InferredFieldInitializer" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind InferredFieldInitializer = unsigned int16(127)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.InferredFieldInitializer" />
      <MemberSignature Language="VB.NET" Value="InferredFieldInitializer" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>127</MemberValue>
      <Docs>
        <summary>
 Represent a field initializer in a With {...} initializer where the field name
 is inferred from the initializer expression.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="InheritsKeyword">
      <MemberSignature Language="C#" Value="InheritsKeyword" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind InheritsKeyword = unsigned int16(489)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.InheritsKeyword" />
      <MemberSignature Language="VB.NET" Value="InheritsKeyword" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>489</MemberValue>
      <Docs>
        <summary>
 Represents a single keyword in a VB program. Which keyword can be determined
 from the Kind property.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="InheritsStatement">
      <MemberSignature Language="C#" Value="InheritsStatement" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind InheritsStatement = unsigned int16(57)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.InheritsStatement" />
      <MemberSignature Language="VB.NET" Value="InheritsStatement" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>57</MemberValue>
      <Docs>
        <summary>
 Represents an Inherits statement in a Class, Structure or Interface.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="InKeyword">
      <MemberSignature Language="C#" Value="InKeyword" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind InKeyword = unsigned int16(488)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.InKeyword" />
      <MemberSignature Language="VB.NET" Value="InKeyword" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>488</MemberValue>
      <Docs>
        <summary>
 Represents a single keyword in a VB program. Which keyword can be determined
 from the Kind property.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="IntegerDivideAssignmentStatement">
      <MemberSignature Language="C#" Value="IntegerDivideAssignmentStatement" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind IntegerDivideAssignmentStatement = unsigned int16(253)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.IntegerDivideAssignmentStatement" />
      <MemberSignature Language="VB.NET" Value="IntegerDivideAssignmentStatement" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>253</MemberValue>
      <Docs>
        <summary>
 Represents a simple, compound, or Mid assignment statement. Which one can be
 determined by checking the Kind.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="IntegerDivideExpression">
      <MemberSignature Language="C#" Value="IntegerDivideExpression" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind IntegerDivideExpression = unsigned int16(311)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.IntegerDivideExpression" />
      <MemberSignature Language="VB.NET" Value="IntegerDivideExpression" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>311</MemberValue>
      <Docs>
        <summary>
 Represents a binary operator. The Kind property classifies the operators into
 similar kind of operators (arithmetic, relational, logical or string); the
 exact operation being performed is determined by the Operator property.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="IntegerKeyword">
      <MemberSignature Language="C#" Value="IntegerKeyword" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind IntegerKeyword = unsigned int16(490)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.IntegerKeyword" />
      <MemberSignature Language="VB.NET" Value="IntegerKeyword" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>490</MemberValue>
      <Docs>
        <summary>
 Represents a single keyword in a VB program. Which keyword can be determined
 from the Kind property.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="IntegerLiteralToken">
      <MemberSignature Language="C#" Value="IntegerLiteralToken" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind IntegerLiteralToken = unsigned int16(701)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.IntegerLiteralToken" />
      <MemberSignature Language="VB.NET" Value="IntegerLiteralToken" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>701</MemberValue>
      <Docs>
        <summary>
 Represents an integer literal token.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="InterfaceBlock">
      <MemberSignature Language="C#" Value="InterfaceBlock" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind InterfaceBlock = unsigned int16(52)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.InterfaceBlock" />
      <MemberSignature Language="VB.NET" Value="InterfaceBlock" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>52</MemberValue>
      <Docs>
        <summary>
 Represents a declaration of a Interface, its contents and the End statement
 that ends it.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="InterfaceKeyword">
      <MemberSignature Language="C#" Value="InterfaceKeyword" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind InterfaceKeyword = unsigned int16(491)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.InterfaceKeyword" />
      <MemberSignature Language="VB.NET" Value="InterfaceKeyword" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>491</MemberValue>
      <Docs>
        <summary>
 Represents a single keyword in a VB program. Which keyword can be determined
 from the Kind property.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="InterfaceStatement">
      <MemberSignature Language="C#" Value="InterfaceStatement" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind InterfaceStatement = unsigned int16(61)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.InterfaceStatement" />
      <MemberSignature Language="VB.NET" Value="InterfaceStatement" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>61</MemberValue>
      <Docs>
        <summary>
 Represents the beginning statement of a Interface declaration. This node always
 appears as the Begin of a TypeBlock with Kind=InterfaceDeclarationBlock.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="InterpolatedStringExpression">
      <MemberSignature Language="C#" Value="InterpolatedStringExpression" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind InterpolatedStringExpression = unsigned int16(780)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.InterpolatedStringExpression" />
      <MemberSignature Language="VB.NET" Value="InterpolatedStringExpression" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>780</MemberValue>
      <Docs>
        <summary>
 Represents an interpolated string expression.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="InterpolatedStringText">
      <MemberSignature Language="C#" Value="InterpolatedStringText" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind InterpolatedStringText = unsigned int16(781)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.InterpolatedStringText" />
      <MemberSignature Language="VB.NET" Value="InterpolatedStringText" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>781</MemberValue>
      <Docs>
        <summary>
 Represents literal text content in an interpolated string.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="InterpolatedStringTextToken">
      <MemberSignature Language="C#" Value="InterpolatedStringTextToken" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind InterpolatedStringTextToken = unsigned int16(786)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.InterpolatedStringTextToken" />
      <MemberSignature Language="VB.NET" Value="InterpolatedStringTextToken" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>786</MemberValue>
      <Docs>
        <summary>
 Represents literal character data in interpolated string expression.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="Interpolation">
      <MemberSignature Language="C#" Value="Interpolation" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind Interpolation = unsigned int16(782)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.Interpolation" />
      <MemberSignature Language="VB.NET" Value="Interpolation" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>782</MemberValue>
      <Docs>
        <summary>
 Represents an embedded expression in an interpolated string expression e.g. '{expression[,alignment][:formatString]}'.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="InterpolationAlignmentClause">
      <MemberSignature Language="C#" Value="InterpolationAlignmentClause" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind InterpolationAlignmentClause = unsigned int16(783)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.InterpolationAlignmentClause" />
      <MemberSignature Language="VB.NET" Value="InterpolationAlignmentClause" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>783</MemberValue>
      <Docs>
        <summary>
 Represents an alignment clause ', alignment' of an interpolated string embedded expression.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="InterpolationFormatClause">
      <MemberSignature Language="C#" Value="InterpolationFormatClause" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind InterpolationFormatClause = unsigned int16(784)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.InterpolationFormatClause" />
      <MemberSignature Language="VB.NET" Value="InterpolationFormatClause" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>784</MemberValue>
      <Docs>
        <summary>
 Represents a format string clause ':formatString' of an interpolated string embedded expression.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="IntoKeyword">
      <MemberSignature Language="C#" Value="IntoKeyword" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind IntoKeyword = unsigned int16(607)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.IntoKeyword" />
      <MemberSignature Language="VB.NET" Value="IntoKeyword" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>607</MemberValue>
      <Docs>
        <summary>
 Represents a single keyword in a VB program. Which keyword can be determined
 from the Kind property.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="InvocationExpression">
      <MemberSignature Language="C#" Value="InvocationExpression" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind InvocationExpression = unsigned int16(296)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.InvocationExpression" />
      <MemberSignature Language="VB.NET" Value="InvocationExpression" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>296</MemberValue>
      <Docs>
        <summary>
 Represents an invocation expression consisting of an invocation target and an
 optional argument list or an array, parameterized property or object default
 property index.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="IsExpression">
      <MemberSignature Language="C#" Value="IsExpression" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind IsExpression = unsigned int16(325)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.IsExpression" />
      <MemberSignature Language="VB.NET" Value="IsExpression" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>325</MemberValue>
      <Docs>
        <summary>
 Represents a binary operator. The Kind property classifies the operators into
 similar kind of operators (arithmetic, relational, logical or string); the
 exact operation being performed is determined by the Operator property.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="IsFalseKeyword">
      <MemberSignature Language="C#" Value="IsFalseKeyword" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind IsFalseKeyword = unsigned int16(608)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.IsFalseKeyword" />
      <MemberSignature Language="VB.NET" Value="IsFalseKeyword" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>608</MemberValue>
      <Docs>
        <summary>
 Represents a single keyword in a VB program. Which keyword can be determined
 from the Kind property.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="IsKeyword">
      <MemberSignature Language="C#" Value="IsKeyword" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind IsKeyword = unsigned int16(492)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.IsKeyword" />
      <MemberSignature Language="VB.NET" Value="IsKeyword" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>492</MemberValue>
      <Docs>
        <summary>
 Represents a single keyword in a VB program. Which keyword can be determined
 from the Kind property.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="IsNotExpression">
      <MemberSignature Language="C#" Value="IsNotExpression" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind IsNotExpression = unsigned int16(326)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.IsNotExpression" />
      <MemberSignature Language="VB.NET" Value="IsNotExpression" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>326</MemberValue>
      <Docs>
        <summary>
 Represents a binary operator. The Kind property classifies the operators into
 similar kind of operators (arithmetic, relational, logical or string); the
 exact operation being performed is determined by the Operator property.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="IsNotKeyword">
      <MemberSignature Language="C#" Value="IsNotKeyword" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind IsNotKeyword = unsigned int16(495)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.IsNotKeyword" />
      <MemberSignature Language="VB.NET" Value="IsNotKeyword" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>495</MemberValue>
      <Docs>
        <summary>
 Represents a single keyword in a VB program. Which keyword can be determined
 from the Kind property.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="IsTrueKeyword">
      <MemberSignature Language="C#" Value="IsTrueKeyword" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind IsTrueKeyword = unsigned int16(609)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.IsTrueKeyword" />
      <MemberSignature Language="VB.NET" Value="IsTrueKeyword" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>609</MemberValue>
      <Docs>
        <summary>
 Represents a single keyword in a VB program. Which keyword can be determined
 from the Kind property.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="IteratorKeyword">
      <MemberSignature Language="C#" Value="IteratorKeyword" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind IteratorKeyword = unsigned int16(632)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.IteratorKeyword" />
      <MemberSignature Language="VB.NET" Value="IteratorKeyword" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>632</MemberValue>
      <Docs>
        <summary>
 Represents a single keyword in a VB program. Which keyword can be determined
 from the Kind property.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="JoinCondition">
      <MemberSignature Language="C#" Value="JoinCondition" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind JoinCondition = unsigned int16(369)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.JoinCondition" />
      <MemberSignature Language="VB.NET" Value="JoinCondition" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>369</MemberValue>
      <Docs>
        <summary>
 Represents the "expression Equals expression" condition in a Join.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="JoinKeyword">
      <MemberSignature Language="C#" Value="JoinKeyword" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind JoinKeyword = unsigned int16(610)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.JoinKeyword" />
      <MemberSignature Language="VB.NET" Value="JoinKeyword" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>610</MemberValue>
      <Docs>
        <summary>
 Represents a single keyword in a VB program. Which keyword can be determined
 from the Kind property.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="KeyKeyword">
      <MemberSignature Language="C#" Value="KeyKeyword" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind KeyKeyword = unsigned int16(611)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.KeyKeyword" />
      <MemberSignature Language="VB.NET" Value="KeyKeyword" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>611</MemberValue>
      <Docs>
        <summary>
 Represents a single keyword in a VB program. Which keyword can be determined
 from the Kind property.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="KeywordEventContainer">
      <MemberSignature Language="C#" Value="KeywordEventContainer" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind KeywordEventContainer = unsigned int16(114)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.KeywordEventContainer" />
      <MemberSignature Language="VB.NET" Value="KeywordEventContainer" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>114</MemberValue>
      <Docs>
        <summary>
 Represents event container specified through special keywords "Me", "MyBase" or
 "MyClass"..
 </summary>
      </Docs>
    </Member>
    <Member MemberName="LabelStatement">
      <MemberSignature Language="C#" Value="LabelStatement" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind LabelStatement = unsigned int16(148)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.LabelStatement" />
      <MemberSignature Language="VB.NET" Value="LabelStatement" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>148</MemberValue>
      <Docs>
        <summary>
 Represents a label statement.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="LeftShiftAssignmentStatement">
      <MemberSignature Language="C#" Value="LeftShiftAssignmentStatement" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind LeftShiftAssignmentStatement = unsigned int16(255)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.LeftShiftAssignmentStatement" />
      <MemberSignature Language="VB.NET" Value="LeftShiftAssignmentStatement" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>255</MemberValue>
      <Docs>
        <summary>
 Represents a simple, compound, or Mid assignment statement. Which one can be
 determined by checking the Kind.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="LeftShiftExpression">
      <MemberSignature Language="C#" Value="LeftShiftExpression" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind LeftShiftExpression = unsigned int16(315)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.LeftShiftExpression" />
      <MemberSignature Language="VB.NET" Value="LeftShiftExpression" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>315</MemberValue>
      <Docs>
        <summary>
 Represents a binary operator. The Kind property classifies the operators into
 similar kind of operators (arithmetic, relational, logical or string); the
 exact operation being performed is determined by the Operator property.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="LessThanEqualsToken">
      <MemberSignature Language="C#" Value="LessThanEqualsToken" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind LessThanEqualsToken = unsigned int16(654)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.LessThanEqualsToken" />
      <MemberSignature Language="VB.NET" Value="LessThanEqualsToken" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>654</MemberValue>
      <Docs>
        <summary>
 Represents a single punctuation mark or operator in a VB program. Which one can
 be determined from the Kind property.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="LessThanExclamationMinusMinusToken">
      <MemberSignature Language="C#" Value="LessThanExclamationMinusMinusToken" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind LessThanExclamationMinusMinusToken = unsigned int16(684)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.LessThanExclamationMinusMinusToken" />
      <MemberSignature Language="VB.NET" Value="LessThanExclamationMinusMinusToken" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>684</MemberValue>
      <Docs>
        <summary>
 Represents a single punctuation mark or operator in a VB program. Which one can
 be determined from the Kind property.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="LessThanExpression">
      <MemberSignature Language="C#" Value="LessThanExpression" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind LessThanExpression = unsigned int16(321)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.LessThanExpression" />
      <MemberSignature Language="VB.NET" Value="LessThanExpression" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>321</MemberValue>
      <Docs>
        <summary>
 Represents a binary operator. The Kind property classifies the operators into
 similar kind of operators (arithmetic, relational, logical or string); the
 exact operation being performed is determined by the Operator property.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="LessThanGreaterThanToken">
      <MemberSignature Language="C#" Value="LessThanGreaterThanToken" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind LessThanGreaterThanToken = unsigned int16(655)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.LessThanGreaterThanToken" />
      <MemberSignature Language="VB.NET" Value="LessThanGreaterThanToken" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>655</MemberValue>
      <Docs>
        <summary>
 Represents a single punctuation mark or operator in a VB program. Which one can
 be determined from the Kind property.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="LessThanLessThanEqualsToken">
      <MemberSignature Language="C#" Value="LessThanLessThanEqualsToken" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind LessThanLessThanEqualsToken = unsigned int16(673)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.LessThanLessThanEqualsToken" />
      <MemberSignature Language="VB.NET" Value="LessThanLessThanEqualsToken" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>673</MemberValue>
      <Docs>
        <summary>
 Represents a single punctuation mark or operator in a VB program. Which one can
 be determined from the Kind property.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="LessThanLessThanToken">
      <MemberSignature Language="C#" Value="LessThanLessThanToken" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind LessThanLessThanToken = unsigned int16(671)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.LessThanLessThanToken" />
      <MemberSignature Language="VB.NET" Value="LessThanLessThanToken" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>671</MemberValue>
      <Docs>
        <summary>
 Represents a single punctuation mark or operator in a VB program. Which one can
 be determined from the Kind property.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="LessThanOrEqualExpression">
      <MemberSignature Language="C#" Value="LessThanOrEqualExpression" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind LessThanOrEqualExpression = unsigned int16(322)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.LessThanOrEqualExpression" />
      <MemberSignature Language="VB.NET" Value="LessThanOrEqualExpression" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>322</MemberValue>
      <Docs>
        <summary>
 Represents a binary operator. The Kind property classifies the operators into
 similar kind of operators (arithmetic, relational, logical or string); the
 exact operation being performed is determined by the Operator property.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="LessThanPercentEqualsToken">
      <MemberSignature Language="C#" Value="LessThanPercentEqualsToken" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind LessThanPercentEqualsToken = unsigned int16(688)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.LessThanPercentEqualsToken" />
      <MemberSignature Language="VB.NET" Value="LessThanPercentEqualsToken" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>688</MemberValue>
      <Docs>
        <summary>
 Represents a single punctuation mark or operator in a VB program. Which one can
 be determined from the Kind property.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="LessThanQuestionToken">
      <MemberSignature Language="C#" Value="LessThanQuestionToken" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind LessThanQuestionToken = unsigned int16(686)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.LessThanQuestionToken" />
      <MemberSignature Language="VB.NET" Value="LessThanQuestionToken" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>686</MemberValue>
      <Docs>
        <summary>
 Represents a single punctuation mark or operator in a VB program. Which one can
 be determined from the Kind property.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="LessThanSlashToken">
      <MemberSignature Language="C#" Value="LessThanSlashToken" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind LessThanSlashToken = unsigned int16(683)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.LessThanSlashToken" />
      <MemberSignature Language="VB.NET" Value="LessThanSlashToken" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>683</MemberValue>
      <Docs>
        <summary>
 Represents a single punctuation mark or operator in a VB program. Which one can
 be determined from the Kind property.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="LessThanToken">
      <MemberSignature Language="C#" Value="LessThanToken" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind LessThanToken = unsigned int16(653)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.LessThanToken" />
      <MemberSignature Language="VB.NET" Value="LessThanToken" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>653</MemberValue>
      <Docs>
        <summary>
 Represents a single punctuation mark or operator in a VB program. Which one can
 be determined from the Kind property.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="LetClause">
      <MemberSignature Language="C#" Value="LetClause" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind LetClause = unsigned int16(360)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.LetClause" />
      <MemberSignature Language="VB.NET" Value="LetClause" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>360</MemberValue>
      <Docs>
        <summary>
 Represents a "Let" query operator.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="LetKeyword">
      <MemberSignature Language="C#" Value="LetKeyword" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind LetKeyword = unsigned int16(496)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.LetKeyword" />
      <MemberSignature Language="VB.NET" Value="LetKeyword" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>496</MemberValue>
      <Docs>
        <summary>
 Represents a single keyword in a VB program. Which keyword can be determined
 from the Kind property.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="LibKeyword">
      <MemberSignature Language="C#" Value="LibKeyword" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind LibKeyword = unsigned int16(497)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.LibKeyword" />
      <MemberSignature Language="VB.NET" Value="LibKeyword" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>497</MemberValue>
      <Docs>
        <summary>
 Represents a single keyword in a VB program. Which keyword can be determined
 from the Kind property.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="LikeExpression">
      <MemberSignature Language="C#" Value="LikeExpression" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind LikeExpression = unsigned int16(327)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.LikeExpression" />
      <MemberSignature Language="VB.NET" Value="LikeExpression" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>327</MemberValue>
      <Docs>
        <summary>
 Represents a binary operator. The Kind property classifies the operators into
 similar kind of operators (arithmetic, relational, logical or string); the
 exact operation being performed is determined by the Operator property.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="LikeKeyword">
      <MemberSignature Language="C#" Value="LikeKeyword" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind LikeKeyword = unsigned int16(498)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.LikeKeyword" />
      <MemberSignature Language="VB.NET" Value="LikeKeyword" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>498</MemberValue>
      <Docs>
        <summary>
 Represents a single keyword in a VB program. Which keyword can be determined
 from the Kind property.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="LineContinuationTrivia">
      <MemberSignature Language="C#" Value="LineContinuationTrivia" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind LineContinuationTrivia = unsigned int16(733)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.LineContinuationTrivia" />
      <MemberSignature Language="VB.NET" Value="LineContinuationTrivia" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>733</MemberValue>
      <Docs>
        <summary>
 Represents an explicit line continuation character at the end of a line, i.e.,
 _
 </summary>
      </Docs>
    </Member>
    <Member MemberName="List">
      <MemberSignature Language="C#" Value="List" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind List = unsigned int16(1)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.List" />
      <MemberSignature Language="VB.NET" Value="List" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>1</MemberValue>
      <Docs>
        <summary>To be added.</summary>
      </Docs>
    </Member>
    <Member MemberName="LocalDeclarationStatement">
      <MemberSignature Language="C#" Value="LocalDeclarationStatement" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind LocalDeclarationStatement = unsigned int16(147)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.LocalDeclarationStatement" />
      <MemberSignature Language="VB.NET" Value="LocalDeclarationStatement" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>147</MemberValue>
      <Docs>
        <summary>
 Represents the declaration of one or more local variables or constants.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="LongKeyword">
      <MemberSignature Language="C#" Value="LongKeyword" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind LongKeyword = unsigned int16(499)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.LongKeyword" />
      <MemberSignature Language="VB.NET" Value="LongKeyword" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>499</MemberValue>
      <Docs>
        <summary>
 Represents a single keyword in a VB program. Which keyword can be determined
 from the Kind property.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="LoopKeyword">
      <MemberSignature Language="C#" Value="LoopKeyword" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind LoopKeyword = unsigned int16(500)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.LoopKeyword" />
      <MemberSignature Language="VB.NET" Value="LoopKeyword" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>500</MemberValue>
      <Docs>
        <summary>
 Represents a single keyword in a VB program. Which keyword can be determined
 from the Kind property.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="LoopUntilStatement">
      <MemberSignature Language="C#" Value="LoopUntilStatement" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind LoopUntilStatement = unsigned int16(775)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.LoopUntilStatement" />
      <MemberSignature Language="VB.NET" Value="LoopUntilStatement" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>775</MemberValue>
      <Docs>
        <summary>
 Represents a "Loop Until" statement that end a "Do ... Loop" block.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="LoopWhileStatement">
      <MemberSignature Language="C#" Value="LoopWhileStatement" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind LoopWhileStatement = unsigned int16(774)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.LoopWhileStatement" />
      <MemberSignature Language="VB.NET" Value="LoopWhileStatement" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>774</MemberValue>
      <Docs>
        <summary>
 Represents a "Loop While" statement that end a "Do ... Loop" block.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="MeExpression">
      <MemberSignature Language="C#" Value="MeExpression" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind MeExpression = unsigned int16(282)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.MeExpression" />
      <MemberSignature Language="VB.NET" Value="MeExpression" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>282</MemberValue>
      <Docs>
        <summary>
 Identifies the special instance "Me"
 </summary>
      </Docs>
    </Member>
    <Member MemberName="MeKeyword">
      <MemberSignature Language="C#" Value="MeKeyword" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind MeKeyword = unsigned int16(501)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.MeKeyword" />
      <MemberSignature Language="VB.NET" Value="MeKeyword" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>501</MemberValue>
      <Docs>
        <summary>
 Represents a single keyword in a VB program. Which keyword can be determined
 from the Kind property.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="MidAssignmentStatement">
      <MemberSignature Language="C#" Value="MidAssignmentStatement" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind MidAssignmentStatement = unsigned int16(248)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.MidAssignmentStatement" />
      <MemberSignature Language="VB.NET" Value="MidAssignmentStatement" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>248</MemberValue>
      <Docs>
        <summary>
 Represents a simple, compound, or Mid assignment statement. Which one can be
 determined by checking the Kind.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="MidExpression">
      <MemberSignature Language="C#" Value="MidExpression" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind MidExpression = unsigned int16(260)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.MidExpression" />
      <MemberSignature Language="VB.NET" Value="MidExpression" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>260</MemberValue>
      <Docs>
        <summary>
 Represents a left-hand side of a MidAssignment statement.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="MidKeyword">
      <MemberSignature Language="C#" Value="MidKeyword" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind MidKeyword = unsigned int16(612)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.MidKeyword" />
      <MemberSignature Language="VB.NET" Value="MidKeyword" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>612</MemberValue>
      <Docs>
        <summary>
 Represents a single keyword in a VB program. Which keyword can be determined
 from the Kind property.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="MinusEqualsToken">
      <MemberSignature Language="C#" Value="MinusEqualsToken" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind MinusEqualsToken = unsigned int16(667)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.MinusEqualsToken" />
      <MemberSignature Language="VB.NET" Value="MinusEqualsToken" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>667</MemberValue>
      <Docs>
        <summary>
 Represents a single punctuation mark or operator in a VB program. Which one can
 be determined from the Kind property.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="MinusMinusGreaterThanToken">
      <MemberSignature Language="C#" Value="MinusMinusGreaterThanToken" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind MinusMinusGreaterThanToken = unsigned int16(685)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.MinusMinusGreaterThanToken" />
      <MemberSignature Language="VB.NET" Value="MinusMinusGreaterThanToken" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>685</MemberValue>
      <Docs>
        <summary>
 Represents a single punctuation mark or operator in a VB program. Which one can
 be determined from the Kind property.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="MinusToken">
      <MemberSignature Language="C#" Value="MinusToken" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind MinusToken = unsigned int16(649)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.MinusToken" />
      <MemberSignature Language="VB.NET" Value="MinusToken" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>649</MemberValue>
      <Docs>
        <summary>
 Represents a single punctuation mark or operator in a VB program. Which one can
 be determined from the Kind property.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="ModifiedIdentifier">
      <MemberSignature Language="C#" Value="ModifiedIdentifier" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind ModifiedIdentifier = unsigned int16(133)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.ModifiedIdentifier" />
      <MemberSignature Language="VB.NET" Value="ModifiedIdentifier" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>133</MemberValue>
      <Docs>
        <summary>
 Represents an identifier with optional "?" or "()" or "(,,,)" modifiers, as
 used in parameter declarations and variable declarations.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="ModKeyword">
      <MemberSignature Language="C#" Value="ModKeyword" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind ModKeyword = unsigned int16(502)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.ModKeyword" />
      <MemberSignature Language="VB.NET" Value="ModKeyword" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>502</MemberValue>
      <Docs>
        <summary>
 Represents a single keyword in a VB program. Which keyword can be determined
 from the Kind property.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="ModuleBlock">
      <MemberSignature Language="C#" Value="ModuleBlock" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind ModuleBlock = unsigned int16(50)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.ModuleBlock" />
      <MemberSignature Language="VB.NET" Value="ModuleBlock" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>50</MemberValue>
      <Docs>
        <summary>
 Represents a declaration of Module, its contents and the End statement that
 ends it.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="ModuleKeyword">
      <MemberSignature Language="C#" Value="ModuleKeyword" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind ModuleKeyword = unsigned int16(503)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.ModuleKeyword" />
      <MemberSignature Language="VB.NET" Value="ModuleKeyword" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>503</MemberValue>
      <Docs>
        <summary>
 Represents a single keyword in a VB program. Which keyword can be determined
 from the Kind property.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="ModuleStatement">
      <MemberSignature Language="C#" Value="ModuleStatement" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind ModuleStatement = unsigned int16(59)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.ModuleStatement" />
      <MemberSignature Language="VB.NET" Value="ModuleStatement" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>59</MemberValue>
      <Docs>
        <summary>
 Represents the beginning statement of a Module declaration. This node always
 appears as the Begin of a TypeBlock with Kind=ModuleDeclarationBlock.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="ModuloExpression">
      <MemberSignature Language="C#" Value="ModuloExpression" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind ModuloExpression = unsigned int16(318)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.ModuloExpression" />
      <MemberSignature Language="VB.NET" Value="ModuloExpression" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>318</MemberValue>
      <Docs>
        <summary>
 Represents a binary operator. The Kind property classifies the operators into
 similar kind of operators (arithmetic, relational, logical or string); the
 exact operation being performed is determined by the Operator property.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="MultiLineFunctionLambdaExpression">
      <MemberSignature Language="C#" Value="MultiLineFunctionLambdaExpression" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind MultiLineFunctionLambdaExpression = unsigned int16(343)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.MultiLineFunctionLambdaExpression" />
      <MemberSignature Language="VB.NET" Value="MultiLineFunctionLambdaExpression" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>343</MemberValue>
      <Docs>
        <summary>
 Represents a multi-line lambda expression.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="MultiLineIfBlock">
      <MemberSignature Language="C#" Value="MultiLineIfBlock" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind MultiLineIfBlock = unsigned int16(173)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.MultiLineIfBlock" />
      <MemberSignature Language="VB.NET" Value="MultiLineIfBlock" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>173</MemberValue>
      <Docs>
        <summary>
 Represents a block If...Then...Else...EndIf Statement. The Kind property can be
 used to determine if it is a block or line If.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="MultiLineSubLambdaExpression">
      <MemberSignature Language="C#" Value="MultiLineSubLambdaExpression" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind MultiLineSubLambdaExpression = unsigned int16(344)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.MultiLineSubLambdaExpression" />
      <MemberSignature Language="VB.NET" Value="MultiLineSubLambdaExpression" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>344</MemberValue>
      <Docs>
        <summary>
 Represents a multi-line lambda expression.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="MultiplyAssignmentStatement">
      <MemberSignature Language="C#" Value="MultiplyAssignmentStatement" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind MultiplyAssignmentStatement = unsigned int16(251)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.MultiplyAssignmentStatement" />
      <MemberSignature Language="VB.NET" Value="MultiplyAssignmentStatement" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>251</MemberValue>
      <Docs>
        <summary>
 Represents a simple, compound, or Mid assignment statement. Which one can be
 determined by checking the Kind.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="MultiplyExpression">
      <MemberSignature Language="C#" Value="MultiplyExpression" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind MultiplyExpression = unsigned int16(309)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.MultiplyExpression" />
      <MemberSignature Language="VB.NET" Value="MultiplyExpression" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>309</MemberValue>
      <Docs>
        <summary>
 Represents a binary operator. The Kind property classifies the operators into
 similar kind of operators (arithmetic, relational, logical or string); the
 exact operation being performed is determined by the Operator property.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="MustInheritKeyword">
      <MemberSignature Language="C#" Value="MustInheritKeyword" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind MustInheritKeyword = unsigned int16(504)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.MustInheritKeyword" />
      <MemberSignature Language="VB.NET" Value="MustInheritKeyword" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>504</MemberValue>
      <Docs>
        <summary>
 Represents a single keyword in a VB program. Which keyword can be determined
 from the Kind property.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="MustOverrideKeyword">
      <MemberSignature Language="C#" Value="MustOverrideKeyword" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind MustOverrideKeyword = unsigned int16(505)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.MustOverrideKeyword" />
      <MemberSignature Language="VB.NET" Value="MustOverrideKeyword" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>505</MemberValue>
      <Docs>
        <summary>
 Represents a single keyword in a VB program. Which keyword can be determined
 from the Kind property.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="MyBaseExpression">
      <MemberSignature Language="C#" Value="MyBaseExpression" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind MyBaseExpression = unsigned int16(283)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.MyBaseExpression" />
      <MemberSignature Language="VB.NET" Value="MyBaseExpression" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>283</MemberValue>
      <Docs>
        <summary>
 Identifies the special instance "MyBase"
 </summary>
      </Docs>
    </Member>
    <Member MemberName="MyBaseKeyword">
      <MemberSignature Language="C#" Value="MyBaseKeyword" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind MyBaseKeyword = unsigned int16(506)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.MyBaseKeyword" />
      <MemberSignature Language="VB.NET" Value="MyBaseKeyword" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>506</MemberValue>
      <Docs>
        <summary>
 Represents a single keyword in a VB program. Which keyword can be determined
 from the Kind property.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="MyClassExpression">
      <MemberSignature Language="C#" Value="MyClassExpression" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind MyClassExpression = unsigned int16(284)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.MyClassExpression" />
      <MemberSignature Language="VB.NET" Value="MyClassExpression" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>284</MemberValue>
      <Docs>
        <summary>
 Identifies the special instance "MyClass"
 </summary>
      </Docs>
    </Member>
    <Member MemberName="MyClassKeyword">
      <MemberSignature Language="C#" Value="MyClassKeyword" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind MyClassKeyword = unsigned int16(507)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.MyClassKeyword" />
      <MemberSignature Language="VB.NET" Value="MyClassKeyword" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>507</MemberValue>
      <Docs>
        <summary>
 Represents a single keyword in a VB program. Which keyword can be determined
 from the Kind property.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="NameColonEquals">
      <MemberSignature Language="C#" Value="NameColonEquals" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind NameColonEquals = unsigned int16(755)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.NameColonEquals" />
      <MemberSignature Language="VB.NET" Value="NameColonEquals" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>755</MemberValue>
      <Docs>
        <summary>
 Represents an identifier name followed by a ":=" token in a named argument.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="NamedFieldInitializer">
      <MemberSignature Language="C#" Value="NamedFieldInitializer" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind NamedFieldInitializer = unsigned int16(128)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.NamedFieldInitializer" />
      <MemberSignature Language="VB.NET" Value="NamedFieldInitializer" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>128</MemberValue>
      <Docs>
        <summary>
 Represent a named field initializer in a With {...} initializer, such as ".x =
 expr".
 </summary>
      </Docs>
    </Member>
    <Member MemberName="NamedTupleElement">
      <MemberSignature Language="C#" Value="NamedTupleElement" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind NamedTupleElement = unsigned int16(791)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.NamedTupleElement" />
      <MemberSignature Language="VB.NET" Value="NamedTupleElement" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>791</MemberValue>
      <Docs>
        <summary>
 Represents an element of a tuple type supplying element name and optionally a type.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="NameOfExpression">
      <MemberSignature Language="C#" Value="NameOfExpression" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind NameOfExpression = unsigned int16(779)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.NameOfExpression" />
      <MemberSignature Language="VB.NET" Value="NameOfExpression" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>779</MemberValue>
      <Docs>
        <summary>
 Represents a NameOf expression.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="NameOfKeyword">
      <MemberSignature Language="C#" Value="NameOfKeyword" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind NameOfKeyword = unsigned int16(778)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.NameOfKeyword" />
      <MemberSignature Language="VB.NET" Value="NameOfKeyword" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>778</MemberValue>
      <Docs>
        <summary>
 Represents a single keyword in a VB program. Which keyword can be determined
 from the Kind property.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="NamespaceBlock">
      <MemberSignature Language="C#" Value="NamespaceBlock" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind NamespaceBlock = unsigned int16(48)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.NamespaceBlock" />
      <MemberSignature Language="VB.NET" Value="NamespaceBlock" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>48</MemberValue>
      <Docs>
        <summary>
 Represents a Namespace statement, its contents and the End Namespace statement.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="NamespaceKeyword">
      <MemberSignature Language="C#" Value="NamespaceKeyword" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind NamespaceKeyword = unsigned int16(508)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.NamespaceKeyword" />
      <MemberSignature Language="VB.NET" Value="NamespaceKeyword" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>508</MemberValue>
      <Docs>
        <summary>
 Represents a single keyword in a VB program. Which keyword can be determined
 from the Kind property.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="NamespaceStatement">
      <MemberSignature Language="C#" Value="NamespaceStatement" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind NamespaceStatement = unsigned int16(49)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.NamespaceStatement" />
      <MemberSignature Language="VB.NET" Value="NamespaceStatement" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>49</MemberValue>
      <Docs>
        <summary>
 Represents the beginning statement of a namespace declaration. This node always
 appears as the Begin of a BlockStatement with Kind=NamespaceBlock.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="NarrowingKeyword">
      <MemberSignature Language="C#" Value="NarrowingKeyword" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind NarrowingKeyword = unsigned int16(509)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.NarrowingKeyword" />
      <MemberSignature Language="VB.NET" Value="NarrowingKeyword" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>509</MemberValue>
      <Docs>
        <summary>
 Represents a single keyword in a VB program. Which keyword can be determined
 from the Kind property.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="NewConstraint">
      <MemberSignature Language="C#" Value="NewConstraint" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind NewConstraint = unsigned int16(72)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.NewConstraint" />
      <MemberSignature Language="VB.NET" Value="NewConstraint" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>72</MemberValue>
      <Docs>
        <summary>
 One of the special type parameter constraints: New, Class or Structure. Which
 kind of special constraint it is can be obtained from the Kind property and is
 one of: NewConstraint, ReferenceConstraint or ValueConstraint.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="NewKeyword">
      <MemberSignature Language="C#" Value="NewKeyword" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind NewKeyword = unsigned int16(511)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.NewKeyword" />
      <MemberSignature Language="VB.NET" Value="NewKeyword" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>511</MemberValue>
      <Docs>
        <summary>
 Represents a single keyword in a VB program. Which keyword can be determined
 from the Kind property.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="NextKeyword">
      <MemberSignature Language="C#" Value="NextKeyword" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind NextKeyword = unsigned int16(510)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.NextKeyword" />
      <MemberSignature Language="VB.NET" Value="NextKeyword" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>510</MemberValue>
      <Docs>
        <summary>
 Represents a single keyword in a VB program. Which keyword can be determined
 from the Kind property.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="NextLabel">
      <MemberSignature Language="C#" Value="NextLabel" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind NextLabel = unsigned int16(152)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.NextLabel" />
      <MemberSignature Language="VB.NET" Value="NextLabel" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>152</MemberValue>
      <Docs>
        <summary>
 A label for a GoTo, Resume, or On Error statement. An identifier, line number,
 or next keyword.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="NextStatement">
      <MemberSignature Language="C#" Value="NextStatement" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind NextStatement = unsigned int16(242)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.NextStatement" />
      <MemberSignature Language="VB.NET" Value="NextStatement" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>242</MemberValue>
      <Docs>
        <summary>
 The Next statement that ends a For-Next or For Each-Next block. This statement
 always occurs as the End of a ForBlock (with Kind=ForBlock or ForEachBlock),
 and the body of the For-Next is the Body of that ForBlock. The Begin of that
 ForBlock has the corresponding For or For Each statement.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="None">
      <MemberSignature Language="C#" Value="None" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind None = unsigned int16(0)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.None" />
      <MemberSignature Language="VB.NET" Value="None" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>0</MemberValue>
      <Docs>
        <summary>To be added.</summary>
      </Docs>
    </Member>
    <Member MemberName="NotEqualsExpression">
      <MemberSignature Language="C#" Value="NotEqualsExpression" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind NotEqualsExpression = unsigned int16(320)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.NotEqualsExpression" />
      <MemberSignature Language="VB.NET" Value="NotEqualsExpression" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>320</MemberValue>
      <Docs>
        <summary>
 Represents a binary operator. The Kind property classifies the operators into
 similar kind of operators (arithmetic, relational, logical or string); the
 exact operation being performed is determined by the Operator property.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="NotExpression">
      <MemberSignature Language="C#" Value="NotExpression" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind NotExpression = unsigned int16(335)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.NotExpression" />
      <MemberSignature Language="VB.NET" Value="NotExpression" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>335</MemberValue>
      <Docs>
        <summary>
 Describes a unary operator: Plus, Negate, Not or AddressOf.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="NothingKeyword">
      <MemberSignature Language="C#" Value="NothingKeyword" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind NothingKeyword = unsigned int16(513)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.NothingKeyword" />
      <MemberSignature Language="VB.NET" Value="NothingKeyword" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>513</MemberValue>
      <Docs>
        <summary>
 Represents a single keyword in a VB program. Which keyword can be determined
 from the Kind property.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="NothingLiteralExpression">
      <MemberSignature Language="C#" Value="NothingLiteralExpression" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind NothingLiteralExpression = unsigned int16(280)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.NothingLiteralExpression" />
      <MemberSignature Language="VB.NET" Value="NothingLiteralExpression" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>280</MemberValue>
      <Docs>
        <summary>
 Represents a literal. The kind of literal is determined by the Kind property:
 IntegerLiteral, CharacterLiteral, BooleanLiteral, DecimalLiteral,
 FloatingLiteral, DateLiteral or StringLiteral. The value of the literal can be
 determined by casting the associated Token to the correct type and getting the
 value from the token.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="NotInheritableKeyword">
      <MemberSignature Language="C#" Value="NotInheritableKeyword" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind NotInheritableKeyword = unsigned int16(516)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.NotInheritableKeyword" />
      <MemberSignature Language="VB.NET" Value="NotInheritableKeyword" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>516</MemberValue>
      <Docs>
        <summary>
 Represents a single keyword in a VB program. Which keyword can be determined
 from the Kind property.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="NotKeyword">
      <MemberSignature Language="C#" Value="NotKeyword" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind NotKeyword = unsigned int16(512)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.NotKeyword" />
      <MemberSignature Language="VB.NET" Value="NotKeyword" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>512</MemberValue>
      <Docs>
        <summary>
 Represents a single keyword in a VB program. Which keyword can be determined
 from the Kind property.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="NotOverridableKeyword">
      <MemberSignature Language="C#" Value="NotOverridableKeyword" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind NotOverridableKeyword = unsigned int16(517)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.NotOverridableKeyword" />
      <MemberSignature Language="VB.NET" Value="NotOverridableKeyword" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>517</MemberValue>
      <Docs>
        <summary>
 Represents a single keyword in a VB program. Which keyword can be determined
 from the Kind property.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="NullableType">
      <MemberSignature Language="C#" Value="NullableType" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind NullableType = unsigned int16(397)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.NullableType" />
      <MemberSignature Language="VB.NET" Value="NullableType" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>397</MemberValue>
      <Docs>
        <summary>
 A type name that represents a nullable type, such as "Integer?".
 </summary>
      </Docs>
    </Member>
    <Member MemberName="NumericLabel">
      <MemberSignature Language="C#" Value="NumericLabel" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind NumericLabel = unsigned int16(151)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.NumericLabel" />
      <MemberSignature Language="VB.NET" Value="NumericLabel" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>151</MemberValue>
      <Docs>
        <summary>
 A label for a GoTo, Resume, or On Error statement. An identifier, line number,
 or next keyword.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="NumericLiteralExpression">
      <MemberSignature Language="C#" Value="NumericLiteralExpression" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind NumericLiteralExpression = unsigned int16(275)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.NumericLiteralExpression" />
      <MemberSignature Language="VB.NET" Value="NumericLiteralExpression" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>275</MemberValue>
      <Docs>
        <summary>
 Represents a literal. The kind of literal is determined by the Kind property:
 IntegerLiteral, CharacterLiteral, BooleanLiteral, DecimalLiteral,
 FloatingLiteral, DateLiteral or StringLiteral. The value of the literal can be
 determined by casting the associated Token to the correct type and getting the
 value from the token.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="ObjectCollectionInitializer">
      <MemberSignature Language="C#" Value="ObjectCollectionInitializer" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind ObjectCollectionInitializer = unsigned int16(126)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.ObjectCollectionInitializer" />
      <MemberSignature Language="VB.NET" Value="ObjectCollectionInitializer" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>126</MemberValue>
      <Docs>
        <summary>
 Represents a "From {...} clause used to initialize a new collection object's
 elements.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="ObjectCreationExpression">
      <MemberSignature Language="C#" Value="ObjectCreationExpression" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind ObjectCreationExpression = unsigned int16(297)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.ObjectCreationExpression" />
      <MemberSignature Language="VB.NET" Value="ObjectCreationExpression" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>297</MemberValue>
      <Docs>
        <summary>
 Represents a New expression that creates a new non-array object, possibly with
 a "With" or "From" clause.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="ObjectKeyword">
      <MemberSignature Language="C#" Value="ObjectKeyword" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind ObjectKeyword = unsigned int16(518)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.ObjectKeyword" />
      <MemberSignature Language="VB.NET" Value="ObjectKeyword" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>518</MemberValue>
      <Docs>
        <summary>
 Represents a single keyword in a VB program. Which keyword can be determined
 from the Kind property.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="ObjectMemberInitializer">
      <MemberSignature Language="C#" Value="ObjectMemberInitializer" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind ObjectMemberInitializer = unsigned int16(125)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.ObjectMemberInitializer" />
      <MemberSignature Language="VB.NET" Value="ObjectMemberInitializer" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>125</MemberValue>
      <Docs>
        <summary>
 Represents a "With {...} clause used to initialize a new object's members.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="OffKeyword">
      <MemberSignature Language="C#" Value="OffKeyword" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind OffKeyword = unsigned int16(613)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.OffKeyword" />
      <MemberSignature Language="VB.NET" Value="OffKeyword" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>613</MemberValue>
      <Docs>
        <summary>
 Represents a single keyword in a VB program. Which keyword can be determined
 from the Kind property.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="OfKeyword">
      <MemberSignature Language="C#" Value="OfKeyword" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind OfKeyword = unsigned int16(519)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.OfKeyword" />
      <MemberSignature Language="VB.NET" Value="OfKeyword" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>519</MemberValue>
      <Docs>
        <summary>
 Represents a single keyword in a VB program. Which keyword can be determined
 from the Kind property.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="OmittedArgument">
      <MemberSignature Language="C#" Value="OmittedArgument" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind OmittedArgument = unsigned int16(348)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.OmittedArgument" />
      <MemberSignature Language="VB.NET" Value="OmittedArgument" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>348</MemberValue>
      <Docs>
        <summary>
 Represents an omitted argument in an argument list. An omitted argument is not
 considered a syntax error but a valid case when no argument is required.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="OnErrorGoToLabelStatement">
      <MemberSignature Language="C#" Value="OnErrorGoToLabelStatement" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind OnErrorGoToLabelStatement = unsigned int16(198)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.OnErrorGoToLabelStatement" />
      <MemberSignature Language="VB.NET" Value="OnErrorGoToLabelStatement" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>198</MemberValue>
      <Docs>
        <summary>
 Represents an OnError Goto statement.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="OnErrorGoToMinusOneStatement">
      <MemberSignature Language="C#" Value="OnErrorGoToMinusOneStatement" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind OnErrorGoToMinusOneStatement = unsigned int16(197)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.OnErrorGoToMinusOneStatement" />
      <MemberSignature Language="VB.NET" Value="OnErrorGoToMinusOneStatement" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>197</MemberValue>
      <Docs>
        <summary>
 Represents an OnError Goto statement.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="OnErrorGoToZeroStatement">
      <MemberSignature Language="C#" Value="OnErrorGoToZeroStatement" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind OnErrorGoToZeroStatement = unsigned int16(196)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.OnErrorGoToZeroStatement" />
      <MemberSignature Language="VB.NET" Value="OnErrorGoToZeroStatement" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>196</MemberValue>
      <Docs>
        <summary>
 Represents an OnError Goto statement.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="OnErrorResumeNextStatement">
      <MemberSignature Language="C#" Value="OnErrorResumeNextStatement" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind OnErrorResumeNextStatement = unsigned int16(199)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.OnErrorResumeNextStatement" />
      <MemberSignature Language="VB.NET" Value="OnErrorResumeNextStatement" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>199</MemberValue>
      <Docs>
        <summary>
 Represents an OnError Resume Next statement.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="OnKeyword">
      <MemberSignature Language="C#" Value="OnKeyword" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind OnKeyword = unsigned int16(520)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.OnKeyword" />
      <MemberSignature Language="VB.NET" Value="OnKeyword" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>520</MemberValue>
      <Docs>
        <summary>
 Represents a single keyword in a VB program. Which keyword can be determined
 from the Kind property.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="OpenBraceToken">
      <MemberSignature Language="C#" Value="OpenBraceToken" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind OpenBraceToken = unsigned int16(644)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.OpenBraceToken" />
      <MemberSignature Language="VB.NET" Value="OpenBraceToken" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>644</MemberValue>
      <Docs>
        <summary>
 Represents a single punctuation mark or operator in a VB program. Which one can
 be determined from the Kind property.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="OpenParenToken">
      <MemberSignature Language="C#" Value="OpenParenToken" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind OpenParenToken = unsigned int16(642)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.OpenParenToken" />
      <MemberSignature Language="VB.NET" Value="OpenParenToken" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>642</MemberValue>
      <Docs>
        <summary>
 Represents a single punctuation mark or operator in a VB program. Which one can
 be determined from the Kind property.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="OperatorBlock">
      <MemberSignature Language="C#" Value="OperatorBlock" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind OperatorBlock = unsigned int16(82)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.OperatorBlock" />
      <MemberSignature Language="VB.NET" Value="OperatorBlock" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>82</MemberValue>
      <Docs>
        <summary>
 Represents an Operator block member declaration: A declaration that has a
 beginning declaration, a body of executable statements and an end statement.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="OperatorKeyword">
      <MemberSignature Language="C#" Value="OperatorKeyword" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind OperatorKeyword = unsigned int16(521)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.OperatorKeyword" />
      <MemberSignature Language="VB.NET" Value="OperatorKeyword" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>521</MemberValue>
      <Docs>
        <summary>
 Represents a single keyword in a VB program. Which keyword can be determined
 from the Kind property.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="OperatorStatement">
      <MemberSignature Language="C#" Value="OperatorStatement" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind OperatorStatement = unsigned int16(103)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.OperatorStatement" />
      <MemberSignature Language="VB.NET" Value="OperatorStatement" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>103</MemberValue>
      <Docs>
        <summary>
 A statement that declares an operator. If this operator has a body, this
 statement will be the Begin of a BlockStatement with
 Kind=MethodDeclarationBlock, and the body of the method will be the Body of
 that BlockStatement.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="OptionalKeyword">
      <MemberSignature Language="C#" Value="OptionalKeyword" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind OptionalKeyword = unsigned int16(523)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.OptionalKeyword" />
      <MemberSignature Language="VB.NET" Value="OptionalKeyword" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>523</MemberValue>
      <Docs>
        <summary>
 Represents a single keyword in a VB program. Which keyword can be determined
 from the Kind property.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="OptionKeyword">
      <MemberSignature Language="C#" Value="OptionKeyword" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind OptionKeyword = unsigned int16(522)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.OptionKeyword" />
      <MemberSignature Language="VB.NET" Value="OptionKeyword" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>522</MemberValue>
      <Docs>
        <summary>
 Represents a single keyword in a VB program. Which keyword can be determined
 from the Kind property.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="OptionStatement">
      <MemberSignature Language="C#" Value="OptionStatement" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind OptionStatement = unsigned int16(41)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.OptionStatement" />
      <MemberSignature Language="VB.NET" Value="OptionStatement" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>41</MemberValue>
      <Docs>
        <summary>
 Represents an Option statement, such as "Option Strict On".
 </summary>
      </Docs>
    </Member>
    <Member MemberName="OrderByClause">
      <MemberSignature Language="C#" Value="OrderByClause" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind OrderByClause = unsigned int16(372)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.OrderByClause" />
      <MemberSignature Language="VB.NET" Value="OrderByClause" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>372</MemberValue>
      <Docs>
        <summary>
 Represents the "Order By" query operator.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="OrderKeyword">
      <MemberSignature Language="C#" Value="OrderKeyword" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind OrderKeyword = unsigned int16(614)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.OrderKeyword" />
      <MemberSignature Language="VB.NET" Value="OrderKeyword" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>614</MemberValue>
      <Docs>
        <summary>
 Represents a single keyword in a VB program. Which keyword can be determined
 from the Kind property.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="OrElseExpression">
      <MemberSignature Language="C#" Value="OrElseExpression" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind OrElseExpression = unsigned int16(331)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.OrElseExpression" />
      <MemberSignature Language="VB.NET" Value="OrElseExpression" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>331</MemberValue>
      <Docs>
        <summary>
 Represents a binary operator. The Kind property classifies the operators into
 similar kind of operators (arithmetic, relational, logical or string); the
 exact operation being performed is determined by the Operator property.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="OrElseKeyword">
      <MemberSignature Language="C#" Value="OrElseKeyword" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind OrElseKeyword = unsigned int16(525)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.OrElseKeyword" />
      <MemberSignature Language="VB.NET" Value="OrElseKeyword" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>525</MemberValue>
      <Docs>
        <summary>
 Represents a single keyword in a VB program. Which keyword can be determined
 from the Kind property.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="OrExpression">
      <MemberSignature Language="C#" Value="OrExpression" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind OrExpression = unsigned int16(328)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.OrExpression" />
      <MemberSignature Language="VB.NET" Value="OrExpression" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>328</MemberValue>
      <Docs>
        <summary>
 Represents a binary operator. The Kind property classifies the operators into
 similar kind of operators (arithmetic, relational, logical or string); the
 exact operation being performed is determined by the Operator property.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="OrKeyword">
      <MemberSignature Language="C#" Value="OrKeyword" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind OrKeyword = unsigned int16(524)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.OrKeyword" />
      <MemberSignature Language="VB.NET" Value="OrKeyword" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>524</MemberValue>
      <Docs>
        <summary>
 Represents a single keyword in a VB program. Which keyword can be determined
 from the Kind property.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="OutKeyword">
      <MemberSignature Language="C#" Value="OutKeyword" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind OutKeyword = unsigned int16(615)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.OutKeyword" />
      <MemberSignature Language="VB.NET" Value="OutKeyword" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>615</MemberValue>
      <Docs>
        <summary>
 Represents a single keyword in a VB program. Which keyword can be determined
 from the Kind property.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="OverloadsKeyword">
      <MemberSignature Language="C#" Value="OverloadsKeyword" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind OverloadsKeyword = unsigned int16(526)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.OverloadsKeyword" />
      <MemberSignature Language="VB.NET" Value="OverloadsKeyword" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>526</MemberValue>
      <Docs>
        <summary>
 Represents a single keyword in a VB program. Which keyword can be determined
 from the Kind property.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="OverridableKeyword">
      <MemberSignature Language="C#" Value="OverridableKeyword" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind OverridableKeyword = unsigned int16(527)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.OverridableKeyword" />
      <MemberSignature Language="VB.NET" Value="OverridableKeyword" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>527</MemberValue>
      <Docs>
        <summary>
 Represents a single keyword in a VB program. Which keyword can be determined
 from the Kind property.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="OverridesKeyword">
      <MemberSignature Language="C#" Value="OverridesKeyword" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind OverridesKeyword = unsigned int16(528)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.OverridesKeyword" />
      <MemberSignature Language="VB.NET" Value="OverridesKeyword" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>528</MemberValue>
      <Docs>
        <summary>
 Represents a single keyword in a VB program. Which keyword can be determined
 from the Kind property.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="ParamArrayKeyword">
      <MemberSignature Language="C#" Value="ParamArrayKeyword" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind ParamArrayKeyword = unsigned int16(529)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.ParamArrayKeyword" />
      <MemberSignature Language="VB.NET" Value="ParamArrayKeyword" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>529</MemberValue>
      <Docs>
        <summary>
 Represents a single keyword in a VB program. Which keyword can be determined
 from the Kind property.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="Parameter">
      <MemberSignature Language="C#" Value="Parameter" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind Parameter = unsigned int16(132)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.Parameter" />
      <MemberSignature Language="VB.NET" Value="Parameter" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>132</MemberValue>
      <Docs>
        <summary>
 Represent a parameter to a method, property, constructor, etc.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="ParameterList">
      <MemberSignature Language="C#" Value="ParameterList" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind ParameterList = unsigned int16(92)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.ParameterList" />
      <MemberSignature Language="VB.NET" Value="ParameterList" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>92</MemberValue>
      <Docs>
        <summary>
 Represents the parameter list in a method declaration.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="ParenthesizedExpression">
      <MemberSignature Language="C#" Value="ParenthesizedExpression" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind ParenthesizedExpression = unsigned int16(281)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.ParenthesizedExpression" />
      <MemberSignature Language="VB.NET" Value="ParenthesizedExpression" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>281</MemberValue>
      <Docs>
        <summary>
 Represents a parenthesized expression.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="PartialKeyword">
      <MemberSignature Language="C#" Value="PartialKeyword" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind PartialKeyword = unsigned int16(530)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.PartialKeyword" />
      <MemberSignature Language="VB.NET" Value="PartialKeyword" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>530</MemberValue>
      <Docs>
        <summary>
 Represents a single keyword in a VB program. Which keyword can be determined
 from the Kind property.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="PercentGreaterThanToken">
      <MemberSignature Language="C#" Value="PercentGreaterThanToken" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind PercentGreaterThanToken = unsigned int16(689)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.PercentGreaterThanToken" />
      <MemberSignature Language="VB.NET" Value="PercentGreaterThanToken" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>689</MemberValue>
      <Docs>
        <summary>
 Represents a single punctuation mark or operator in a VB program. Which one can
 be determined from the Kind property.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="PlusEqualsToken">
      <MemberSignature Language="C#" Value="PlusEqualsToken" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind PlusEqualsToken = unsigned int16(666)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.PlusEqualsToken" />
      <MemberSignature Language="VB.NET" Value="PlusEqualsToken" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>666</MemberValue>
      <Docs>
        <summary>
 Represents a single punctuation mark or operator in a VB program. Which one can
 be determined from the Kind property.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="PlusToken">
      <MemberSignature Language="C#" Value="PlusToken" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind PlusToken = unsigned int16(648)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.PlusToken" />
      <MemberSignature Language="VB.NET" Value="PlusToken" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>648</MemberValue>
      <Docs>
        <summary>
 Represents a single punctuation mark or operator in a VB program. Which one can
 be determined from the Kind property.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="PredefinedCastExpression">
      <MemberSignature Language="C#" Value="PredefinedCastExpression" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind PredefinedCastExpression = unsigned int16(306)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.PredefinedCastExpression" />
      <MemberSignature Language="VB.NET" Value="PredefinedCastExpression" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>306</MemberValue>
      <Docs>
        <summary>
 Represents a cast to a pre-defined type using a pre-defined cast expression,
 such as CInt or CLng.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="PredefinedType">
      <MemberSignature Language="C#" Value="PredefinedType" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind PredefinedType = unsigned int16(398)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.PredefinedType" />
      <MemberSignature Language="VB.NET" Value="PredefinedType" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>398</MemberValue>
      <Docs>
        <summary>
 Represents an occurrence of a Visual Basic built-in type such as Integer or
 String in source code.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="PreserveKeyword">
      <MemberSignature Language="C#" Value="PreserveKeyword" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind PreserveKeyword = unsigned int16(616)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.PreserveKeyword" />
      <MemberSignature Language="VB.NET" Value="PreserveKeyword" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>616</MemberValue>
      <Docs>
        <summary>
 Represents a single keyword in a VB program. Which keyword can be determined
 from the Kind property.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="PrintStatement">
      <MemberSignature Language="C#" Value="PrintStatement" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind PrintStatement = unsigned int16(140)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.PrintStatement" />
      <MemberSignature Language="VB.NET" Value="PrintStatement" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>140</MemberValue>
      <Docs>
        <summary>
 Represent a "? expression" "Print" statement in VB Interactive code.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="PrivateKeyword">
      <MemberSignature Language="C#" Value="PrivateKeyword" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind PrivateKeyword = unsigned int16(531)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.PrivateKeyword" />
      <MemberSignature Language="VB.NET" Value="PrivateKeyword" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>531</MemberValue>
      <Docs>
        <summary>
 Represents a single keyword in a VB program. Which keyword can be determined
 from the Kind property.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="PropertyBlock">
      <MemberSignature Language="C#" Value="PropertyBlock" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind PropertyBlock = unsigned int16(88)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.PropertyBlock" />
      <MemberSignature Language="VB.NET" Value="PropertyBlock" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>88</MemberValue>
      <Docs>
        <summary>
 Represents a block property declaration: A declaration that has a beginning
 declaration, some get or set accessor blocks and an end statement.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="PropertyKeyword">
      <MemberSignature Language="C#" Value="PropertyKeyword" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind PropertyKeyword = unsigned int16(532)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.PropertyKeyword" />
      <MemberSignature Language="VB.NET" Value="PropertyKeyword" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>532</MemberValue>
      <Docs>
        <summary>
 Represents a single keyword in a VB program. Which keyword can be determined
 from the Kind property.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="PropertyStatement">
      <MemberSignature Language="C#" Value="PropertyStatement" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind PropertyStatement = unsigned int16(104)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.PropertyStatement" />
      <MemberSignature Language="VB.NET" Value="PropertyStatement" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>104</MemberValue>
      <Docs>
        <summary>
 Statement that declares a property. If this property has accessors declared,
 this statement will be the Begin of a BlockNode, and the accessors will be the
 Body of that node. Auto properties are property declarations without a
 PropertyBlock.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="ProtectedKeyword">
      <MemberSignature Language="C#" Value="ProtectedKeyword" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind ProtectedKeyword = unsigned int16(533)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.ProtectedKeyword" />
      <MemberSignature Language="VB.NET" Value="ProtectedKeyword" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>533</MemberValue>
      <Docs>
        <summary>
 Represents a single keyword in a VB program. Which keyword can be determined
 from the Kind property.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="PublicKeyword">
      <MemberSignature Language="C#" Value="PublicKeyword" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind PublicKeyword = unsigned int16(534)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.PublicKeyword" />
      <MemberSignature Language="VB.NET" Value="PublicKeyword" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>534</MemberValue>
      <Docs>
        <summary>
 Represents a single keyword in a VB program. Which keyword can be determined
 from the Kind property.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="QualifiedCrefOperatorReference">
      <MemberSignature Language="C#" Value="QualifiedCrefOperatorReference" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind QualifiedCrefOperatorReference = unsigned int16(410)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.QualifiedCrefOperatorReference" />
      <MemberSignature Language="VB.NET" Value="QualifiedCrefOperatorReference" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>410</MemberValue>
      <Docs>
        <summary>To be added.</summary>
      </Docs>
    </Member>
    <Member MemberName="QualifiedName">
      <MemberSignature Language="C#" Value="QualifiedName" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind QualifiedName = unsigned int16(401)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.QualifiedName" />
      <MemberSignature Language="VB.NET" Value="QualifiedName" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>401</MemberValue>
      <Docs>
        <summary>
 Represents a qualified type name, for example X.Y or X(Of Z).Y.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="QueryExpression">
      <MemberSignature Language="C#" Value="QueryExpression" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind QueryExpression = unsigned int16(352)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.QueryExpression" />
      <MemberSignature Language="VB.NET" Value="QueryExpression" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>352</MemberValue>
      <Docs>
        <summary>
 This class represents a query expression. A query expression is composed of one
 or more query operators in a row. The first query operator must be a From or
 Aggregate.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="QuestionGreaterThanToken">
      <MemberSignature Language="C#" Value="QuestionGreaterThanToken" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind QuestionGreaterThanToken = unsigned int16(687)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.QuestionGreaterThanToken" />
      <MemberSignature Language="VB.NET" Value="QuestionGreaterThanToken" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>687</MemberValue>
      <Docs>
        <summary>
 Represents a single punctuation mark or operator in a VB program. Which one can
 be determined from the Kind property.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="QuestionToken">
      <MemberSignature Language="C#" Value="QuestionToken" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind QuestionToken = unsigned int16(675)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.QuestionToken" />
      <MemberSignature Language="VB.NET" Value="QuestionToken" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>675</MemberValue>
      <Docs>
        <summary>
 Represents a single punctuation mark or operator in a VB program. Which one can
 be determined from the Kind property.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="RaiseEventAccessorBlock">
      <MemberSignature Language="C#" Value="RaiseEventAccessorBlock" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind RaiseEventAccessorBlock = unsigned int16(87)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.RaiseEventAccessorBlock" />
      <MemberSignature Language="VB.NET" Value="RaiseEventAccessorBlock" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>87</MemberValue>
      <Docs>
        <summary>
 Represents an accessor block member declaration: A declaration that has a
 beginning declaration, a body of executable statements and an end statement.
 Examples include property accessors and custom event accessors.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="RaiseEventAccessorStatement">
      <MemberSignature Language="C#" Value="RaiseEventAccessorStatement" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind RaiseEventAccessorStatement = unsigned int16(111)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.RaiseEventAccessorStatement" />
      <MemberSignature Language="VB.NET" Value="RaiseEventAccessorStatement" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>111</MemberValue>
      <Docs>
        <summary>
 Represents a Get or Set accessor on a property declaration or an AddHandler,
 RemoveHandler or RaiseEvent accessor on a custom event declaration. The Kind of
 the node determines what kind of accessor this is. This statement is always the
 Begin of a BlockNode, and the body of the accessor is the Body of that node.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="RaiseEventKeyword">
      <MemberSignature Language="C#" Value="RaiseEventKeyword" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind RaiseEventKeyword = unsigned int16(537)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.RaiseEventKeyword" />
      <MemberSignature Language="VB.NET" Value="RaiseEventKeyword" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>537</MemberValue>
      <Docs>
        <summary>
 Represents a single keyword in a VB program. Which keyword can be determined
 from the Kind property.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="RaiseEventStatement">
      <MemberSignature Language="C#" Value="RaiseEventStatement" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind RaiseEventStatement = unsigned int16(264)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.RaiseEventStatement" />
      <MemberSignature Language="VB.NET" Value="RaiseEventStatement" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>264</MemberValue>
      <Docs>
        <summary>
 Represent a RaiseEvent statement.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="RangeArgument">
      <MemberSignature Language="C#" Value="RangeArgument" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind RangeArgument = unsigned int16(351)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.RangeArgument" />
      <MemberSignature Language="VB.NET" Value="RangeArgument" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>351</MemberValue>
      <Docs>
        <summary>
 Represents a range argument, such as "0 to 5", used in array bounds. The
 "Value" property represents the upper bound of the range.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="RangeCaseClause">
      <MemberSignature Language="C#" Value="RangeCaseClause" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind RangeCaseClause = unsigned int16(215)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.RangeCaseClause" />
      <MemberSignature Language="VB.NET" Value="RangeCaseClause" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>215</MemberValue>
      <Docs>
        <summary>
 Represents a range "expression To expression" in a Case.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="ReadOnlyKeyword">
      <MemberSignature Language="C#" Value="ReadOnlyKeyword" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind ReadOnlyKeyword = unsigned int16(538)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.ReadOnlyKeyword" />
      <MemberSignature Language="VB.NET" Value="ReadOnlyKeyword" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>538</MemberValue>
      <Docs>
        <summary>
 Represents a single keyword in a VB program. Which keyword can be determined
 from the Kind property.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="RedimClause">
      <MemberSignature Language="C#" Value="RedimClause" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind RedimClause = unsigned int16(270)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.RedimClause" />
      <MemberSignature Language="VB.NET" Value="RedimClause" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>270</MemberValue>
      <Docs>
        <summary>
 Represents a ReDim statement clause.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="ReDimKeyword">
      <MemberSignature Language="C#" Value="ReDimKeyword" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind ReDimKeyword = unsigned int16(539)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.ReDimKeyword" />
      <MemberSignature Language="VB.NET" Value="ReDimKeyword" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>539</MemberValue>
      <Docs>
        <summary>
 Represents a single keyword in a VB program. Which keyword can be determined
 from the Kind property.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="ReDimPreserveStatement">
      <MemberSignature Language="C#" Value="ReDimPreserveStatement" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind ReDimPreserveStatement = unsigned int16(267)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.ReDimPreserveStatement" />
      <MemberSignature Language="VB.NET" Value="ReDimPreserveStatement" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>267</MemberValue>
      <Docs>
        <summary>
 Represents a ReDim statement.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="ReDimStatement">
      <MemberSignature Language="C#" Value="ReDimStatement" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind ReDimStatement = unsigned int16(266)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.ReDimStatement" />
      <MemberSignature Language="VB.NET" Value="ReDimStatement" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>266</MemberValue>
      <Docs>
        <summary>
 Represents a ReDim statement.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="ReferenceDirectiveTrivia">
      <MemberSignature Language="C#" Value="ReferenceDirectiveTrivia" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind ReferenceDirectiveTrivia = unsigned int16(750)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.ReferenceDirectiveTrivia" />
      <MemberSignature Language="VB.NET" Value="ReferenceDirectiveTrivia" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>750</MemberValue>
      <Docs>
        <summary>
 Represents an #r directive appearing in scripts.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="ReferenceKeyword">
      <MemberSignature Language="C#" Value="ReferenceKeyword" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind ReferenceKeyword = unsigned int16(442)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.ReferenceKeyword" />
      <MemberSignature Language="VB.NET" Value="ReferenceKeyword" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>442</MemberValue>
      <Docs>
        <summary>
 Represents a single keyword in a VB program. Which keyword can be determined
 from the Kind property.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="RegionDirectiveTrivia">
      <MemberSignature Language="C#" Value="RegionDirectiveTrivia" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind RegionDirectiveTrivia = unsigned int16(741)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.RegionDirectiveTrivia" />
      <MemberSignature Language="VB.NET" Value="RegionDirectiveTrivia" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>741</MemberValue>
      <Docs>
        <summary>
 Represents the beginning of a #Region directive appearing in source.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="RegionKeyword">
      <MemberSignature Language="C#" Value="RegionKeyword" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind RegionKeyword = unsigned int16(617)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.RegionKeyword" />
      <MemberSignature Language="VB.NET" Value="RegionKeyword" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>617</MemberValue>
      <Docs>
        <summary>
 Represents a single keyword in a VB program. Which keyword can be determined
 from the Kind property.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="REMKeyword">
      <MemberSignature Language="C#" Value="REMKeyword" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind REMKeyword = unsigned int16(540)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.REMKeyword" />
      <MemberSignature Language="VB.NET" Value="REMKeyword" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>540</MemberValue>
      <Docs>
        <summary>
 Represents a single keyword in a VB program. Which keyword can be determined
 from the Kind property.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="RemoveHandlerAccessorBlock">
      <MemberSignature Language="C#" Value="RemoveHandlerAccessorBlock" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind RemoveHandlerAccessorBlock = unsigned int16(86)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.RemoveHandlerAccessorBlock" />
      <MemberSignature Language="VB.NET" Value="RemoveHandlerAccessorBlock" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>86</MemberValue>
      <Docs>
        <summary>
 Represents an accessor block member declaration: A declaration that has a
 beginning declaration, a body of executable statements and an end statement.
 Examples include property accessors and custom event accessors.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="RemoveHandlerAccessorStatement">
      <MemberSignature Language="C#" Value="RemoveHandlerAccessorStatement" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind RemoveHandlerAccessorStatement = unsigned int16(108)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.RemoveHandlerAccessorStatement" />
      <MemberSignature Language="VB.NET" Value="RemoveHandlerAccessorStatement" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>108</MemberValue>
      <Docs>
        <summary>
 Represents a Get or Set accessor on a property declaration or an AddHandler,
 RemoveHandler or RaiseEvent accessor on a custom event declaration. The Kind of
 the node determines what kind of accessor this is. This statement is always the
 Begin of a BlockNode, and the body of the accessor is the Body of that node.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="RemoveHandlerKeyword">
      <MemberSignature Language="C#" Value="RemoveHandlerKeyword" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind RemoveHandlerKeyword = unsigned int16(541)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.RemoveHandlerKeyword" />
      <MemberSignature Language="VB.NET" Value="RemoveHandlerKeyword" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>541</MemberValue>
      <Docs>
        <summary>
 Represents a single keyword in a VB program. Which keyword can be determined
 from the Kind property.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="RemoveHandlerStatement">
      <MemberSignature Language="C#" Value="RemoveHandlerStatement" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind RemoveHandlerStatement = unsigned int16(263)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.RemoveHandlerStatement" />
      <MemberSignature Language="VB.NET" Value="RemoveHandlerStatement" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>263</MemberValue>
      <Docs>
        <summary>
 Represents an AddHandler or RemoveHandler statement. The Kind property
 determines which one.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="ResumeKeyword">
      <MemberSignature Language="C#" Value="ResumeKeyword" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind ResumeKeyword = unsigned int16(542)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.ResumeKeyword" />
      <MemberSignature Language="VB.NET" Value="ResumeKeyword" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>542</MemberValue>
      <Docs>
        <summary>
 Represents a single keyword in a VB program. Which keyword can be determined
 from the Kind property.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="ResumeLabelStatement">
      <MemberSignature Language="C#" Value="ResumeLabelStatement" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind ResumeLabelStatement = unsigned int16(201)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.ResumeLabelStatement" />
      <MemberSignature Language="VB.NET" Value="ResumeLabelStatement" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>201</MemberValue>
      <Docs>
        <summary>
 Represents a "Resume" statement. The Kind property can be used to determine if
 this is a "Resume", "Resume Next" or "Resume label" statement.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="ResumeNextStatement">
      <MemberSignature Language="C#" Value="ResumeNextStatement" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind ResumeNextStatement = unsigned int16(202)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.ResumeNextStatement" />
      <MemberSignature Language="VB.NET" Value="ResumeNextStatement" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>202</MemberValue>
      <Docs>
        <summary>
 Represents a "Resume" statement. The Kind property can be used to determine if
 this is a "Resume", "Resume Next" or "Resume label" statement.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="ResumeStatement">
      <MemberSignature Language="C#" Value="ResumeStatement" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind ResumeStatement = unsigned int16(200)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.ResumeStatement" />
      <MemberSignature Language="VB.NET" Value="ResumeStatement" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>200</MemberValue>
      <Docs>
        <summary>
 Represents a "Resume" statement. The Kind property can be used to determine if
 this is a "Resume", "Resume Next" or "Resume label" statement.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="ReturnKeyword">
      <MemberSignature Language="C#" Value="ReturnKeyword" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind ReturnKeyword = unsigned int16(543)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.ReturnKeyword" />
      <MemberSignature Language="VB.NET" Value="ReturnKeyword" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>543</MemberValue>
      <Docs>
        <summary>
 Represents a single keyword in a VB program. Which keyword can be determined
 from the Kind property.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="ReturnStatement">
      <MemberSignature Language="C#" Value="ReturnStatement" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind ReturnStatement = unsigned int16(169)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.ReturnStatement" />
      <MemberSignature Language="VB.NET" Value="ReturnStatement" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>169</MemberValue>
      <Docs>
        <summary>
 Represents a "Return" statement.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="RightShiftAssignmentStatement">
      <MemberSignature Language="C#" Value="RightShiftAssignmentStatement" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind RightShiftAssignmentStatement = unsigned int16(258)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.RightShiftAssignmentStatement" />
      <MemberSignature Language="VB.NET" Value="RightShiftAssignmentStatement" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>258</MemberValue>
      <Docs>
        <summary>
 Represents a simple, compound, or Mid assignment statement. Which one can be
 determined by checking the Kind.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="RightShiftExpression">
      <MemberSignature Language="C#" Value="RightShiftExpression" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind RightShiftExpression = unsigned int16(316)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.RightShiftExpression" />
      <MemberSignature Language="VB.NET" Value="RightShiftExpression" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>316</MemberValue>
      <Docs>
        <summary>
 Represents a binary operator. The Kind property classifies the operators into
 similar kind of operators (arithmetic, relational, logical or string); the
 exact operation being performed is determined by the Operator property.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="SByteKeyword">
      <MemberSignature Language="C#" Value="SByteKeyword" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind SByteKeyword = unsigned int16(544)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.SByteKeyword" />
      <MemberSignature Language="VB.NET" Value="SByteKeyword" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>544</MemberValue>
      <Docs>
        <summary>
 Represents a single keyword in a VB program. Which keyword can be determined
 from the Kind property.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="SelectBlock">
      <MemberSignature Language="C#" Value="SelectBlock" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind SelectBlock = unsigned int16(203)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.SelectBlock" />
      <MemberSignature Language="VB.NET" Value="SelectBlock" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>203</MemberValue>
      <Docs>
        <summary>
 Represents a Select Case block, including the Select Case that begins it, the
 contains Case blocks and the End Select.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="SelectClause">
      <MemberSignature Language="C#" Value="SelectClause" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind SelectClause = unsigned int16(377)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.SelectClause" />
      <MemberSignature Language="VB.NET" Value="SelectClause" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>377</MemberValue>
      <Docs>
        <summary>
 Represents the "Select" query operator.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="SelectKeyword">
      <MemberSignature Language="C#" Value="SelectKeyword" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind SelectKeyword = unsigned int16(545)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.SelectKeyword" />
      <MemberSignature Language="VB.NET" Value="SelectKeyword" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>545</MemberValue>
      <Docs>
        <summary>
 Represents a single keyword in a VB program. Which keyword can be determined
 from the Kind property.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="SelectStatement">
      <MemberSignature Language="C#" Value="SelectStatement" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind SelectStatement = unsigned int16(204)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.SelectStatement" />
      <MemberSignature Language="VB.NET" Value="SelectStatement" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>204</MemberValue>
      <Docs>
        <summary>
 Represents a Select Case statement. This statement always occurs as the Begin
 of a SelectBlock.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="SemicolonToken">
      <MemberSignature Language="C#" Value="SemicolonToken" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind SemicolonToken = unsigned int16(646)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.SemicolonToken" />
      <MemberSignature Language="VB.NET" Value="SemicolonToken" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>646</MemberValue>
      <Docs>
        <summary>
 Represents a single punctuation mark or operator in a VB program. Which one can
 be determined from the Kind property.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="SetAccessorBlock">
      <MemberSignature Language="C#" Value="SetAccessorBlock" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind SetAccessorBlock = unsigned int16(84)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.SetAccessorBlock" />
      <MemberSignature Language="VB.NET" Value="SetAccessorBlock" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>84</MemberValue>
      <Docs>
        <summary>
 Represents an accessor block member declaration: A declaration that has a
 beginning declaration, a body of executable statements and an end statement.
 Examples include property accessors and custom event accessors.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="SetAccessorStatement">
      <MemberSignature Language="C#" Value="SetAccessorStatement" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind SetAccessorStatement = unsigned int16(106)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.SetAccessorStatement" />
      <MemberSignature Language="VB.NET" Value="SetAccessorStatement" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>106</MemberValue>
      <Docs>
        <summary>
 Represents a Get or Set accessor on a property declaration or an AddHandler,
 RemoveHandler or RaiseEvent accessor on a custom event declaration. The Kind of
 the node determines what kind of accessor this is. This statement is always the
 Begin of a BlockNode, and the body of the accessor is the Body of that node.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="SetKeyword">
      <MemberSignature Language="C#" Value="SetKeyword" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind SetKeyword = unsigned int16(546)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.SetKeyword" />
      <MemberSignature Language="VB.NET" Value="SetKeyword" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>546</MemberValue>
      <Docs>
        <summary>
 Represents a single keyword in a VB program. Which keyword can be determined
 from the Kind property.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="ShadowsKeyword">
      <MemberSignature Language="C#" Value="ShadowsKeyword" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind ShadowsKeyword = unsigned int16(547)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.ShadowsKeyword" />
      <MemberSignature Language="VB.NET" Value="ShadowsKeyword" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>547</MemberValue>
      <Docs>
        <summary>
 Represents a single keyword in a VB program. Which keyword can be determined
 from the Kind property.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="SharedKeyword">
      <MemberSignature Language="C#" Value="SharedKeyword" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind SharedKeyword = unsigned int16(548)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.SharedKeyword" />
      <MemberSignature Language="VB.NET" Value="SharedKeyword" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>548</MemberValue>
      <Docs>
        <summary>
 Represents a single keyword in a VB program. Which keyword can be determined
 from the Kind property.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="ShortKeyword">
      <MemberSignature Language="C#" Value="ShortKeyword" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind ShortKeyword = unsigned int16(549)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.ShortKeyword" />
      <MemberSignature Language="VB.NET" Value="ShortKeyword" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>549</MemberValue>
      <Docs>
        <summary>
 Represents a single keyword in a VB program. Which keyword can be determined
 from the Kind property.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="SimpleArgument">
      <MemberSignature Language="C#" Value="SimpleArgument" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind SimpleArgument = unsigned int16(349)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.SimpleArgument" />
      <MemberSignature Language="VB.NET" Value="SimpleArgument" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>349</MemberValue>
      <Docs>
        <summary>
 Represents an argument that is just an optional argument name and an expression.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="SimpleAsClause">
      <MemberSignature Language="C#" Value="SimpleAsClause" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind SimpleAsClause = unsigned int16(123)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.SimpleAsClause" />
      <MemberSignature Language="VB.NET" Value="SimpleAsClause" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>123</MemberValue>
      <Docs>
        <summary>
 Represents an "As {type-name}" clause that does not have an initializer or
 "New". The type has optional attributes associated with it, although attributes
 are not permitted in all possible places where this node occurs.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="SimpleAssignmentStatement">
      <MemberSignature Language="C#" Value="SimpleAssignmentStatement" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind SimpleAssignmentStatement = unsigned int16(247)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.SimpleAssignmentStatement" />
      <MemberSignature Language="VB.NET" Value="SimpleAssignmentStatement" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>247</MemberValue>
      <Docs>
        <summary>
 Represents a simple, compound, or Mid assignment statement. Which one can be
 determined by checking the Kind.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="SimpleCaseClause">
      <MemberSignature Language="C#" Value="SimpleCaseClause" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind SimpleCaseClause = unsigned int16(214)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.SimpleCaseClause" />
      <MemberSignature Language="VB.NET" Value="SimpleCaseClause" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>214</MemberValue>
      <Docs>
        <summary>
 Represents a single value in a Case.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="SimpleDoLoopBlock">
      <MemberSignature Language="C#" Value="SimpleDoLoopBlock" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind SimpleDoLoopBlock = unsigned int16(756)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.SimpleDoLoopBlock" />
      <MemberSignature Language="VB.NET" Value="SimpleDoLoopBlock" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>756</MemberValue>
      <Docs>
        <summary>
 Represents a "Do ... Loop" block.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="SimpleDoStatement">
      <MemberSignature Language="C#" Value="SimpleDoStatement" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind SimpleDoStatement = unsigned int16(770)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.SimpleDoStatement" />
      <MemberSignature Language="VB.NET" Value="SimpleDoStatement" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>770</MemberValue>
      <Docs>
        <summary>
 Represents a simple "Do" statement that begins a "Do ... Loop" block.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="SimpleImportsClause">
      <MemberSignature Language="C#" Value="SimpleImportsClause" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind SimpleImportsClause = unsigned int16(44)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.SimpleImportsClause" />
      <MemberSignature Language="VB.NET" Value="SimpleImportsClause" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>44</MemberValue>
      <Docs>
        <summary>
 Represents the clause of an Imports statement that imports all members of a type or namespace or aliases a type or namespace.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="SimpleJoinClause">
      <MemberSignature Language="C#" Value="SimpleJoinClause" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind SimpleJoinClause = unsigned int16(370)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.SimpleJoinClause" />
      <MemberSignature Language="VB.NET" Value="SimpleJoinClause" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>370</MemberValue>
      <Docs>
        <summary>
 Represents a Join query operator.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="SimpleLoopStatement">
      <MemberSignature Language="C#" Value="SimpleLoopStatement" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind SimpleLoopStatement = unsigned int16(773)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.SimpleLoopStatement" />
      <MemberSignature Language="VB.NET" Value="SimpleLoopStatement" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>773</MemberValue>
      <Docs>
        <summary>
 Represents a simple "Loop" statement that end a "Do ... Loop" block.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="SimpleMemberAccessExpression">
      <MemberSignature Language="C#" Value="SimpleMemberAccessExpression" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind SimpleMemberAccessExpression = unsigned int16(291)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.SimpleMemberAccessExpression" />
      <MemberSignature Language="VB.NET" Value="SimpleMemberAccessExpression" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>291</MemberValue>
      <Docs>
        <summary>
 Represents member access (.name) or dictionary access (!name). The Kind
 property determines which kind of access.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="SingleKeyword">
      <MemberSignature Language="C#" Value="SingleKeyword" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind SingleKeyword = unsigned int16(550)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.SingleKeyword" />
      <MemberSignature Language="VB.NET" Value="SingleKeyword" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>550</MemberValue>
      <Docs>
        <summary>
 Represents a single keyword in a VB program. Which keyword can be determined
 from the Kind property.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="SingleLineElseClause">
      <MemberSignature Language="C#" Value="SingleLineElseClause" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind SingleLineElseClause = unsigned int16(172)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.SingleLineElseClause" />
      <MemberSignature Language="VB.NET" Value="SingleLineElseClause" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>172</MemberValue>
      <Docs>
        <summary>
 Represents the Else part of an If statement, consisting of a Else statement,
 followed by a body of statement controlled by that Else.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="SingleLineFunctionLambdaExpression">
      <MemberSignature Language="C#" Value="SingleLineFunctionLambdaExpression" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind SingleLineFunctionLambdaExpression = unsigned int16(339)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.SingleLineFunctionLambdaExpression" />
      <MemberSignature Language="VB.NET" Value="SingleLineFunctionLambdaExpression" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>339</MemberValue>
      <Docs>
        <summary>
 Represents a single line lambda expression.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="SingleLineIfPart">
      <MemberSignature Language="C#" Value="SingleLineIfPart" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind SingleLineIfPart = unsigned int16(171)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.SingleLineIfPart" />
      <MemberSignature Language="VB.NET" Value="SingleLineIfPart" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>171</MemberValue>
      <Docs>
        <summary>
 Represents part of a single line If statement, consisting of a beginning
 if-statement, followed by a body of statement controlled by that beginning
 statement. The Kind property returns if this is an SingleLineIf.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="SingleLineIfStatement">
      <MemberSignature Language="C#" Value="SingleLineIfStatement" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind SingleLineIfStatement = unsigned int16(170)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.SingleLineIfStatement" />
      <MemberSignature Language="VB.NET" Value="SingleLineIfStatement" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>170</MemberValue>
      <Docs>
        <summary>
 Represents a line If-Then-Else statement.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="SingleLineSubLambdaExpression">
      <MemberSignature Language="C#" Value="SingleLineSubLambdaExpression" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind SingleLineSubLambdaExpression = unsigned int16(342)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.SingleLineSubLambdaExpression" />
      <MemberSignature Language="VB.NET" Value="SingleLineSubLambdaExpression" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>342</MemberValue>
      <Docs>
        <summary>
 Represents a single line lambda expression.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="SingleQuoteToken">
      <MemberSignature Language="C#" Value="SingleQuoteToken" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind SingleQuoteToken = unsigned int16(641)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.SingleQuoteToken" />
      <MemberSignature Language="VB.NET" Value="SingleQuoteToken" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>641</MemberValue>
      <Docs>
        <summary>
 Represents a single punctuation mark or operator in a VB program. Which one can
 be determined from the Kind property.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="SkipClause">
      <MemberSignature Language="C#" Value="SkipClause" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind SkipClause = unsigned int16(366)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.SkipClause" />
      <MemberSignature Language="VB.NET" Value="SkipClause" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>366</MemberValue>
      <Docs>
        <summary>
 Represents a "Skip" or "Take" query operator. The Kind property tells which.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="SkipKeyword">
      <MemberSignature Language="C#" Value="SkipKeyword" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind SkipKeyword = unsigned int16(620)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.SkipKeyword" />
      <MemberSignature Language="VB.NET" Value="SkipKeyword" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>620</MemberValue>
      <Docs>
        <summary>
 Represents a single keyword in a VB program. Which keyword can be determined
 from the Kind property.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="SkippedTokensTrivia">
      <MemberSignature Language="C#" Value="SkippedTokensTrivia" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind SkippedTokensTrivia = unsigned int16(709)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.SkippedTokensTrivia" />
      <MemberSignature Language="VB.NET" Value="SkippedTokensTrivia" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>709</MemberValue>
      <Docs>
        <summary>
 Represents tokens that were skipped by the parser as part of error recovery,
 and thus are not part of any syntactic structure.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="SkipWhileClause">
      <MemberSignature Language="C#" Value="SkipWhileClause" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind SkipWhileClause = unsigned int16(364)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.SkipWhileClause" />
      <MemberSignature Language="VB.NET" Value="SkipWhileClause" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>364</MemberValue>
      <Docs>
        <summary>
 Represents a "Skip While" or "Take While" query operator. The Kind property
 tells which.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="SlashEqualsToken">
      <MemberSignature Language="C#" Value="SlashEqualsToken" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind SlashEqualsToken = unsigned int16(668)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.SlashEqualsToken" />
      <MemberSignature Language="VB.NET" Value="SlashEqualsToken" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>668</MemberValue>
      <Docs>
        <summary>
 Represents a single punctuation mark or operator in a VB program. Which one can
 be determined from the Kind property.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="SlashGreaterThanToken">
      <MemberSignature Language="C#" Value="SlashGreaterThanToken" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind SlashGreaterThanToken = unsigned int16(680)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.SlashGreaterThanToken" />
      <MemberSignature Language="VB.NET" Value="SlashGreaterThanToken" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>680</MemberValue>
      <Docs>
        <summary>
 Represents a single punctuation mark or operator in a VB program. Which one can
 be determined from the Kind property.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="SlashToken">
      <MemberSignature Language="C#" Value="SlashToken" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind SlashToken = unsigned int16(651)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.SlashToken" />
      <MemberSignature Language="VB.NET" Value="SlashToken" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>651</MemberValue>
      <Docs>
        <summary>
 Represents a single punctuation mark or operator in a VB program. Which one can
 be determined from the Kind property.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="StatementTerminatorToken">
      <MemberSignature Language="C#" Value="StatementTerminatorToken" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind StatementTerminatorToken = unsigned int16(677)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.StatementTerminatorToken" />
      <MemberSignature Language="VB.NET" Value="StatementTerminatorToken" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>677</MemberValue>
      <Docs>
        <summary>
 Represents a single punctuation mark or operator in a VB program. Which one can
 be determined from the Kind property.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="StaticKeyword">
      <MemberSignature Language="C#" Value="StaticKeyword" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind StaticKeyword = unsigned int16(551)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.StaticKeyword" />
      <MemberSignature Language="VB.NET" Value="StaticKeyword" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>551</MemberValue>
      <Docs>
        <summary>
 Represents a single keyword in a VB program. Which keyword can be determined
 from the Kind property.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="StepKeyword">
      <MemberSignature Language="C#" Value="StepKeyword" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind StepKeyword = unsigned int16(552)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.StepKeyword" />
      <MemberSignature Language="VB.NET" Value="StepKeyword" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>552</MemberValue>
      <Docs>
        <summary>
 Represents a single keyword in a VB program. Which keyword can be determined
 from the Kind property.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="StopKeyword">
      <MemberSignature Language="C#" Value="StopKeyword" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind StopKeyword = unsigned int16(553)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.StopKeyword" />
      <MemberSignature Language="VB.NET" Value="StopKeyword" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>553</MemberValue>
      <Docs>
        <summary>
 Represents a single keyword in a VB program. Which keyword can be determined
 from the Kind property.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="StopStatement">
      <MemberSignature Language="C#" Value="StopStatement" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind StopStatement = unsigned int16(153)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.StopStatement" />
      <MemberSignature Language="VB.NET" Value="StopStatement" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>153</MemberValue>
      <Docs>
        <summary>
 Represents a "Stop" or "End" statement. The Kind can be used to determine which
 kind of statement this is.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="StrictKeyword">
      <MemberSignature Language="C#" Value="StrictKeyword" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind StrictKeyword = unsigned int16(621)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.StrictKeyword" />
      <MemberSignature Language="VB.NET" Value="StrictKeyword" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>621</MemberValue>
      <Docs>
        <summary>
 Represents a single keyword in a VB program. Which keyword can be determined
 from the Kind property.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="StringKeyword">
      <MemberSignature Language="C#" Value="StringKeyword" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind StringKeyword = unsigned int16(554)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.StringKeyword" />
      <MemberSignature Language="VB.NET" Value="StringKeyword" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>554</MemberValue>
      <Docs>
        <summary>
 Represents a single keyword in a VB program. Which keyword can be determined
 from the Kind property.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="StringLiteralExpression">
      <MemberSignature Language="C#" Value="StringLiteralExpression" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind StringLiteralExpression = unsigned int16(279)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.StringLiteralExpression" />
      <MemberSignature Language="VB.NET" Value="StringLiteralExpression" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>279</MemberValue>
      <Docs>
        <summary>
 Represents a literal. The kind of literal is determined by the Kind property:
 IntegerLiteral, CharacterLiteral, BooleanLiteral, DecimalLiteral,
 FloatingLiteral, DateLiteral or StringLiteral. The value of the literal can be
 determined by casting the associated Token to the correct type and getting the
 value from the token.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="StringLiteralToken">
      <MemberSignature Language="C#" Value="StringLiteralToken" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind StringLiteralToken = unsigned int16(705)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.StringLiteralToken" />
      <MemberSignature Language="VB.NET" Value="StringLiteralToken" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>705</MemberValue>
      <Docs>
        <summary>
 Represents an string literal token.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="StructureBlock">
      <MemberSignature Language="C#" Value="StructureBlock" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind StructureBlock = unsigned int16(51)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.StructureBlock" />
      <MemberSignature Language="VB.NET" Value="StructureBlock" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>51</MemberValue>
      <Docs>
        <summary>
 Represents a declaration of a Structure, its contents and the End statement
 that ends it.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="StructureConstraint">
      <MemberSignature Language="C#" Value="StructureConstraint" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind StructureConstraint = unsigned int16(74)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.StructureConstraint" />
      <MemberSignature Language="VB.NET" Value="StructureConstraint" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>74</MemberValue>
      <Docs>
        <summary>
 One of the special type parameter constraints: New, Class or Structure. Which
 kind of special constraint it is can be obtained from the Kind property and is
 one of: NewConstraint, ReferenceConstraint or ValueConstraint.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="StructureKeyword">
      <MemberSignature Language="C#" Value="StructureKeyword" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind StructureKeyword = unsigned int16(555)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.StructureKeyword" />
      <MemberSignature Language="VB.NET" Value="StructureKeyword" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>555</MemberValue>
      <Docs>
        <summary>
 Represents a single keyword in a VB program. Which keyword can be determined
 from the Kind property.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="StructureStatement">
      <MemberSignature Language="C#" Value="StructureStatement" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind StructureStatement = unsigned int16(60)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.StructureStatement" />
      <MemberSignature Language="VB.NET" Value="StructureStatement" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>60</MemberValue>
      <Docs>
        <summary>
 Represents the beginning statement of a Structure declaration. This node always
 appears as the Begin of a TypeBlock with Kind=StructureDeclarationBlock.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="SubBlock">
      <MemberSignature Language="C#" Value="SubBlock" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind SubBlock = unsigned int16(79)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.SubBlock" />
      <MemberSignature Language="VB.NET" Value="SubBlock" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>79</MemberValue>
      <Docs>
        <summary>
 Represents a Function or Sub block declaration: A declaration that has a
 beginning declaration, a body of executable statements and an end statement.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="SubKeyword">
      <MemberSignature Language="C#" Value="SubKeyword" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind SubKeyword = unsigned int16(558)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.SubKeyword" />
      <MemberSignature Language="VB.NET" Value="SubKeyword" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>558</MemberValue>
      <Docs>
        <summary>
 Represents a single keyword in a VB program. Which keyword can be determined
 from the Kind property.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="SubLambdaHeader">
      <MemberSignature Language="C#" Value="SubLambdaHeader" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind SubLambdaHeader = unsigned int16(345)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.SubLambdaHeader" />
      <MemberSignature Language="VB.NET" Value="SubLambdaHeader" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>345</MemberValue>
      <Docs>
        <summary>
 Represents the header part of a lambda expression
 </summary>
      </Docs>
    </Member>
    <Member MemberName="SubNewStatement">
      <MemberSignature Language="C#" Value="SubNewStatement" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind SubNewStatement = unsigned int16(95)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.SubNewStatement" />
      <MemberSignature Language="VB.NET" Value="SubNewStatement" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>95</MemberValue>
      <Docs>
        <summary>
 A statement that declares a constructor. This statement will be the Begin of a
 BlockStatement with Kind=MethodDeclarationBlock, and the body of the method
 will be the Body of that BlockStatement.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="SubStatement">
      <MemberSignature Language="C#" Value="SubStatement" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind SubStatement = unsigned int16(93)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.SubStatement" />
      <MemberSignature Language="VB.NET" Value="SubStatement" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>93</MemberValue>
      <Docs>
        <summary>
 The statement that declares a Sub or Function. If this method has a body, this
 statement will be the Begin of a BlockStatement with
 Kind=MethodDeclarationBlock, and the body of the method will be the Body of
 that BlockStatement.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="SubtractAssignmentStatement">
      <MemberSignature Language="C#" Value="SubtractAssignmentStatement" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind SubtractAssignmentStatement = unsigned int16(250)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.SubtractAssignmentStatement" />
      <MemberSignature Language="VB.NET" Value="SubtractAssignmentStatement" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>250</MemberValue>
      <Docs>
        <summary>
 Represents a simple, compound, or Mid assignment statement. Which one can be
 determined by checking the Kind.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="SubtractExpression">
      <MemberSignature Language="C#" Value="SubtractExpression" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind SubtractExpression = unsigned int16(308)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.SubtractExpression" />
      <MemberSignature Language="VB.NET" Value="SubtractExpression" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>308</MemberValue>
      <Docs>
        <summary>
 Represents a binary operator. The Kind property classifies the operators into
 similar kind of operators (arithmetic, relational, logical or string); the
 exact operation being performed is determined by the Operator property.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="SyncLockBlock">
      <MemberSignature Language="C#" Value="SyncLockBlock" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind SyncLockBlock = unsigned int16(145)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.SyncLockBlock" />
      <MemberSignature Language="VB.NET" Value="SyncLockBlock" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>145</MemberValue>
      <Docs>
        <summary>
 Represents a entire SyncLock...End SyncLock block, including the SyncLock
 statement, the enclosed statements, and the End SyncLock statement.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="SyncLockKeyword">
      <MemberSignature Language="C#" Value="SyncLockKeyword" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind SyncLockKeyword = unsigned int16(559)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.SyncLockKeyword" />
      <MemberSignature Language="VB.NET" Value="SyncLockKeyword" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>559</MemberValue>
      <Docs>
        <summary>
 Represents a single keyword in a VB program. Which keyword can be determined
 from the Kind property.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="SyncLockStatement">
      <MemberSignature Language="C#" Value="SyncLockStatement" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind SyncLockStatement = unsigned int16(226)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.SyncLockStatement" />
      <MemberSignature Language="VB.NET" Value="SyncLockStatement" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>226</MemberValue>
      <Docs>
        <summary>
 Represents the "SyncLock" statement. This statement always occurs as the Begin
 of a SyncLockBlock.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="TakeClause">
      <MemberSignature Language="C#" Value="TakeClause" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind TakeClause = unsigned int16(367)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.TakeClause" />
      <MemberSignature Language="VB.NET" Value="TakeClause" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>367</MemberValue>
      <Docs>
        <summary>
 Represents a "Skip" or "Take" query operator. The Kind property tells which.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="TakeKeyword">
      <MemberSignature Language="C#" Value="TakeKeyword" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind TakeKeyword = unsigned int16(622)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.TakeKeyword" />
      <MemberSignature Language="VB.NET" Value="TakeKeyword" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>622</MemberValue>
      <Docs>
        <summary>
 Represents a single keyword in a VB program. Which keyword can be determined
 from the Kind property.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="TakeWhileClause">
      <MemberSignature Language="C#" Value="TakeWhileClause" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind TakeWhileClause = unsigned int16(365)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.TakeWhileClause" />
      <MemberSignature Language="VB.NET" Value="TakeWhileClause" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>365</MemberValue>
      <Docs>
        <summary>
 Represents a "Skip While" or "Take While" query operator. The Kind property
 tells which.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="TernaryConditionalExpression">
      <MemberSignature Language="C#" Value="TernaryConditionalExpression" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind TernaryConditionalExpression = unsigned int16(338)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.TernaryConditionalExpression" />
      <MemberSignature Language="VB.NET" Value="TernaryConditionalExpression" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>338</MemberValue>
      <Docs>
        <summary>
 Represents a conditional expression, If(condition, true-expr, false-expr) or
 If(expr, nothing-expr).
 </summary>
      </Docs>
    </Member>
    <Member MemberName="TextKeyword">
      <MemberSignature Language="C#" Value="TextKeyword" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind TextKeyword = unsigned int16(623)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.TextKeyword" />
      <MemberSignature Language="VB.NET" Value="TextKeyword" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>623</MemberValue>
      <Docs>
        <summary>
 Represents a single keyword in a VB program. Which keyword can be determined
 from the Kind property.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="ThenKeyword">
      <MemberSignature Language="C#" Value="ThenKeyword" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind ThenKeyword = unsigned int16(560)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.ThenKeyword" />
      <MemberSignature Language="VB.NET" Value="ThenKeyword" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>560</MemberValue>
      <Docs>
        <summary>
 Represents a single keyword in a VB program. Which keyword can be determined
 from the Kind property.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="ThrowKeyword">
      <MemberSignature Language="C#" Value="ThrowKeyword" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind ThrowKeyword = unsigned int16(561)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.ThrowKeyword" />
      <MemberSignature Language="VB.NET" Value="ThrowKeyword" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>561</MemberValue>
      <Docs>
        <summary>
 Represents a single keyword in a VB program. Which keyword can be determined
 from the Kind property.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="ThrowStatement">
      <MemberSignature Language="C#" Value="ThrowStatement" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind ThrowStatement = unsigned int16(246)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.ThrowStatement" />
      <MemberSignature Language="VB.NET" Value="ThrowStatement" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>246</MemberValue>
      <Docs>
        <summary>
 Represents a Throw statement.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="ToKeyword">
      <MemberSignature Language="C#" Value="ToKeyword" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind ToKeyword = unsigned int16(562)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.ToKeyword" />
      <MemberSignature Language="VB.NET" Value="ToKeyword" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>562</MemberValue>
      <Docs>
        <summary>
 Represents a single keyword in a VB program. Which keyword can be determined
 from the Kind property.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="TrueKeyword">
      <MemberSignature Language="C#" Value="TrueKeyword" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind TrueKeyword = unsigned int16(563)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.TrueKeyword" />
      <MemberSignature Language="VB.NET" Value="TrueKeyword" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>563</MemberValue>
      <Docs>
        <summary>
 Represents a single keyword in a VB program. Which keyword can be determined
 from the Kind property.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="TrueLiteralExpression">
      <MemberSignature Language="C#" Value="TrueLiteralExpression" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind TrueLiteralExpression = unsigned int16(273)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.TrueLiteralExpression" />
      <MemberSignature Language="VB.NET" Value="TrueLiteralExpression" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>273</MemberValue>
      <Docs>
        <summary>
 Represents a literal. The kind of literal is determined by the Kind property:
 IntegerLiteral, CharacterLiteral, BooleanLiteral, DecimalLiteral,
 FloatingLiteral, DateLiteral or StringLiteral. The value of the literal can be
 determined by casting the associated Token to the correct type and getting the
 value from the token.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="TryBlock">
      <MemberSignature Language="C#" Value="TryBlock" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind TryBlock = unsigned int16(185)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.TryBlock" />
      <MemberSignature Language="VB.NET" Value="TryBlock" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>185</MemberValue>
      <Docs>
        <summary>
 Represents an entire Try...Catch...Finally...End Try statement.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="TryCastExpression">
      <MemberSignature Language="C#" Value="TryCastExpression" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind TryCastExpression = unsigned int16(305)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.TryCastExpression" />
      <MemberSignature Language="VB.NET" Value="TryCastExpression" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>305</MemberValue>
      <Docs>
        <summary>To be added.</summary>
      </Docs>
    </Member>
    <Member MemberName="TryCastKeyword">
      <MemberSignature Language="C#" Value="TryCastKeyword" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind TryCastKeyword = unsigned int16(565)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.TryCastKeyword" />
      <MemberSignature Language="VB.NET" Value="TryCastKeyword" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>565</MemberValue>
      <Docs>
        <summary>
 Represents a single keyword in a VB program. Which keyword can be determined
 from the Kind property.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="TryKeyword">
      <MemberSignature Language="C#" Value="TryKeyword" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind TryKeyword = unsigned int16(564)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.TryKeyword" />
      <MemberSignature Language="VB.NET" Value="TryKeyword" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>564</MemberValue>
      <Docs>
        <summary>
 Represents a single keyword in a VB program. Which keyword can be determined
 from the Kind property.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="TryStatement">
      <MemberSignature Language="C#" Value="TryStatement" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind TryStatement = unsigned int16(189)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.TryStatement" />
      <MemberSignature Language="VB.NET" Value="TryStatement" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>189</MemberValue>
      <Docs>
        <summary>
 Represents the Try part of a Try...Catch...Finally...End Try. This
 statement is always the Begin of a TryPart.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="TupleExpression">
      <MemberSignature Language="C#" Value="TupleExpression" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind TupleExpression = unsigned int16(788)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.TupleExpression" />
      <MemberSignature Language="VB.NET" Value="TupleExpression" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>788</MemberValue>
      <Docs>
        <summary>
 Represents tuple literal expression.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="TupleType">
      <MemberSignature Language="C#" Value="TupleType" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind TupleType = unsigned int16(789)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.TupleType" />
      <MemberSignature Language="VB.NET" Value="TupleType" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>789</MemberValue>
      <Docs>
        <summary>
 Represents tuple type.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="TypeArgumentList">
      <MemberSignature Language="C#" Value="TypeArgumentList" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind TypeArgumentList = unsigned int16(403)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.TypeArgumentList" />
      <MemberSignature Language="VB.NET" Value="TypeArgumentList" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>403</MemberValue>
      <Docs>
        <summary>
 Represents a parenthesized list of generic type arguments.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="TypeConstraint">
      <MemberSignature Language="C#" Value="TypeConstraint" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind TypeConstraint = unsigned int16(75)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.TypeConstraint" />
      <MemberSignature Language="VB.NET" Value="TypeConstraint" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>75</MemberValue>
      <Docs>
        <summary>
 Represents a type parameter constraint that is a type.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="TypedTupleElement">
      <MemberSignature Language="C#" Value="TypedTupleElement" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind TypedTupleElement = unsigned int16(790)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.TypedTupleElement" />
      <MemberSignature Language="VB.NET" Value="TypedTupleElement" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>790</MemberValue>
      <Docs>
        <summary>
 Represents an element of a tuple type supplying only the type
 </summary>
      </Docs>
    </Member>
    <Member MemberName="TypeKeyword">
      <MemberSignature Language="C#" Value="TypeKeyword" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind TypeKeyword = unsigned int16(628)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.TypeKeyword" />
      <MemberSignature Language="VB.NET" Value="TypeKeyword" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>628</MemberValue>
      <Docs>
        <summary>
 Represents a single keyword in a VB program. Which keyword can be determined
 from the Kind property.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="TypeOfIsExpression">
      <MemberSignature Language="C#" Value="TypeOfIsExpression" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind TypeOfIsExpression = unsigned int16(286)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.TypeOfIsExpression" />
      <MemberSignature Language="VB.NET" Value="TypeOfIsExpression" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>286</MemberValue>
      <Docs>
        <summary>
 Represents a TypeOf...Is or IsNot expression.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="TypeOfIsNotExpression">
      <MemberSignature Language="C#" Value="TypeOfIsNotExpression" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind TypeOfIsNotExpression = unsigned int16(287)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.TypeOfIsNotExpression" />
      <MemberSignature Language="VB.NET" Value="TypeOfIsNotExpression" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>287</MemberValue>
      <Docs>
        <summary>
 Represents a TypeOf...Is or IsNot expression.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="TypeOfKeyword">
      <MemberSignature Language="C#" Value="TypeOfKeyword" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind TypeOfKeyword = unsigned int16(566)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.TypeOfKeyword" />
      <MemberSignature Language="VB.NET" Value="TypeOfKeyword" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>566</MemberValue>
      <Docs>
        <summary>
 Represents a single keyword in a VB program. Which keyword can be determined
 from the Kind property.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="TypeParameter">
      <MemberSignature Language="C#" Value="TypeParameter" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind TypeParameter = unsigned int16(67)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.TypeParameter" />
      <MemberSignature Language="VB.NET" Value="TypeParameter" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>67</MemberValue>
      <Docs>
        <summary>
 Represents a type parameter on a generic type declaration.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="TypeParameterList">
      <MemberSignature Language="C#" Value="TypeParameterList" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind TypeParameterList = unsigned int16(66)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.TypeParameterList" />
      <MemberSignature Language="VB.NET" Value="TypeParameterList" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>66</MemberValue>
      <Docs>
        <summary>
 Represents the type parameter list in a declaration.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="TypeParameterMultipleConstraintClause">
      <MemberSignature Language="C#" Value="TypeParameterMultipleConstraintClause" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind TypeParameterMultipleConstraintClause = unsigned int16(71)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.TypeParameterMultipleConstraintClause" />
      <MemberSignature Language="VB.NET" Value="TypeParameterMultipleConstraintClause" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>71</MemberValue>
      <Docs>
        <summary>
 One of the type parameter constraints clauses. This represents a constraint
 clause in the form of "As { Constraints }".
 </summary>
      </Docs>
    </Member>
    <Member MemberName="TypeParameterSingleConstraintClause">
      <MemberSignature Language="C#" Value="TypeParameterSingleConstraintClause" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind TypeParameterSingleConstraintClause = unsigned int16(70)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.TypeParameterSingleConstraintClause" />
      <MemberSignature Language="VB.NET" Value="TypeParameterSingleConstraintClause" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>70</MemberValue>
      <Docs>
        <summary>
 One of the type parameter constraints clauses. This represents a constraint
 clause in the form of "As Constraint".
 </summary>
      </Docs>
    </Member>
    <Member MemberName="UIntegerKeyword">
      <MemberSignature Language="C#" Value="UIntegerKeyword" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind UIntegerKeyword = unsigned int16(567)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.UIntegerKeyword" />
      <MemberSignature Language="VB.NET" Value="UIntegerKeyword" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>567</MemberValue>
      <Docs>
        <summary>
 Represents a single keyword in a VB program. Which keyword can be determined
 from the Kind property.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="ULongKeyword">
      <MemberSignature Language="C#" Value="ULongKeyword" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind ULongKeyword = unsigned int16(568)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.ULongKeyword" />
      <MemberSignature Language="VB.NET" Value="ULongKeyword" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>568</MemberValue>
      <Docs>
        <summary>
 Represents a single keyword in a VB program. Which keyword can be determined
 from the Kind property.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="UnaryMinusExpression">
      <MemberSignature Language="C#" Value="UnaryMinusExpression" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind UnaryMinusExpression = unsigned int16(334)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.UnaryMinusExpression" />
      <MemberSignature Language="VB.NET" Value="UnaryMinusExpression" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>334</MemberValue>
      <Docs>
        <summary>
 Describes a unary operator: Plus, Negate, Not or AddressOf.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="UnaryPlusExpression">
      <MemberSignature Language="C#" Value="UnaryPlusExpression" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind UnaryPlusExpression = unsigned int16(333)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.UnaryPlusExpression" />
      <MemberSignature Language="VB.NET" Value="UnaryPlusExpression" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>333</MemberValue>
      <Docs>
        <summary>
 Describes a unary operator: Plus, Negate, Not or AddressOf.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="UnicodeKeyword">
      <MemberSignature Language="C#" Value="UnicodeKeyword" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind UnicodeKeyword = unsigned int16(624)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.UnicodeKeyword" />
      <MemberSignature Language="VB.NET" Value="UnicodeKeyword" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>624</MemberValue>
      <Docs>
        <summary>
 Represents a single keyword in a VB program. Which keyword can be determined
 from the Kind property.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="UntilClause">
      <MemberSignature Language="C#" Value="UntilClause" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind UntilClause = unsigned int16(777)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.UntilClause" />
      <MemberSignature Language="VB.NET" Value="UntilClause" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>777</MemberValue>
      <Docs>
        <summary>
 Represents an "Until ..." clause of a "Do" or "Loop" statement.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="UntilKeyword">
      <MemberSignature Language="C#" Value="UntilKeyword" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind UntilKeyword = unsigned int16(625)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.UntilKeyword" />
      <MemberSignature Language="VB.NET" Value="UntilKeyword" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>625</MemberValue>
      <Docs>
        <summary>
 Represents a single keyword in a VB program. Which keyword can be determined
 from the Kind property.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="UShortKeyword">
      <MemberSignature Language="C#" Value="UShortKeyword" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind UShortKeyword = unsigned int16(569)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.UShortKeyword" />
      <MemberSignature Language="VB.NET" Value="UShortKeyword" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>569</MemberValue>
      <Docs>
        <summary>
 Represents a single keyword in a VB program. Which keyword can be determined
 from the Kind property.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="UsingBlock">
      <MemberSignature Language="C#" Value="UsingBlock" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind UsingBlock = unsigned int16(144)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.UsingBlock" />
      <MemberSignature Language="VB.NET" Value="UsingBlock" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>144</MemberValue>
      <Docs>
        <summary>
 Represents an entire Using...End Using statement, including the Using, body and
 End Using statements.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="UsingKeyword">
      <MemberSignature Language="C#" Value="UsingKeyword" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind UsingKeyword = unsigned int16(570)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.UsingKeyword" />
      <MemberSignature Language="VB.NET" Value="UsingKeyword" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>570</MemberValue>
      <Docs>
        <summary>
 Represents a single keyword in a VB program. Which keyword can be determined
 from the Kind property.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="UsingStatement">
      <MemberSignature Language="C#" Value="UsingStatement" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind UsingStatement = unsigned int16(243)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.UsingStatement" />
      <MemberSignature Language="VB.NET" Value="UsingStatement" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>243</MemberValue>
      <Docs>
        <summary>
 The Using statement that begins a Using block. This statement always occurs as
 the Begin of a UsingBlock, and the body of the Using is the Body of that
 UsingBlock.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="VariableDeclarator">
      <MemberSignature Language="C#" Value="VariableDeclarator" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind VariableDeclarator = unsigned int16(122)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.VariableDeclarator" />
      <MemberSignature Language="VB.NET" Value="VariableDeclarator" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>122</MemberValue>
      <Docs>
        <summary>
 Represents the part of a variable or constant declaration statement that
 associated one or more variable names with a type.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="VariableNameEquals">
      <MemberSignature Language="C#" Value="VariableNameEquals" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind VariableNameEquals = unsigned int16(356)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.VariableNameEquals" />
      <MemberSignature Language="VB.NET" Value="VariableNameEquals" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>356</MemberValue>
      <Docs>
        <summary>
 Represents the name and optional type of an expression range variable.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="VariantKeyword">
      <MemberSignature Language="C#" Value="VariantKeyword" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind VariantKeyword = unsigned int16(582)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.VariantKeyword" />
      <MemberSignature Language="VB.NET" Value="VariantKeyword" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>582</MemberValue>
      <Docs>
        <summary>
 Represents a single keyword in a VB program. Which keyword can be determined
 from the Kind property.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="WarningKeyword">
      <MemberSignature Language="C#" Value="WarningKeyword" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind WarningKeyword = unsigned int16(626)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.WarningKeyword" />
      <MemberSignature Language="VB.NET" Value="WarningKeyword" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>626</MemberValue>
      <Docs>
        <summary>
 Represents a single keyword in a VB program. Which keyword can be determined
 from the Kind property.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="WendKeyword">
      <MemberSignature Language="C#" Value="WendKeyword" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind WendKeyword = unsigned int16(583)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.WendKeyword" />
      <MemberSignature Language="VB.NET" Value="WendKeyword" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>583</MemberValue>
      <Docs>
        <summary>
 Represents a single keyword in a VB program. Which keyword can be determined
 from the Kind property.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="WhenKeyword">
      <MemberSignature Language="C#" Value="WhenKeyword" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind WhenKeyword = unsigned int16(571)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.WhenKeyword" />
      <MemberSignature Language="VB.NET" Value="WhenKeyword" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>571</MemberValue>
      <Docs>
        <summary>
 Represents a single keyword in a VB program. Which keyword can be determined
 from the Kind property.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="WhereClause">
      <MemberSignature Language="C#" Value="WhereClause" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind WhereClause = unsigned int16(363)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.WhereClause" />
      <MemberSignature Language="VB.NET" Value="WhereClause" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>363</MemberValue>
      <Docs>
        <summary>
 Represents a "Where" query operator.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="WhereKeyword">
      <MemberSignature Language="C#" Value="WhereKeyword" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind WhereKeyword = unsigned int16(627)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.WhereKeyword" />
      <MemberSignature Language="VB.NET" Value="WhereKeyword" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>627</MemberValue>
      <Docs>
        <summary>
 Represents a single keyword in a VB program. Which keyword can be determined
 from the Kind property.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="WhileBlock">
      <MemberSignature Language="C#" Value="WhileBlock" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind WhileBlock = unsigned int16(141)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.WhileBlock" />
      <MemberSignature Language="VB.NET" Value="WhileBlock" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>141</MemberValue>
      <Docs>
        <summary>
 Represents a While...End While statement, including the While, body and End
 While.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="WhileClause">
      <MemberSignature Language="C#" Value="WhileClause" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind WhileClause = unsigned int16(776)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.WhileClause" />
      <MemberSignature Language="VB.NET" Value="WhileClause" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>776</MemberValue>
      <Docs>
        <summary>
 Represents a "While ..." clause of a "Do" or "Loop" statement.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="WhileKeyword">
      <MemberSignature Language="C#" Value="WhileKeyword" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind WhileKeyword = unsigned int16(572)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.WhileKeyword" />
      <MemberSignature Language="VB.NET" Value="WhileKeyword" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>572</MemberValue>
      <Docs>
        <summary>
 Represents a single keyword in a VB program. Which keyword can be determined
 from the Kind property.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="WhileStatement">
      <MemberSignature Language="C#" Value="WhileStatement" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind WhileStatement = unsigned int16(234)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.WhileStatement" />
      <MemberSignature Language="VB.NET" Value="WhileStatement" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>234</MemberValue>
      <Docs>
        <summary>To be added.</summary>
      </Docs>
    </Member>
    <Member MemberName="WhitespaceTrivia">
      <MemberSignature Language="C#" Value="WhitespaceTrivia" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind WhitespaceTrivia = unsigned int16(729)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.WhitespaceTrivia" />
      <MemberSignature Language="VB.NET" Value="WhitespaceTrivia" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>729</MemberValue>
      <Docs>
        <summary>
 Represents true whitespace: spaces, tabs, newlines and the like.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="WideningKeyword">
      <MemberSignature Language="C#" Value="WideningKeyword" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind WideningKeyword = unsigned int16(573)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.WideningKeyword" />
      <MemberSignature Language="VB.NET" Value="WideningKeyword" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>573</MemberValue>
      <Docs>
        <summary>
 Represents a single keyword in a VB program. Which keyword can be determined
 from the Kind property.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="WithBlock">
      <MemberSignature Language="C#" Value="WithBlock" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind WithBlock = unsigned int16(146)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.WithBlock" />
      <MemberSignature Language="VB.NET" Value="WithBlock" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>146</MemberValue>
      <Docs>
        <summary>
 Represents a With...End With block, include the With statement, the body of the
 block and the End With statement.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="WithEventsEventContainer">
      <MemberSignature Language="C#" Value="WithEventsEventContainer" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind WithEventsEventContainer = unsigned int16(115)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.WithEventsEventContainer" />
      <MemberSignature Language="VB.NET" Value="WithEventsEventContainer" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>115</MemberValue>
      <Docs>
        <summary>
 Represents event container that refers to a WithEvents member.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="WithEventsKeyword">
      <MemberSignature Language="C#" Value="WithEventsKeyword" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind WithEventsKeyword = unsigned int16(575)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.WithEventsKeyword" />
      <MemberSignature Language="VB.NET" Value="WithEventsKeyword" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>575</MemberValue>
      <Docs>
        <summary>
 Represents a single keyword in a VB program. Which keyword can be determined
 from the Kind property.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="WithEventsPropertyEventContainer">
      <MemberSignature Language="C#" Value="WithEventsPropertyEventContainer" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind WithEventsPropertyEventContainer = unsigned int16(116)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.WithEventsPropertyEventContainer" />
      <MemberSignature Language="VB.NET" Value="WithEventsPropertyEventContainer" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>116</MemberValue>
      <Docs>
        <summary>
 Represents event container that refers to a WithEvents member's property.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="WithKeyword">
      <MemberSignature Language="C#" Value="WithKeyword" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind WithKeyword = unsigned int16(574)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.WithKeyword" />
      <MemberSignature Language="VB.NET" Value="WithKeyword" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>574</MemberValue>
      <Docs>
        <summary>
 Represents a single keyword in a VB program. Which keyword can be determined
 from the Kind property.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="WithStatement">
      <MemberSignature Language="C#" Value="WithStatement" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind WithStatement = unsigned int16(265)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.WithStatement" />
      <MemberSignature Language="VB.NET" Value="WithStatement" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>265</MemberValue>
      <Docs>
        <summary>
 Represents a "With" statement. This statement always occurs as the
 BeginStatement of a WithBlock, and the body of the With is the Body of that
 WithBlock.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="WriteOnlyKeyword">
      <MemberSignature Language="C#" Value="WriteOnlyKeyword" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind WriteOnlyKeyword = unsigned int16(578)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.WriteOnlyKeyword" />
      <MemberSignature Language="VB.NET" Value="WriteOnlyKeyword" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>578</MemberValue>
      <Docs>
        <summary>
 Represents a single keyword in a VB program. Which keyword can be determined
 from the Kind property.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="XmlAttribute">
      <MemberSignature Language="C#" Value="XmlAttribute" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind XmlAttribute = unsigned int16(386)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.XmlAttribute" />
      <MemberSignature Language="VB.NET" Value="XmlAttribute" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>386</MemberValue>
      <Docs>
        <summary>
 Represents an XML attribute in an XML literal expression.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="XmlAttributeAccessExpression">
      <MemberSignature Language="C#" Value="XmlAttributeAccessExpression" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind XmlAttributeAccessExpression = unsigned int16(295)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.XmlAttributeAccessExpression" />
      <MemberSignature Language="VB.NET" Value="XmlAttributeAccessExpression" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>295</MemberValue>
      <Docs>
        <summary>
 Represents an XML member element access (node.&lt;Element&gt;), attribute
 access (node.@Attribute) or descendants access (node...&lt;Descendant&gt;). The
 Kind property determines which kind of access.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="XmlBracketedName">
      <MemberSignature Language="C#" Value="XmlBracketedName" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind XmlBracketedName = unsigned int16(390)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.XmlBracketedName" />
      <MemberSignature Language="VB.NET" Value="XmlBracketedName" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>390</MemberValue>
      <Docs>
        <summary>
 Represents an XML name of the form &lt;xml-name&gt; appearing in source as part
 of an XML literal or member access expression or an XML namespace import
 clause.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="XmlCDataSection">
      <MemberSignature Language="C#" Value="XmlCDataSection" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind XmlCDataSection = unsigned int16(394)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.XmlCDataSection" />
      <MemberSignature Language="VB.NET" Value="XmlCDataSection" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>394</MemberValue>
      <Docs>
        <summary>
 Represents an XML CDATA section in an XML literal expression.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="XmlComment">
      <MemberSignature Language="C#" Value="XmlComment" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind XmlComment = unsigned int16(392)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.XmlComment" />
      <MemberSignature Language="VB.NET" Value="XmlComment" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>392</MemberValue>
      <Docs>
        <summary>
 Represents an XML comment of the form &lt;!-- Comment --&gt; appearing in an
 XML literal expression.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="XmlCrefAttribute">
      <MemberSignature Language="C#" Value="XmlCrefAttribute" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind XmlCrefAttribute = unsigned int16(711)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.XmlCrefAttribute" />
      <MemberSignature Language="VB.NET" Value="XmlCrefAttribute" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>711</MemberValue>
      <Docs>
        <summary>
 A symbol referenced by a cref attribute (e.g. in a &lt;see&gt; or
 &lt;seealso&gt; documentation comment tag). For example, the M in &lt;see
 cref="M" /&gt;.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="XmlDeclaration">
      <MemberSignature Language="C#" Value="XmlDeclaration" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind XmlDeclaration = unsigned int16(379)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.XmlDeclaration" />
      <MemberSignature Language="VB.NET" Value="XmlDeclaration" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>379</MemberValue>
      <Docs>
        <summary>
 Represents the XML declaration prologue in an XML literal expression.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="XmlDeclarationOption">
      <MemberSignature Language="C#" Value="XmlDeclarationOption" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind XmlDeclarationOption = unsigned int16(380)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.XmlDeclarationOption" />
      <MemberSignature Language="VB.NET" Value="XmlDeclarationOption" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>380</MemberValue>
      <Docs>
        <summary>
 Represents an XML document prologue option - version, encoding, standalone or
 whitespace in an XML literal expression.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="XmlDescendantAccessExpression">
      <MemberSignature Language="C#" Value="XmlDescendantAccessExpression" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind XmlDescendantAccessExpression = unsigned int16(294)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.XmlDescendantAccessExpression" />
      <MemberSignature Language="VB.NET" Value="XmlDescendantAccessExpression" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>294</MemberValue>
      <Docs>
        <summary>
 Represents an XML member element access (node.&lt;Element&gt;), attribute
 access (node.@Attribute) or descendants access (node...&lt;Descendant&gt;). The
 Kind property determines which kind of access.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="XmlDocument">
      <MemberSignature Language="C#" Value="XmlDocument" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind XmlDocument = unsigned int16(378)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.XmlDocument" />
      <MemberSignature Language="VB.NET" Value="XmlDocument" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>378</MemberValue>
      <Docs>
        <summary>
 Represents an XML Document literal expression.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="XmlElement">
      <MemberSignature Language="C#" Value="XmlElement" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind XmlElement = unsigned int16(381)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.XmlElement" />
      <MemberSignature Language="VB.NET" Value="XmlElement" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>381</MemberValue>
      <Docs>
        <summary>
 Represents an XML element with content in an XML literal expression.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="XmlElementAccessExpression">
      <MemberSignature Language="C#" Value="XmlElementAccessExpression" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind XmlElementAccessExpression = unsigned int16(293)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.XmlElementAccessExpression" />
      <MemberSignature Language="VB.NET" Value="XmlElementAccessExpression" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>293</MemberValue>
      <Docs>
        <summary>
 Represents an XML member element access (node.&lt;Element&gt;), attribute
 access (node.@Attribute) or descendants access (node...&lt;Descendant&gt;). The
 Kind property determines which kind of access.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="XmlElementEndTag">
      <MemberSignature Language="C#" Value="XmlElementEndTag" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind XmlElementEndTag = unsigned int16(384)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.XmlElementEndTag" />
      <MemberSignature Language="VB.NET" Value="XmlElementEndTag" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>384</MemberValue>
      <Docs>
        <summary>
 Represents the end tag of an XML element of the form &lt;/element&gt;.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="XmlElementStartTag">
      <MemberSignature Language="C#" Value="XmlElementStartTag" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind XmlElementStartTag = unsigned int16(383)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.XmlElementStartTag" />
      <MemberSignature Language="VB.NET" Value="XmlElementStartTag" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>383</MemberValue>
      <Docs>
        <summary>
 Represents the start tag of an XML element of the form &lt;element&gt;.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="XmlEmbeddedExpression">
      <MemberSignature Language="C#" Value="XmlEmbeddedExpression" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind XmlEmbeddedExpression = unsigned int16(395)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.XmlEmbeddedExpression" />
      <MemberSignature Language="VB.NET" Value="XmlEmbeddedExpression" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>395</MemberValue>
      <Docs>
        <summary>
 Represents an embedded expression in an XML literal e.g. '&lt;name&gt;&lt;%=
 obj.Name =%&gt;&lt;/name&gt;'.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="XmlEmptyElement">
      <MemberSignature Language="C#" Value="XmlEmptyElement" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind XmlEmptyElement = unsigned int16(385)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.XmlEmptyElement" />
      <MemberSignature Language="VB.NET" Value="XmlEmptyElement" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>385</MemberValue>
      <Docs>
        <summary>
 Represents an empty XML element of the form &lt;element /&gt;
 </summary>
      </Docs>
    </Member>
    <Member MemberName="XmlEntityLiteralToken">
      <MemberSignature Language="C#" Value="XmlEntityLiteralToken" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind XmlEntityLiteralToken = unsigned int16(696)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.XmlEntityLiteralToken" />
      <MemberSignature Language="VB.NET" Value="XmlEntityLiteralToken" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>696</MemberValue>
      <Docs>
        <summary>
 Represents character data in Xml content also known as PCData or in an Xml
 attribute value. All text is here for now even text that does not need
 normalization such as comment, pi and cdata text.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="XmlKeyword">
      <MemberSignature Language="C#" Value="XmlKeyword" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind XmlKeyword = unsigned int16(629)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.XmlKeyword" />
      <MemberSignature Language="VB.NET" Value="XmlKeyword" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>629</MemberValue>
      <Docs>
        <summary>
 Represents a single keyword in a VB program. Which keyword can be determined
 from the Kind property.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="XmlName">
      <MemberSignature Language="C#" Value="XmlName" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind XmlName = unsigned int16(389)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.XmlName" />
      <MemberSignature Language="VB.NET" Value="XmlName" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>389</MemberValue>
      <Docs>
        <summary>
 Represents an XML name of the form 'name' or 'namespace:name' appearing in
 source as part of an XML literal or member access expression or an XML
 namespace import clause.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="XmlNameAttribute">
      <MemberSignature Language="C#" Value="XmlNameAttribute" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind XmlNameAttribute = unsigned int16(712)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.XmlNameAttribute" />
      <MemberSignature Language="VB.NET" Value="XmlNameAttribute" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>712</MemberValue>
      <Docs>
        <summary>
 A param or type param symbol referenced by a name attribute (e.g. in a
 &lt;param&gt; or &lt;typeparam&gt; documentation comment tag). For example, the
 M in &lt;param name="M" /&gt;.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="XmlNamespaceImportsClause">
      <MemberSignature Language="C#" Value="XmlNamespaceImportsClause" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind XmlNamespaceImportsClause = unsigned int16(45)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.XmlNamespaceImportsClause" />
      <MemberSignature Language="VB.NET" Value="XmlNamespaceImportsClause" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>45</MemberValue>
      <Docs>
        <summary>
 Defines a XML namespace for XML expressions.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="XmlNameToken">
      <MemberSignature Language="C#" Value="XmlNameToken" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind XmlNameToken = unsigned int16(694)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.XmlNameToken" />
      <MemberSignature Language="VB.NET" Value="XmlNameToken" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>694</MemberValue>
      <Docs>
        <summary>
 Represents an Xml NCName per Namespaces in XML 1.0
 </summary>
      </Docs>
    </Member>
    <Member MemberName="XmlPrefix">
      <MemberSignature Language="C#" Value="XmlPrefix" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind XmlPrefix = unsigned int16(391)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.XmlPrefix" />
      <MemberSignature Language="VB.NET" Value="XmlPrefix" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>391</MemberValue>
      <Docs>
        <summary>
 Represents an XML namespace prefix of the form 'prefix:' as in xml:ns="".
 </summary>
      </Docs>
    </Member>
    <Member MemberName="XmlPrefixName">
      <MemberSignature Language="C#" Value="XmlPrefixName" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind XmlPrefixName = unsigned int16(388)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.XmlPrefixName" />
      <MemberSignature Language="VB.NET" Value="XmlPrefixName" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>388</MemberValue>
      <Docs>
        <summary>
 Represents an XML name of the form 'name' appearing in GetXmlNamespace().
 </summary>
      </Docs>
    </Member>
    <Member MemberName="XmlProcessingInstruction">
      <MemberSignature Language="C#" Value="XmlProcessingInstruction" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind XmlProcessingInstruction = unsigned int16(393)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.XmlProcessingInstruction" />
      <MemberSignature Language="VB.NET" Value="XmlProcessingInstruction" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>393</MemberValue>
      <Docs>
        <summary>
 Represents an XML processing instruction of the form '&lt;? XMLProcessingTarget
 XMLProcessingValue ?&gt;'.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="XmlString">
      <MemberSignature Language="C#" Value="XmlString" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind XmlString = unsigned int16(387)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.XmlString" />
      <MemberSignature Language="VB.NET" Value="XmlString" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>387</MemberValue>
      <Docs>
        <summary>
 Represents a string of XML characters embedded as the content of an XML
 element.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="XmlText">
      <MemberSignature Language="C#" Value="XmlText" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind XmlText = unsigned int16(382)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.XmlText" />
      <MemberSignature Language="VB.NET" Value="XmlText" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>382</MemberValue>
      <Docs>
        <summary>
 Represents Xml text.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="XmlTextLiteralToken">
      <MemberSignature Language="C#" Value="XmlTextLiteralToken" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind XmlTextLiteralToken = unsigned int16(695)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.XmlTextLiteralToken" />
      <MemberSignature Language="VB.NET" Value="XmlTextLiteralToken" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>695</MemberValue>
      <Docs>
        <summary>
 Represents character data in Xml content also known as PCData or in an Xml
 attribute value. All text is here for now even text that does not need
 normalization such as comment, pi and cdata text.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="XorKeyword">
      <MemberSignature Language="C#" Value="XorKeyword" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind XorKeyword = unsigned int16(579)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.XorKeyword" />
      <MemberSignature Language="VB.NET" Value="XorKeyword" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>579</MemberValue>
      <Docs>
        <summary>
 Represents a single keyword in a VB program. Which keyword can be determined
 from the Kind property.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="YieldKeyword">
      <MemberSignature Language="C#" Value="YieldKeyword" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind YieldKeyword = unsigned int16(633)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.YieldKeyword" />
      <MemberSignature Language="VB.NET" Value="YieldKeyword" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>633</MemberValue>
      <Docs>
        <summary>
 Represents a single keyword in a VB program. Which keyword can be determined
 from the Kind property.
 </summary>
      </Docs>
    </Member>
    <Member MemberName="YieldStatement">
      <MemberSignature Language="C#" Value="YieldStatement" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind YieldStatement = unsigned int16(411)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.YieldStatement" />
      <MemberSignature Language="VB.NET" Value="YieldStatement" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <MemberValue>411</MemberValue>
      <Docs>
        <summary>
 Represent a Yield statement.
 </summary>
      </Docs>
    </Member>
  </Members>
</Type>