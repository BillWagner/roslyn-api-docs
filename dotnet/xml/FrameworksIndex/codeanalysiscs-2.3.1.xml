<?xml version="1.0" encoding="utf-8"?>
<Framework Name="codeanalysiscs-2.3.1">
  <Namespace Name="Microsoft.CodeAnalysis.CSharp">
    <Type Name="Microsoft.CodeAnalysis.CSharp.AwaitExpressionInfo" Id="T:Microsoft.CodeAnalysis.CSharp.AwaitExpressionInfo">
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.AwaitExpressionInfo.Equals(Microsoft.CodeAnalysis.CSharp.AwaitExpressionInfo)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.AwaitExpressionInfo.Equals(System.Object)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.AwaitExpressionInfo.GetHashCode" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.AwaitExpressionInfo.GetAwaiterMethod" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.AwaitExpressionInfo.GetResultMethod" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.AwaitExpressionInfo.IsCompletedProperty" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.AwaitExpressionInfo.IsDynamic" />
    </Type>
    <Type Name="Microsoft.CodeAnalysis.CSharp.Conversion" Id="T:Microsoft.CodeAnalysis.CSharp.Conversion">
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Conversion.Equals(Microsoft.CodeAnalysis.CSharp.Conversion)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Conversion.Equals(System.Object)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Conversion.GetHashCode" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Conversion.op_Equality(Microsoft.CodeAnalysis.CSharp.Conversion,Microsoft.CodeAnalysis.CSharp.Conversion)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Conversion.op_Inequality(Microsoft.CodeAnalysis.CSharp.Conversion,Microsoft.CodeAnalysis.CSharp.Conversion)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Conversion.ToString" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Conversion.Exists" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Conversion.IsAnonymousFunction" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Conversion.IsBoxing" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Conversion.IsConstantExpression" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Conversion.IsDynamic" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Conversion.IsEnumeration" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Conversion.IsExplicit" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Conversion.IsIdentity" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Conversion.IsImplicit" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Conversion.IsInterpolatedString" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Conversion.IsIntPtr" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Conversion.IsMethodGroup" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Conversion.IsNullable" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Conversion.IsNullLiteral" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Conversion.IsNumeric" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Conversion.IsPointer" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Conversion.IsReference" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Conversion.IsThrow" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Conversion.IsTupleConversion" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Conversion.IsTupleLiteralConversion" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Conversion.IsUnboxing" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Conversion.IsUserDefined" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Conversion.MethodSymbol" />
    </Type>
    <Type Name="Microsoft.CodeAnalysis.CSharp.CSharpCommandLineArguments" Id="T:Microsoft.CodeAnalysis.CSharp.CSharpCommandLineArguments">
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.CSharpCommandLineArguments.CompilationOptions" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.CSharpCommandLineArguments.CompilationOptionsCore" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.CSharpCommandLineArguments.ParseOptions" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.CSharpCommandLineArguments.ParseOptionsCore" />
    </Type>
    <Type Name="Microsoft.CodeAnalysis.CSharp.CSharpCommandLineParser" Id="T:Microsoft.CodeAnalysis.CSharp.CSharpCommandLineParser">
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpCommandLineParser.Parse(System.Collections.Generic.IEnumerable{System.String},System.String,System.String,System.String)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpCommandLineParser.ParseConditionalCompilationSymbols(System.String,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.Diagnostic}@)" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.CSharpCommandLineParser.Default" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.CSharpCommandLineParser.RegularFileExtension" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.CSharpCommandLineParser.ScriptFileExtension" />
    </Type>
    <Type Name="Microsoft.CodeAnalysis.CSharp.CSharpCompilation" Id="T:Microsoft.CodeAnalysis.CSharp.CSharpCompilation">
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpCompilation.AddReferences(Microsoft.CodeAnalysis.MetadataReference[])" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpCompilation.AddReferences(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.MetadataReference})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpCompilation.AddSyntaxTrees(Microsoft.CodeAnalysis.SyntaxTree[])" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpCompilation.AddSyntaxTrees(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxTree})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpCompilation.AppendDefaultVersionResource(System.IO.Stream)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpCompilation.ClassifyConversion(Microsoft.CodeAnalysis.ITypeSymbol,Microsoft.CodeAnalysis.ITypeSymbol)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpCompilation.Clone" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpCompilation.CommonAddSyntaxTrees(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxTree})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpCompilation.CommonClone" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpCompilation.CommonContainsSyntaxTree(Microsoft.CodeAnalysis.SyntaxTree)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpCompilation.CommonCreateAnonymousTypeSymbol(System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.ITypeSymbol},System.Collections.Immutable.ImmutableArray{System.String},System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.Location},System.Collections.Immutable.ImmutableArray{System.Boolean})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpCompilation.CommonCreateArrayTypeSymbol(Microsoft.CodeAnalysis.ITypeSymbol,System.Int32)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpCompilation.CommonCreateErrorNamespaceSymbol(Microsoft.CodeAnalysis.INamespaceSymbol,System.String)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpCompilation.CommonCreateErrorTypeSymbol(Microsoft.CodeAnalysis.INamespaceOrTypeSymbol,System.String,System.Int32)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpCompilation.CommonCreatePointerTypeSymbol(Microsoft.CodeAnalysis.ITypeSymbol)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpCompilation.CommonCreateTupleTypeSymbol(Microsoft.CodeAnalysis.INamedTypeSymbol,System.Collections.Immutable.ImmutableArray{System.String},System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.Location})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpCompilation.CommonCreateTupleTypeSymbol(System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.ITypeSymbol},System.Collections.Immutable.ImmutableArray{System.String},System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.Location})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpCompilation.CommonGetAssemblyOrModuleSymbol(Microsoft.CodeAnalysis.MetadataReference)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpCompilation.CommonGetCompilationNamespace(Microsoft.CodeAnalysis.INamespaceSymbol)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpCompilation.CommonGetEntryPoint(System.Threading.CancellationToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpCompilation.CommonGetSemanticModel(Microsoft.CodeAnalysis.SyntaxTree,System.Boolean)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpCompilation.CommonGetSpecialType(Microsoft.CodeAnalysis.SpecialType)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpCompilation.CommonGetTypeByMetadataName(System.String)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpCompilation.CommonRemoveAllSyntaxTrees" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpCompilation.CommonRemoveSyntaxTrees(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxTree})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpCompilation.CommonReplaceSyntaxTree(Microsoft.CodeAnalysis.SyntaxTree,Microsoft.CodeAnalysis.SyntaxTree)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpCompilation.CommonWithAssemblyName(System.String)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpCompilation.CommonWithOptions(Microsoft.CodeAnalysis.CompilationOptions)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpCompilation.CommonWithReferences(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.MetadataReference})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpCompilation.CommonWithScriptCompilationInfo(Microsoft.CodeAnalysis.ScriptCompilationInfo)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpCompilation.ContainsSymbolsWithName(System.Func{System.String,System.Boolean},Microsoft.CodeAnalysis.SymbolFilter,System.Threading.CancellationToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpCompilation.ContainsSyntaxTree(Microsoft.CodeAnalysis.SyntaxTree)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpCompilation.Create(System.String,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxTree},System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.MetadataReference},Microsoft.CodeAnalysis.CSharp.CSharpCompilationOptions)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpCompilation.CreateScriptCompilation(System.String,Microsoft.CodeAnalysis.SyntaxTree,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.MetadataReference},Microsoft.CodeAnalysis.CSharp.CSharpCompilationOptions,Microsoft.CodeAnalysis.CSharp.CSharpCompilation,System.Type,System.Type)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpCompilation.GetDeclarationDiagnostics(System.Threading.CancellationToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpCompilation.GetDiagnostics(System.Threading.CancellationToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpCompilation.GetDirectiveReference(Microsoft.CodeAnalysis.CSharp.Syntax.ReferenceDirectiveTriviaSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpCompilation.GetMetadataReference(Microsoft.CodeAnalysis.IAssemblySymbol)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpCompilation.GetMethodBodyDiagnostics(System.Threading.CancellationToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpCompilation.GetParseDiagnostics(System.Threading.CancellationToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpCompilation.GetSemanticModel(Microsoft.CodeAnalysis.SyntaxTree,System.Boolean)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpCompilation.GetSymbolsWithName(System.Func{System.String,System.Boolean},Microsoft.CodeAnalysis.SymbolFilter,System.Threading.CancellationToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpCompilation.RemoveAllReferences" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpCompilation.RemoveAllSyntaxTrees" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpCompilation.RemoveReferences(Microsoft.CodeAnalysis.MetadataReference[])" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpCompilation.RemoveReferences(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.MetadataReference})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpCompilation.RemoveSyntaxTrees(Microsoft.CodeAnalysis.SyntaxTree[])" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpCompilation.RemoveSyntaxTrees(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxTree})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpCompilation.ReplaceReference(Microsoft.CodeAnalysis.MetadataReference,Microsoft.CodeAnalysis.MetadataReference)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpCompilation.ReplaceSyntaxTree(Microsoft.CodeAnalysis.SyntaxTree,Microsoft.CodeAnalysis.SyntaxTree)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpCompilation.ToMetadataReference(System.Collections.Immutable.ImmutableArray{System.String},System.Boolean)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpCompilation.WithAssemblyName(System.String)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpCompilation.WithOptions(Microsoft.CodeAnalysis.CSharp.CSharpCompilationOptions)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpCompilation.WithReferences(Microsoft.CodeAnalysis.MetadataReference[])" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpCompilation.WithReferences(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.MetadataReference})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpCompilation.WithScriptCompilationInfo(Microsoft.CodeAnalysis.CSharp.CSharpScriptCompilationInfo)" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.CSharpCompilation.CommonAssembly" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.CSharpCompilation.CommonDynamicType" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.CSharpCompilation.CommonGlobalNamespace" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.CSharpCompilation.CommonObjectType" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.CSharpCompilation.CommonOptions" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.CSharpCompilation.CommonScriptClass" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.CSharpCompilation.CommonSourceModule" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.CSharpCompilation.CommonSyntaxTrees" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.CSharpCompilation.DirectiveReferences" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.CSharpCompilation.IsCaseSensitive" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.CSharpCompilation.Language" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.CSharpCompilation.LanguageVersion" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.CSharpCompilation.Options" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.CSharpCompilation.ReferencedAssemblyNames" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.CSharpCompilation.ScriptCompilationInfo" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.CSharpCompilation.SyntaxTrees" />
    </Type>
    <Type Name="Microsoft.CodeAnalysis.CSharp.CSharpCompilationOptions" Id="T:Microsoft.CodeAnalysis.CSharp.CSharpCompilationOptions">
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpCompilationOptions.#ctor(Microsoft.CodeAnalysis.OutputKind,System.Boolean,System.String,System.String,System.String,System.Collections.Generic.IEnumerable{System.String},Microsoft.CodeAnalysis.OptimizationLevel,System.Boolean,System.Boolean,System.String,System.String,System.Collections.Immutable.ImmutableArray{System.Byte},System.Nullable{System.Boolean},Microsoft.CodeAnalysis.Platform,Microsoft.CodeAnalysis.ReportDiagnostic,System.Int32,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,Microsoft.CodeAnalysis.ReportDiagnostic}},System.Boolean,System.Boolean,Microsoft.CodeAnalysis.XmlReferenceResolver,Microsoft.CodeAnalysis.SourceReferenceResolver,Microsoft.CodeAnalysis.MetadataReferenceResolver,Microsoft.CodeAnalysis.AssemblyIdentityComparer,Microsoft.CodeAnalysis.StrongNameProvider)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpCompilationOptions.#ctor(Microsoft.CodeAnalysis.OutputKind,System.Boolean,System.String,System.String,System.String,System.Collections.Generic.IEnumerable{System.String},Microsoft.CodeAnalysis.OptimizationLevel,System.Boolean,System.Boolean,System.String,System.String,System.Collections.Immutable.ImmutableArray{System.Byte},System.Nullable{System.Boolean},Microsoft.CodeAnalysis.Platform,Microsoft.CodeAnalysis.ReportDiagnostic,System.Int32,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,Microsoft.CodeAnalysis.ReportDiagnostic}},System.Boolean,System.Boolean,Microsoft.CodeAnalysis.XmlReferenceResolver,Microsoft.CodeAnalysis.SourceReferenceResolver,Microsoft.CodeAnalysis.MetadataReferenceResolver,Microsoft.CodeAnalysis.AssemblyIdentityComparer,Microsoft.CodeAnalysis.StrongNameProvider,System.Boolean)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpCompilationOptions.#ctor(Microsoft.CodeAnalysis.OutputKind,System.String,System.String,System.String,System.Collections.Generic.IEnumerable{System.String},Microsoft.CodeAnalysis.OptimizationLevel,System.Boolean,System.Boolean,System.String,System.String,System.Collections.Immutable.ImmutableArray{System.Byte},System.Nullable{System.Boolean},Microsoft.CodeAnalysis.Platform,Microsoft.CodeAnalysis.ReportDiagnostic,System.Int32,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,Microsoft.CodeAnalysis.ReportDiagnostic}},System.Boolean,Microsoft.CodeAnalysis.XmlReferenceResolver,Microsoft.CodeAnalysis.SourceReferenceResolver,Microsoft.CodeAnalysis.MetadataReferenceResolver,Microsoft.CodeAnalysis.AssemblyIdentityComparer,Microsoft.CodeAnalysis.StrongNameProvider)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpCompilationOptions.#ctor(Microsoft.CodeAnalysis.OutputKind,System.String,System.String,System.String,System.Collections.Generic.IEnumerable{System.String},Microsoft.CodeAnalysis.OptimizationLevel,System.Boolean,System.Boolean,System.String,System.String,System.Collections.Immutable.ImmutableArray{System.Byte},System.Nullable{System.Boolean},Microsoft.CodeAnalysis.Platform,Microsoft.CodeAnalysis.ReportDiagnostic,System.Int32,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,Microsoft.CodeAnalysis.ReportDiagnostic}},System.Boolean,System.Boolean,Microsoft.CodeAnalysis.XmlReferenceResolver,Microsoft.CodeAnalysis.SourceReferenceResolver,Microsoft.CodeAnalysis.MetadataReferenceResolver,Microsoft.CodeAnalysis.AssemblyIdentityComparer,Microsoft.CodeAnalysis.StrongNameProvider)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpCompilationOptions.CommonWithAssemblyIdentityComparer(Microsoft.CodeAnalysis.AssemblyIdentityComparer)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpCompilationOptions.CommonWithCheckOverflow(System.Boolean)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpCompilationOptions.CommonWithConcurrentBuild(System.Boolean)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpCompilationOptions.CommonWithCryptoKeyContainer(System.String)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpCompilationOptions.CommonWithCryptoKeyFile(System.String)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpCompilationOptions.CommonWithCryptoPublicKey(System.Collections.Immutable.ImmutableArray{System.Byte})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpCompilationOptions.CommonWithDelaySign(System.Nullable{System.Boolean})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpCompilationOptions.CommonWithDeterministic(System.Boolean)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpCompilationOptions.CommonWithFeatures(System.Collections.Immutable.ImmutableArray{System.String})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpCompilationOptions.CommonWithGeneralDiagnosticOption(Microsoft.CodeAnalysis.ReportDiagnostic)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpCompilationOptions.CommonWithMainTypeName(System.String)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpCompilationOptions.CommonWithMetadataReferenceResolver(Microsoft.CodeAnalysis.MetadataReferenceResolver)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpCompilationOptions.CommonWithModuleName(System.String)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpCompilationOptions.CommonWithOptimizationLevel(Microsoft.CodeAnalysis.OptimizationLevel)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpCompilationOptions.CommonWithOutputKind(Microsoft.CodeAnalysis.OutputKind)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpCompilationOptions.CommonWithPlatform(Microsoft.CodeAnalysis.Platform)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpCompilationOptions.CommonWithPublicSign(System.Boolean)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpCompilationOptions.CommonWithReportSuppressedDiagnostics(System.Boolean)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpCompilationOptions.CommonWithScriptClassName(System.String)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpCompilationOptions.CommonWithSourceReferenceResolver(Microsoft.CodeAnalysis.SourceReferenceResolver)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpCompilationOptions.CommonWithSpecificDiagnosticOptions(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,Microsoft.CodeAnalysis.ReportDiagnostic}})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpCompilationOptions.CommonWithSpecificDiagnosticOptions(System.Collections.Immutable.ImmutableDictionary{System.String,Microsoft.CodeAnalysis.ReportDiagnostic})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpCompilationOptions.CommonWithStrongNameProvider(Microsoft.CodeAnalysis.StrongNameProvider)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpCompilationOptions.CommonWithXmlReferenceResolver(Microsoft.CodeAnalysis.XmlReferenceResolver)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpCompilationOptions.Equals(Microsoft.CodeAnalysis.CSharp.CSharpCompilationOptions)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpCompilationOptions.Equals(System.Object)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpCompilationOptions.GetHashCode" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpCompilationOptions.WithAllowUnsafe(System.Boolean)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpCompilationOptions.WithAssemblyIdentityComparer(Microsoft.CodeAnalysis.AssemblyIdentityComparer)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpCompilationOptions.WithConcurrentBuild(System.Boolean)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpCompilationOptions.WithCryptoKeyContainer(System.String)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpCompilationOptions.WithCryptoKeyFile(System.String)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpCompilationOptions.WithCryptoPublicKey(System.Collections.Immutable.ImmutableArray{System.Byte})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpCompilationOptions.WithDelaySign(System.Nullable{System.Boolean})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpCompilationOptions.WithDeterministic(System.Boolean)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpCompilationOptions.WithGeneralDiagnosticOption(Microsoft.CodeAnalysis.ReportDiagnostic)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpCompilationOptions.WithMainTypeName(System.String)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpCompilationOptions.WithMetadataReferenceResolver(Microsoft.CodeAnalysis.MetadataReferenceResolver)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpCompilationOptions.WithModuleName(System.String)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpCompilationOptions.WithOptimizationLevel(Microsoft.CodeAnalysis.OptimizationLevel)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpCompilationOptions.WithOutputKind(Microsoft.CodeAnalysis.OutputKind)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpCompilationOptions.WithOverflowChecks(System.Boolean)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpCompilationOptions.WithPlatform(Microsoft.CodeAnalysis.Platform)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpCompilationOptions.WithPublicSign(System.Boolean)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpCompilationOptions.WithReportSuppressedDiagnostics(System.Boolean)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpCompilationOptions.WithScriptClassName(System.String)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpCompilationOptions.WithSourceReferenceResolver(Microsoft.CodeAnalysis.SourceReferenceResolver)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpCompilationOptions.WithSpecificDiagnosticOptions(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,Microsoft.CodeAnalysis.ReportDiagnostic}})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpCompilationOptions.WithSpecificDiagnosticOptions(System.Collections.Immutable.ImmutableDictionary{System.String,Microsoft.CodeAnalysis.ReportDiagnostic})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpCompilationOptions.WithStrongNameProvider(Microsoft.CodeAnalysis.StrongNameProvider)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpCompilationOptions.WithUsings(System.Collections.Generic.IEnumerable{System.String})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpCompilationOptions.WithUsings(System.Collections.Immutable.ImmutableArray{System.String})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpCompilationOptions.WithUsings(System.String[])" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpCompilationOptions.WithWarningLevel(System.Int32)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpCompilationOptions.WithXmlReferenceResolver(Microsoft.CodeAnalysis.XmlReferenceResolver)" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.CSharpCompilationOptions.AllowUnsafe" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.CSharpCompilationOptions.Language" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.CSharpCompilationOptions.Usings" />
    </Type>
    <Type Name="Microsoft.CodeAnalysis.CSharp.CSharpDiagnosticFormatter" Id="T:Microsoft.CodeAnalysis.CSharp.CSharpDiagnosticFormatter">
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.CSharpDiagnosticFormatter.Instance" />
    </Type>
    <Type Name="Microsoft.CodeAnalysis.CSharp.CSharpExtensions" Id="T:Microsoft.CodeAnalysis.CSharp.CSharpExtensions">
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpExtensions.AnalyzeControlFlow(Microsoft.CodeAnalysis.SemanticModel,Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpExtensions.AnalyzeControlFlow(Microsoft.CodeAnalysis.SemanticModel,Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpExtensions.AnalyzeDataFlow(Microsoft.CodeAnalysis.SemanticModel,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpExtensions.AnalyzeDataFlow(Microsoft.CodeAnalysis.SemanticModel,Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpExtensions.AnalyzeDataFlow(Microsoft.CodeAnalysis.SemanticModel,Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpExtensions.ClassifyConversion(Microsoft.CodeAnalysis.Compilation,Microsoft.CodeAnalysis.ITypeSymbol,Microsoft.CodeAnalysis.ITypeSymbol)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpExtensions.ClassifyConversion(Microsoft.CodeAnalysis.SemanticModel,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.ITypeSymbol,System.Boolean)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpExtensions.ClassifyConversion(Microsoft.CodeAnalysis.SemanticModel,System.Int32,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.ITypeSymbol,System.Boolean)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpExtensions.GetAliasInfo(Microsoft.CodeAnalysis.SemanticModel,Microsoft.CodeAnalysis.CSharp.Syntax.IdentifierNameSyntax,System.Threading.CancellationToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpExtensions.GetAwaitExpressionInfo(Microsoft.CodeAnalysis.SemanticModel,Microsoft.CodeAnalysis.CSharp.Syntax.AwaitExpressionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpExtensions.GetCollectionInitializerSymbolInfo(Microsoft.CodeAnalysis.SemanticModel,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,System.Threading.CancellationToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpExtensions.GetCompilationUnitRoot(Microsoft.CodeAnalysis.SyntaxTree,System.Threading.CancellationToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpExtensions.GetConstantValue(Microsoft.CodeAnalysis.SemanticModel,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,System.Threading.CancellationToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpExtensions.GetConversion(Microsoft.CodeAnalysis.SemanticModel,Microsoft.CodeAnalysis.SyntaxNode,System.Threading.CancellationToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpExtensions.GetDeclaredSymbol(Microsoft.CodeAnalysis.SemanticModel,Microsoft.CodeAnalysis.CSharp.Syntax.AccessorDeclarationSyntax,System.Threading.CancellationToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpExtensions.GetDeclaredSymbol(Microsoft.CodeAnalysis.SemanticModel,Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousObjectCreationExpressionSyntax,System.Threading.CancellationToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpExtensions.GetDeclaredSymbol(Microsoft.CodeAnalysis.SemanticModel,Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousObjectMemberDeclaratorSyntax,System.Threading.CancellationToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpExtensions.GetDeclaredSymbol(Microsoft.CodeAnalysis.SemanticModel,Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentSyntax,System.Threading.CancellationToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpExtensions.GetDeclaredSymbol(Microsoft.CodeAnalysis.SemanticModel,Microsoft.CodeAnalysis.CSharp.Syntax.BaseMethodDeclarationSyntax,System.Threading.CancellationToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpExtensions.GetDeclaredSymbol(Microsoft.CodeAnalysis.SemanticModel,Microsoft.CodeAnalysis.CSharp.Syntax.BasePropertyDeclarationSyntax,System.Threading.CancellationToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpExtensions.GetDeclaredSymbol(Microsoft.CodeAnalysis.SemanticModel,Microsoft.CodeAnalysis.CSharp.Syntax.BaseTypeDeclarationSyntax,System.Threading.CancellationToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpExtensions.GetDeclaredSymbol(Microsoft.CodeAnalysis.SemanticModel,Microsoft.CodeAnalysis.CSharp.Syntax.CatchDeclarationSyntax,System.Threading.CancellationToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpExtensions.GetDeclaredSymbol(Microsoft.CodeAnalysis.SemanticModel,Microsoft.CodeAnalysis.CSharp.Syntax.DelegateDeclarationSyntax,System.Threading.CancellationToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpExtensions.GetDeclaredSymbol(Microsoft.CodeAnalysis.SemanticModel,Microsoft.CodeAnalysis.CSharp.Syntax.EnumMemberDeclarationSyntax,System.Threading.CancellationToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpExtensions.GetDeclaredSymbol(Microsoft.CodeAnalysis.SemanticModel,Microsoft.CodeAnalysis.CSharp.Syntax.EventDeclarationSyntax,System.Threading.CancellationToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpExtensions.GetDeclaredSymbol(Microsoft.CodeAnalysis.SemanticModel,Microsoft.CodeAnalysis.CSharp.Syntax.ExternAliasDirectiveSyntax,System.Threading.CancellationToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpExtensions.GetDeclaredSymbol(Microsoft.CodeAnalysis.SemanticModel,Microsoft.CodeAnalysis.CSharp.Syntax.ForEachStatementSyntax,System.Threading.CancellationToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpExtensions.GetDeclaredSymbol(Microsoft.CodeAnalysis.SemanticModel,Microsoft.CodeAnalysis.CSharp.Syntax.IndexerDeclarationSyntax,System.Threading.CancellationToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpExtensions.GetDeclaredSymbol(Microsoft.CodeAnalysis.SemanticModel,Microsoft.CodeAnalysis.CSharp.Syntax.JoinIntoClauseSyntax,System.Threading.CancellationToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpExtensions.GetDeclaredSymbol(Microsoft.CodeAnalysis.SemanticModel,Microsoft.CodeAnalysis.CSharp.Syntax.LabeledStatementSyntax,System.Threading.CancellationToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpExtensions.GetDeclaredSymbol(Microsoft.CodeAnalysis.SemanticModel,Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax,System.Threading.CancellationToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpExtensions.GetDeclaredSymbol(Microsoft.CodeAnalysis.SemanticModel,Microsoft.CodeAnalysis.CSharp.Syntax.NamespaceDeclarationSyntax,System.Threading.CancellationToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpExtensions.GetDeclaredSymbol(Microsoft.CodeAnalysis.SemanticModel,Microsoft.CodeAnalysis.CSharp.Syntax.ParameterSyntax,System.Threading.CancellationToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpExtensions.GetDeclaredSymbol(Microsoft.CodeAnalysis.SemanticModel,Microsoft.CodeAnalysis.CSharp.Syntax.PropertyDeclarationSyntax,System.Threading.CancellationToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpExtensions.GetDeclaredSymbol(Microsoft.CodeAnalysis.SemanticModel,Microsoft.CodeAnalysis.CSharp.Syntax.QueryClauseSyntax,System.Threading.CancellationToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpExtensions.GetDeclaredSymbol(Microsoft.CodeAnalysis.SemanticModel,Microsoft.CodeAnalysis.CSharp.Syntax.QueryContinuationSyntax,System.Threading.CancellationToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpExtensions.GetDeclaredSymbol(Microsoft.CodeAnalysis.SemanticModel,Microsoft.CodeAnalysis.CSharp.Syntax.SingleVariableDesignationSyntax,System.Threading.CancellationToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpExtensions.GetDeclaredSymbol(Microsoft.CodeAnalysis.SemanticModel,Microsoft.CodeAnalysis.CSharp.Syntax.SwitchLabelSyntax,System.Threading.CancellationToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpExtensions.GetDeclaredSymbol(Microsoft.CodeAnalysis.SemanticModel,Microsoft.CodeAnalysis.CSharp.Syntax.TupleElementSyntax,System.Threading.CancellationToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpExtensions.GetDeclaredSymbol(Microsoft.CodeAnalysis.SemanticModel,Microsoft.CodeAnalysis.CSharp.Syntax.TupleExpressionSyntax,System.Threading.CancellationToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpExtensions.GetDeclaredSymbol(Microsoft.CodeAnalysis.SemanticModel,Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterSyntax,System.Threading.CancellationToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpExtensions.GetDeclaredSymbol(Microsoft.CodeAnalysis.SemanticModel,Microsoft.CodeAnalysis.CSharp.Syntax.UsingDirectiveSyntax,System.Threading.CancellationToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpExtensions.GetDeclaredSymbol(Microsoft.CodeAnalysis.SemanticModel,Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclaratorSyntax,System.Threading.CancellationToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpExtensions.GetFirstDirective(Microsoft.CodeAnalysis.SyntaxNode,System.Func{Microsoft.CodeAnalysis.CSharp.Syntax.DirectiveTriviaSyntax,System.Boolean})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpExtensions.GetForEachStatementInfo(Microsoft.CodeAnalysis.SemanticModel,Microsoft.CodeAnalysis.CSharp.Syntax.CommonForEachStatementSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpExtensions.GetForEachStatementInfo(Microsoft.CodeAnalysis.SemanticModel,Microsoft.CodeAnalysis.CSharp.Syntax.ForEachStatementSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpExtensions.GetIndexerGroup(Microsoft.CodeAnalysis.SemanticModel,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,System.Threading.CancellationToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpExtensions.GetLastDirective(Microsoft.CodeAnalysis.SyntaxNode,System.Func{Microsoft.CodeAnalysis.CSharp.Syntax.DirectiveTriviaSyntax,System.Boolean})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpExtensions.GetMemberGroup(Microsoft.CodeAnalysis.SemanticModel,Microsoft.CodeAnalysis.CSharp.Syntax.AttributeSyntax,System.Threading.CancellationToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpExtensions.GetMemberGroup(Microsoft.CodeAnalysis.SemanticModel,Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorInitializerSyntax,System.Threading.CancellationToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpExtensions.GetMemberGroup(Microsoft.CodeAnalysis.SemanticModel,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,System.Threading.CancellationToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpExtensions.GetQueryClauseInfo(Microsoft.CodeAnalysis.SemanticModel,Microsoft.CodeAnalysis.CSharp.Syntax.QueryClauseSyntax,System.Threading.CancellationToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpExtensions.GetSpeculativeAliasInfo(Microsoft.CodeAnalysis.SemanticModel,System.Int32,Microsoft.CodeAnalysis.CSharp.Syntax.IdentifierNameSyntax,Microsoft.CodeAnalysis.SpeculativeBindingOption)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpExtensions.GetSpeculativeConversion(Microsoft.CodeAnalysis.SemanticModel,System.Int32,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SpeculativeBindingOption)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpExtensions.GetSpeculativeSymbolInfo(Microsoft.CodeAnalysis.SemanticModel,System.Int32,Microsoft.CodeAnalysis.CSharp.Syntax.AttributeSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpExtensions.GetSpeculativeSymbolInfo(Microsoft.CodeAnalysis.SemanticModel,System.Int32,Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorInitializerSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpExtensions.GetSpeculativeSymbolInfo(Microsoft.CodeAnalysis.SemanticModel,System.Int32,Microsoft.CodeAnalysis.CSharp.Syntax.CrefSyntax,Microsoft.CodeAnalysis.SpeculativeBindingOption)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpExtensions.GetSpeculativeSymbolInfo(Microsoft.CodeAnalysis.SemanticModel,System.Int32,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SpeculativeBindingOption)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpExtensions.GetSpeculativeTypeInfo(Microsoft.CodeAnalysis.SemanticModel,System.Int32,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SpeculativeBindingOption)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpExtensions.GetSymbolInfo(Microsoft.CodeAnalysis.SemanticModel,Microsoft.CodeAnalysis.CSharp.Syntax.AttributeSyntax,System.Threading.CancellationToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpExtensions.GetSymbolInfo(Microsoft.CodeAnalysis.SemanticModel,Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorInitializerSyntax,System.Threading.CancellationToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpExtensions.GetSymbolInfo(Microsoft.CodeAnalysis.SemanticModel,Microsoft.CodeAnalysis.CSharp.Syntax.CrefSyntax,System.Threading.CancellationToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpExtensions.GetSymbolInfo(Microsoft.CodeAnalysis.SemanticModel,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,System.Threading.CancellationToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpExtensions.GetSymbolInfo(Microsoft.CodeAnalysis.SemanticModel,Microsoft.CodeAnalysis.CSharp.Syntax.OrderingSyntax,System.Threading.CancellationToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpExtensions.GetSymbolInfo(Microsoft.CodeAnalysis.SemanticModel,Microsoft.CodeAnalysis.CSharp.Syntax.SelectOrGroupClauseSyntax,System.Threading.CancellationToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpExtensions.GetTypeInfo(Microsoft.CodeAnalysis.SemanticModel,Microsoft.CodeAnalysis.CSharp.Syntax.AttributeSyntax,System.Threading.CancellationToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpExtensions.GetTypeInfo(Microsoft.CodeAnalysis.SemanticModel,Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorInitializerSyntax,System.Threading.CancellationToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpExtensions.GetTypeInfo(Microsoft.CodeAnalysis.SemanticModel,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,System.Threading.CancellationToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpExtensions.GetTypeInfo(Microsoft.CodeAnalysis.SemanticModel,Microsoft.CodeAnalysis.CSharp.Syntax.SelectOrGroupClauseSyntax,System.Threading.CancellationToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpExtensions.Insert(Microsoft.CodeAnalysis.SyntaxTokenList,System.Int32,Microsoft.CodeAnalysis.SyntaxToken[])" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpExtensions.IsContextualKeyword(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpExtensions.IsKeyword(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpExtensions.IsReservedKeyword(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpExtensions.IsVerbatimIdentifier(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpExtensions.IsVerbatimStringLiteral(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpExtensions.Kind(Microsoft.CodeAnalysis.SyntaxNode)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpExtensions.Kind(Microsoft.CodeAnalysis.SyntaxNodeOrToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpExtensions.Kind(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpExtensions.Kind(Microsoft.CodeAnalysis.SyntaxTrivia)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpExtensions.ReplaceTrivia(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxTrivia,Microsoft.CodeAnalysis.SyntaxTrivia)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpExtensions.ReplaceTrivia(Microsoft.CodeAnalysis.SyntaxToken,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxTrivia},System.Func{Microsoft.CodeAnalysis.SyntaxTrivia,Microsoft.CodeAnalysis.SyntaxTrivia,Microsoft.CodeAnalysis.SyntaxTrivia})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpExtensions.TryGetSpeculativeSemanticModel(Microsoft.CodeAnalysis.SemanticModel,System.Int32,Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax,Microsoft.CodeAnalysis.SemanticModel@)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpExtensions.TryGetSpeculativeSemanticModel(Microsoft.CodeAnalysis.SemanticModel,System.Int32,Microsoft.CodeAnalysis.CSharp.Syntax.AttributeSyntax,Microsoft.CodeAnalysis.SemanticModel@)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpExtensions.TryGetSpeculativeSemanticModel(Microsoft.CodeAnalysis.SemanticModel,System.Int32,Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorInitializerSyntax,Microsoft.CodeAnalysis.SemanticModel@)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpExtensions.TryGetSpeculativeSemanticModel(Microsoft.CodeAnalysis.SemanticModel,System.Int32,Microsoft.CodeAnalysis.CSharp.Syntax.CrefSyntax,Microsoft.CodeAnalysis.SemanticModel@)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpExtensions.TryGetSpeculativeSemanticModel(Microsoft.CodeAnalysis.SemanticModel,System.Int32,Microsoft.CodeAnalysis.CSharp.Syntax.EqualsValueClauseSyntax,Microsoft.CodeAnalysis.SemanticModel@)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpExtensions.TryGetSpeculativeSemanticModel(Microsoft.CodeAnalysis.SemanticModel,System.Int32,Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax,Microsoft.CodeAnalysis.SemanticModel@)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpExtensions.TryGetSpeculativeSemanticModel(Microsoft.CodeAnalysis.SemanticModel,System.Int32,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.SemanticModel@,Microsoft.CodeAnalysis.SpeculativeBindingOption)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpExtensions.TryGetSpeculativeSemanticModelForMethodBody(Microsoft.CodeAnalysis.SemanticModel,System.Int32,Microsoft.CodeAnalysis.CSharp.Syntax.AccessorDeclarationSyntax,Microsoft.CodeAnalysis.SemanticModel@)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpExtensions.TryGetSpeculativeSemanticModelForMethodBody(Microsoft.CodeAnalysis.SemanticModel,System.Int32,Microsoft.CodeAnalysis.CSharp.Syntax.BaseMethodDeclarationSyntax,Microsoft.CodeAnalysis.SemanticModel@)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpExtensions.VarianceKindFromToken(Microsoft.CodeAnalysis.SyntaxToken)" />
    </Type>
    <Type Name="Microsoft.CodeAnalysis.CSharp.CSharpFileSystemExtensions" Id="T:Microsoft.CodeAnalysis.CSharp.CSharpFileSystemExtensions">
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpFileSystemExtensions.Emit(Microsoft.CodeAnalysis.CSharp.CSharpCompilation,System.String,System.String,System.String,System.String,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.ResourceDescription},System.Threading.CancellationToken)" />
    </Type>
    <Type Name="Microsoft.CodeAnalysis.CSharp.CSharpParseOptions" Id="T:Microsoft.CodeAnalysis.CSharp.CSharpParseOptions">
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpParseOptions.#ctor(Microsoft.CodeAnalysis.CSharp.LanguageVersion,Microsoft.CodeAnalysis.DocumentationMode,Microsoft.CodeAnalysis.SourceCodeKind,System.Collections.Generic.IEnumerable{System.String})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpParseOptions.CommonWithDocumentationMode(Microsoft.CodeAnalysis.DocumentationMode)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpParseOptions.CommonWithFeatures(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpParseOptions.CommonWithKind(Microsoft.CodeAnalysis.SourceCodeKind)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpParseOptions.Equals(Microsoft.CodeAnalysis.CSharp.CSharpParseOptions)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpParseOptions.Equals(System.Object)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpParseOptions.GetHashCode" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpParseOptions.WithDocumentationMode(Microsoft.CodeAnalysis.DocumentationMode)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpParseOptions.WithFeatures(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpParseOptions.WithKind(Microsoft.CodeAnalysis.SourceCodeKind)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpParseOptions.WithLanguageVersion(Microsoft.CodeAnalysis.CSharp.LanguageVersion)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpParseOptions.WithPreprocessorSymbols(System.Collections.Generic.IEnumerable{System.String})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpParseOptions.WithPreprocessorSymbols(System.Collections.Immutable.ImmutableArray{System.String})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpParseOptions.WithPreprocessorSymbols(System.String[])" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.CSharpParseOptions.Default" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.CSharpParseOptions.Features" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.CSharpParseOptions.Language" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.CSharpParseOptions.LanguageVersion" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.CSharpParseOptions.PreprocessorSymbolNames" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.CSharpParseOptions.SpecifiedLanguageVersion" />
    </Type>
    <Type Name="Microsoft.CodeAnalysis.CSharp.CSharpScriptCompilationInfo" Id="T:Microsoft.CodeAnalysis.CSharp.CSharpScriptCompilationInfo">
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpScriptCompilationInfo.WithPreviousScriptCompilation(Microsoft.CodeAnalysis.CSharp.CSharpCompilation)" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.CSharpScriptCompilationInfo.PreviousScriptCompilation" />
    </Type>
    <Type Name="Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode" Id="T:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode">
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode.Accept(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode.Accept``1(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor{``0})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode.DeserializeFrom(System.IO.Stream,System.Threading.CancellationToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode.EquivalentToCore(Microsoft.CodeAnalysis.SyntaxNode)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode.FindToken(System.Int32,System.Boolean)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode.FindTrivia(System.Int32,System.Boolean)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode.FindTrivia(System.Int32,System.Func{Microsoft.CodeAnalysis.SyntaxTrivia,System.Boolean})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode.GetDiagnostics" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode.GetFirstDirective(System.Func{Microsoft.CodeAnalysis.CSharp.Syntax.DirectiveTriviaSyntax,System.Boolean})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode.GetFirstToken(System.Boolean,System.Boolean,System.Boolean,System.Boolean)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode.GetLastDirective(System.Func{Microsoft.CodeAnalysis.CSharp.Syntax.DirectiveTriviaSyntax,System.Boolean})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode.GetLastToken(System.Boolean,System.Boolean,System.Boolean,System.Boolean)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode.GetLeadingTrivia" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode.GetLocation" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode.GetTrailingTrivia" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode.InsertNodesInListCore(Microsoft.CodeAnalysis.SyntaxNode,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode},System.Boolean)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode.InsertTokensInListCore(Microsoft.CodeAnalysis.SyntaxToken,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxToken},System.Boolean)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode.InsertTriviaInListCore(Microsoft.CodeAnalysis.SyntaxTrivia,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxTrivia},System.Boolean)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode.IsEquivalentToCore(Microsoft.CodeAnalysis.SyntaxNode,System.Boolean)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode.Kind" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode.NormalizeWhitespaceCore(System.String,System.String,System.Boolean)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode.RemoveNodesCore(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode},Microsoft.CodeAnalysis.SyntaxRemoveOptions)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode.ReplaceCore``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,Microsoft.CodeAnalysis.SyntaxNode},System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxToken},System.Func{Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken},System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxTrivia},System.Func{Microsoft.CodeAnalysis.SyntaxTrivia,Microsoft.CodeAnalysis.SyntaxTrivia,Microsoft.CodeAnalysis.SyntaxTrivia})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode.ReplaceNodeInListCore(Microsoft.CodeAnalysis.SyntaxNode,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode.ReplaceTokenInListCore(Microsoft.CodeAnalysis.SyntaxToken,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxToken})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode.ReplaceTriviaInListCore(Microsoft.CodeAnalysis.SyntaxTrivia,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxTrivia})" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode.Language" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode.SyntaxTreeCore" />
    </Type>
    <Type Name="Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter" Id="T:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter">
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.#ctor(System.Boolean)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.Visit(Microsoft.CodeAnalysis.SyntaxNode)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitAccessorDeclaration(Microsoft.CodeAnalysis.CSharp.Syntax.AccessorDeclarationSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitAccessorList(Microsoft.CodeAnalysis.CSharp.Syntax.AccessorListSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitAliasQualifiedName(Microsoft.CodeAnalysis.CSharp.Syntax.AliasQualifiedNameSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitAnonymousMethodExpression(Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousMethodExpressionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitAnonymousObjectCreationExpression(Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousObjectCreationExpressionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitAnonymousObjectMemberDeclarator(Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousObjectMemberDeclaratorSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitArgument(Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitArgumentList(Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentListSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitArrayCreationExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ArrayCreationExpressionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitArrayRankSpecifier(Microsoft.CodeAnalysis.CSharp.Syntax.ArrayRankSpecifierSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitArrayType(Microsoft.CodeAnalysis.CSharp.Syntax.ArrayTypeSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitArrowExpressionClause(Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitAssignmentExpression(Microsoft.CodeAnalysis.CSharp.Syntax.AssignmentExpressionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitAttribute(Microsoft.CodeAnalysis.CSharp.Syntax.AttributeSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitAttributeArgument(Microsoft.CodeAnalysis.CSharp.Syntax.AttributeArgumentSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitAttributeArgumentList(Microsoft.CodeAnalysis.CSharp.Syntax.AttributeArgumentListSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitAttributeList(Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitAttributeTargetSpecifier(Microsoft.CodeAnalysis.CSharp.Syntax.AttributeTargetSpecifierSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitAwaitExpression(Microsoft.CodeAnalysis.CSharp.Syntax.AwaitExpressionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitBadDirectiveTrivia(Microsoft.CodeAnalysis.CSharp.Syntax.BadDirectiveTriviaSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitBaseExpression(Microsoft.CodeAnalysis.CSharp.Syntax.BaseExpressionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitBaseList(Microsoft.CodeAnalysis.CSharp.Syntax.BaseListSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitBinaryExpression(Microsoft.CodeAnalysis.CSharp.Syntax.BinaryExpressionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitBlock(Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitBracketedArgumentList(Microsoft.CodeAnalysis.CSharp.Syntax.BracketedArgumentListSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitBracketedParameterList(Microsoft.CodeAnalysis.CSharp.Syntax.BracketedParameterListSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitBreakStatement(Microsoft.CodeAnalysis.CSharp.Syntax.BreakStatementSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitCasePatternSwitchLabel(Microsoft.CodeAnalysis.CSharp.Syntax.CasePatternSwitchLabelSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitCaseSwitchLabel(Microsoft.CodeAnalysis.CSharp.Syntax.CaseSwitchLabelSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitCastExpression(Microsoft.CodeAnalysis.CSharp.Syntax.CastExpressionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitCatchClause(Microsoft.CodeAnalysis.CSharp.Syntax.CatchClauseSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitCatchDeclaration(Microsoft.CodeAnalysis.CSharp.Syntax.CatchDeclarationSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitCatchFilterClause(Microsoft.CodeAnalysis.CSharp.Syntax.CatchFilterClauseSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitCheckedExpression(Microsoft.CodeAnalysis.CSharp.Syntax.CheckedExpressionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitCheckedStatement(Microsoft.CodeAnalysis.CSharp.Syntax.CheckedStatementSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitClassDeclaration(Microsoft.CodeAnalysis.CSharp.Syntax.ClassDeclarationSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitClassOrStructConstraint(Microsoft.CodeAnalysis.CSharp.Syntax.ClassOrStructConstraintSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitCompilationUnit(Microsoft.CodeAnalysis.CSharp.Syntax.CompilationUnitSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitConditionalAccessExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ConditionalAccessExpressionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitConditionalExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ConditionalExpressionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitConstantPattern(Microsoft.CodeAnalysis.CSharp.Syntax.ConstantPatternSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitConstructorConstraint(Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorConstraintSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitConstructorDeclaration(Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorDeclarationSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitConstructorInitializer(Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorInitializerSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitContinueStatement(Microsoft.CodeAnalysis.CSharp.Syntax.ContinueStatementSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitConversionOperatorDeclaration(Microsoft.CodeAnalysis.CSharp.Syntax.ConversionOperatorDeclarationSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitConversionOperatorMemberCref(Microsoft.CodeAnalysis.CSharp.Syntax.ConversionOperatorMemberCrefSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitCrefBracketedParameterList(Microsoft.CodeAnalysis.CSharp.Syntax.CrefBracketedParameterListSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitCrefParameter(Microsoft.CodeAnalysis.CSharp.Syntax.CrefParameterSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitCrefParameterList(Microsoft.CodeAnalysis.CSharp.Syntax.CrefParameterListSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitDeclarationExpression(Microsoft.CodeAnalysis.CSharp.Syntax.DeclarationExpressionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitDeclarationPattern(Microsoft.CodeAnalysis.CSharp.Syntax.DeclarationPatternSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitDefaultExpression(Microsoft.CodeAnalysis.CSharp.Syntax.DefaultExpressionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitDefaultSwitchLabel(Microsoft.CodeAnalysis.CSharp.Syntax.DefaultSwitchLabelSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitDefineDirectiveTrivia(Microsoft.CodeAnalysis.CSharp.Syntax.DefineDirectiveTriviaSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitDelegateDeclaration(Microsoft.CodeAnalysis.CSharp.Syntax.DelegateDeclarationSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitDestructorDeclaration(Microsoft.CodeAnalysis.CSharp.Syntax.DestructorDeclarationSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitDiscardDesignation(Microsoft.CodeAnalysis.CSharp.Syntax.DiscardDesignationSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitDocumentationCommentTrivia(Microsoft.CodeAnalysis.CSharp.Syntax.DocumentationCommentTriviaSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitDoStatement(Microsoft.CodeAnalysis.CSharp.Syntax.DoStatementSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitElementAccessExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ElementAccessExpressionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitElementBindingExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ElementBindingExpressionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitElifDirectiveTrivia(Microsoft.CodeAnalysis.CSharp.Syntax.ElifDirectiveTriviaSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitElseClause(Microsoft.CodeAnalysis.CSharp.Syntax.ElseClauseSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitElseDirectiveTrivia(Microsoft.CodeAnalysis.CSharp.Syntax.ElseDirectiveTriviaSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitEmptyStatement(Microsoft.CodeAnalysis.CSharp.Syntax.EmptyStatementSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitEndIfDirectiveTrivia(Microsoft.CodeAnalysis.CSharp.Syntax.EndIfDirectiveTriviaSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitEndRegionDirectiveTrivia(Microsoft.CodeAnalysis.CSharp.Syntax.EndRegionDirectiveTriviaSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitEnumDeclaration(Microsoft.CodeAnalysis.CSharp.Syntax.EnumDeclarationSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitEnumMemberDeclaration(Microsoft.CodeAnalysis.CSharp.Syntax.EnumMemberDeclarationSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitEqualsValueClause(Microsoft.CodeAnalysis.CSharp.Syntax.EqualsValueClauseSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitErrorDirectiveTrivia(Microsoft.CodeAnalysis.CSharp.Syntax.ErrorDirectiveTriviaSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitEventDeclaration(Microsoft.CodeAnalysis.CSharp.Syntax.EventDeclarationSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitEventFieldDeclaration(Microsoft.CodeAnalysis.CSharp.Syntax.EventFieldDeclarationSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitExplicitInterfaceSpecifier(Microsoft.CodeAnalysis.CSharp.Syntax.ExplicitInterfaceSpecifierSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitExpressionStatement(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionStatementSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitExternAliasDirective(Microsoft.CodeAnalysis.CSharp.Syntax.ExternAliasDirectiveSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitFieldDeclaration(Microsoft.CodeAnalysis.CSharp.Syntax.FieldDeclarationSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitFinallyClause(Microsoft.CodeAnalysis.CSharp.Syntax.FinallyClauseSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitFixedStatement(Microsoft.CodeAnalysis.CSharp.Syntax.FixedStatementSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitForEachStatement(Microsoft.CodeAnalysis.CSharp.Syntax.ForEachStatementSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitForEachVariableStatement(Microsoft.CodeAnalysis.CSharp.Syntax.ForEachVariableStatementSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitForStatement(Microsoft.CodeAnalysis.CSharp.Syntax.ForStatementSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitFromClause(Microsoft.CodeAnalysis.CSharp.Syntax.FromClauseSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitGenericName(Microsoft.CodeAnalysis.CSharp.Syntax.GenericNameSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitGlobalStatement(Microsoft.CodeAnalysis.CSharp.Syntax.GlobalStatementSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitGotoStatement(Microsoft.CodeAnalysis.CSharp.Syntax.GotoStatementSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitGroupClause(Microsoft.CodeAnalysis.CSharp.Syntax.GroupClauseSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitIdentifierName(Microsoft.CodeAnalysis.CSharp.Syntax.IdentifierNameSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitIfDirectiveTrivia(Microsoft.CodeAnalysis.CSharp.Syntax.IfDirectiveTriviaSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitIfStatement(Microsoft.CodeAnalysis.CSharp.Syntax.IfStatementSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitImplicitArrayCreationExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ImplicitArrayCreationExpressionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitImplicitElementAccess(Microsoft.CodeAnalysis.CSharp.Syntax.ImplicitElementAccessSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitIncompleteMember(Microsoft.CodeAnalysis.CSharp.Syntax.IncompleteMemberSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitIndexerDeclaration(Microsoft.CodeAnalysis.CSharp.Syntax.IndexerDeclarationSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitIndexerMemberCref(Microsoft.CodeAnalysis.CSharp.Syntax.IndexerMemberCrefSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitInitializerExpression(Microsoft.CodeAnalysis.CSharp.Syntax.InitializerExpressionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitInterfaceDeclaration(Microsoft.CodeAnalysis.CSharp.Syntax.InterfaceDeclarationSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitInterpolatedStringExpression(Microsoft.CodeAnalysis.CSharp.Syntax.InterpolatedStringExpressionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitInterpolatedStringText(Microsoft.CodeAnalysis.CSharp.Syntax.InterpolatedStringTextSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitInterpolation(Microsoft.CodeAnalysis.CSharp.Syntax.InterpolationSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitInterpolationAlignmentClause(Microsoft.CodeAnalysis.CSharp.Syntax.InterpolationAlignmentClauseSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitInterpolationFormatClause(Microsoft.CodeAnalysis.CSharp.Syntax.InterpolationFormatClauseSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitInvocationExpression(Microsoft.CodeAnalysis.CSharp.Syntax.InvocationExpressionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitIsPatternExpression(Microsoft.CodeAnalysis.CSharp.Syntax.IsPatternExpressionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitJoinClause(Microsoft.CodeAnalysis.CSharp.Syntax.JoinClauseSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitJoinIntoClause(Microsoft.CodeAnalysis.CSharp.Syntax.JoinIntoClauseSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitLabeledStatement(Microsoft.CodeAnalysis.CSharp.Syntax.LabeledStatementSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitLetClause(Microsoft.CodeAnalysis.CSharp.Syntax.LetClauseSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitLineDirectiveTrivia(Microsoft.CodeAnalysis.CSharp.Syntax.LineDirectiveTriviaSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitList(Microsoft.CodeAnalysis.SyntaxTokenList)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitList(Microsoft.CodeAnalysis.SyntaxTriviaList)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitList``1(Microsoft.CodeAnalysis.SeparatedSyntaxList{``0})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitList``1(Microsoft.CodeAnalysis.SyntaxList{``0})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitListElement(Microsoft.CodeAnalysis.SyntaxTrivia)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitListElement``1(``0)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitListSeparator(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitLiteralExpression(Microsoft.CodeAnalysis.CSharp.Syntax.LiteralExpressionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitLoadDirectiveTrivia(Microsoft.CodeAnalysis.CSharp.Syntax.LoadDirectiveTriviaSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitLocalDeclarationStatement(Microsoft.CodeAnalysis.CSharp.Syntax.LocalDeclarationStatementSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitLocalFunctionStatement(Microsoft.CodeAnalysis.CSharp.Syntax.LocalFunctionStatementSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitLockStatement(Microsoft.CodeAnalysis.CSharp.Syntax.LockStatementSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitMakeRefExpression(Microsoft.CodeAnalysis.CSharp.Syntax.MakeRefExpressionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitMemberAccessExpression(Microsoft.CodeAnalysis.CSharp.Syntax.MemberAccessExpressionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitMemberBindingExpression(Microsoft.CodeAnalysis.CSharp.Syntax.MemberBindingExpressionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitMethodDeclaration(Microsoft.CodeAnalysis.CSharp.Syntax.MethodDeclarationSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitNameColon(Microsoft.CodeAnalysis.CSharp.Syntax.NameColonSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitNameEquals(Microsoft.CodeAnalysis.CSharp.Syntax.NameEqualsSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitNameMemberCref(Microsoft.CodeAnalysis.CSharp.Syntax.NameMemberCrefSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitNamespaceDeclaration(Microsoft.CodeAnalysis.CSharp.Syntax.NamespaceDeclarationSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitNullableType(Microsoft.CodeAnalysis.CSharp.Syntax.NullableTypeSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitObjectCreationExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ObjectCreationExpressionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitOmittedArraySizeExpression(Microsoft.CodeAnalysis.CSharp.Syntax.OmittedArraySizeExpressionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitOmittedTypeArgument(Microsoft.CodeAnalysis.CSharp.Syntax.OmittedTypeArgumentSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitOperatorDeclaration(Microsoft.CodeAnalysis.CSharp.Syntax.OperatorDeclarationSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitOperatorMemberCref(Microsoft.CodeAnalysis.CSharp.Syntax.OperatorMemberCrefSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitOrderByClause(Microsoft.CodeAnalysis.CSharp.Syntax.OrderByClauseSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitOrdering(Microsoft.CodeAnalysis.CSharp.Syntax.OrderingSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitParameter(Microsoft.CodeAnalysis.CSharp.Syntax.ParameterSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitParameterList(Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitParenthesizedExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ParenthesizedExpressionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitParenthesizedLambdaExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ParenthesizedLambdaExpressionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitParenthesizedVariableDesignation(Microsoft.CodeAnalysis.CSharp.Syntax.ParenthesizedVariableDesignationSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitPointerType(Microsoft.CodeAnalysis.CSharp.Syntax.PointerTypeSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitPostfixUnaryExpression(Microsoft.CodeAnalysis.CSharp.Syntax.PostfixUnaryExpressionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitPragmaChecksumDirectiveTrivia(Microsoft.CodeAnalysis.CSharp.Syntax.PragmaChecksumDirectiveTriviaSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitPragmaWarningDirectiveTrivia(Microsoft.CodeAnalysis.CSharp.Syntax.PragmaWarningDirectiveTriviaSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitPredefinedType(Microsoft.CodeAnalysis.CSharp.Syntax.PredefinedTypeSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitPrefixUnaryExpression(Microsoft.CodeAnalysis.CSharp.Syntax.PrefixUnaryExpressionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitPropertyDeclaration(Microsoft.CodeAnalysis.CSharp.Syntax.PropertyDeclarationSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitQualifiedCref(Microsoft.CodeAnalysis.CSharp.Syntax.QualifiedCrefSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitQualifiedName(Microsoft.CodeAnalysis.CSharp.Syntax.QualifiedNameSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitQueryBody(Microsoft.CodeAnalysis.CSharp.Syntax.QueryBodySyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitQueryContinuation(Microsoft.CodeAnalysis.CSharp.Syntax.QueryContinuationSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitQueryExpression(Microsoft.CodeAnalysis.CSharp.Syntax.QueryExpressionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitReferenceDirectiveTrivia(Microsoft.CodeAnalysis.CSharp.Syntax.ReferenceDirectiveTriviaSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitRefExpression(Microsoft.CodeAnalysis.CSharp.Syntax.RefExpressionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitRefType(Microsoft.CodeAnalysis.CSharp.Syntax.RefTypeSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitRefTypeExpression(Microsoft.CodeAnalysis.CSharp.Syntax.RefTypeExpressionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitRefValueExpression(Microsoft.CodeAnalysis.CSharp.Syntax.RefValueExpressionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitRegionDirectiveTrivia(Microsoft.CodeAnalysis.CSharp.Syntax.RegionDirectiveTriviaSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitReturnStatement(Microsoft.CodeAnalysis.CSharp.Syntax.ReturnStatementSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitSelectClause(Microsoft.CodeAnalysis.CSharp.Syntax.SelectClauseSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitShebangDirectiveTrivia(Microsoft.CodeAnalysis.CSharp.Syntax.ShebangDirectiveTriviaSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitSimpleBaseType(Microsoft.CodeAnalysis.CSharp.Syntax.SimpleBaseTypeSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitSimpleLambdaExpression(Microsoft.CodeAnalysis.CSharp.Syntax.SimpleLambdaExpressionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitSingleVariableDesignation(Microsoft.CodeAnalysis.CSharp.Syntax.SingleVariableDesignationSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitSizeOfExpression(Microsoft.CodeAnalysis.CSharp.Syntax.SizeOfExpressionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitSkippedTokensTrivia(Microsoft.CodeAnalysis.CSharp.Syntax.SkippedTokensTriviaSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitStackAllocArrayCreationExpression(Microsoft.CodeAnalysis.CSharp.Syntax.StackAllocArrayCreationExpressionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitStructDeclaration(Microsoft.CodeAnalysis.CSharp.Syntax.StructDeclarationSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitSwitchSection(Microsoft.CodeAnalysis.CSharp.Syntax.SwitchSectionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitSwitchStatement(Microsoft.CodeAnalysis.CSharp.Syntax.SwitchStatementSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitThisExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ThisExpressionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitThrowExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ThrowExpressionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitThrowStatement(Microsoft.CodeAnalysis.CSharp.Syntax.ThrowStatementSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitToken(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitTrivia(Microsoft.CodeAnalysis.SyntaxTrivia)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitTryStatement(Microsoft.CodeAnalysis.CSharp.Syntax.TryStatementSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitTupleElement(Microsoft.CodeAnalysis.CSharp.Syntax.TupleElementSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitTupleExpression(Microsoft.CodeAnalysis.CSharp.Syntax.TupleExpressionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitTupleType(Microsoft.CodeAnalysis.CSharp.Syntax.TupleTypeSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitTypeArgumentList(Microsoft.CodeAnalysis.CSharp.Syntax.TypeArgumentListSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitTypeConstraint(Microsoft.CodeAnalysis.CSharp.Syntax.TypeConstraintSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitTypeCref(Microsoft.CodeAnalysis.CSharp.Syntax.TypeCrefSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitTypeOfExpression(Microsoft.CodeAnalysis.CSharp.Syntax.TypeOfExpressionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitTypeParameter(Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitTypeParameterConstraintClause(Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintClauseSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitTypeParameterList(Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterListSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitUndefDirectiveTrivia(Microsoft.CodeAnalysis.CSharp.Syntax.UndefDirectiveTriviaSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitUnsafeStatement(Microsoft.CodeAnalysis.CSharp.Syntax.UnsafeStatementSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitUsingDirective(Microsoft.CodeAnalysis.CSharp.Syntax.UsingDirectiveSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitUsingStatement(Microsoft.CodeAnalysis.CSharp.Syntax.UsingStatementSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitVariableDeclaration(Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclarationSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitVariableDeclarator(Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclaratorSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitWarningDirectiveTrivia(Microsoft.CodeAnalysis.CSharp.Syntax.WarningDirectiveTriviaSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitWhenClause(Microsoft.CodeAnalysis.CSharp.Syntax.WhenClauseSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitWhereClause(Microsoft.CodeAnalysis.CSharp.Syntax.WhereClauseSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitWhileStatement(Microsoft.CodeAnalysis.CSharp.Syntax.WhileStatementSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitXmlCDataSection(Microsoft.CodeAnalysis.CSharp.Syntax.XmlCDataSectionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitXmlComment(Microsoft.CodeAnalysis.CSharp.Syntax.XmlCommentSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitXmlCrefAttribute(Microsoft.CodeAnalysis.CSharp.Syntax.XmlCrefAttributeSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitXmlElement(Microsoft.CodeAnalysis.CSharp.Syntax.XmlElementSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitXmlElementEndTag(Microsoft.CodeAnalysis.CSharp.Syntax.XmlElementEndTagSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitXmlElementStartTag(Microsoft.CodeAnalysis.CSharp.Syntax.XmlElementStartTagSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitXmlEmptyElement(Microsoft.CodeAnalysis.CSharp.Syntax.XmlEmptyElementSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitXmlName(Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitXmlNameAttribute(Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameAttributeSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitXmlPrefix(Microsoft.CodeAnalysis.CSharp.Syntax.XmlPrefixSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitXmlProcessingInstruction(Microsoft.CodeAnalysis.CSharp.Syntax.XmlProcessingInstructionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitXmlText(Microsoft.CodeAnalysis.CSharp.Syntax.XmlTextSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitXmlTextAttribute(Microsoft.CodeAnalysis.CSharp.Syntax.XmlTextAttributeSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitYieldStatement(Microsoft.CodeAnalysis.CSharp.Syntax.YieldStatementSyntax)" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitIntoStructuredTrivia" />
    </Type>
    <Type Name="Microsoft.CodeAnalysis.CSharp.CSharpSyntaxTree" Id="T:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxTree">
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxTree.#ctor" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxTree.CloneNodeAsRoot``1(``0)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxTree.Create(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,Microsoft.CodeAnalysis.CSharp.CSharpParseOptions,System.String,System.Text.Encoding)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxTree.GetChangedSpans(Microsoft.CodeAnalysis.SyntaxTree)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxTree.GetChanges(Microsoft.CodeAnalysis.SyntaxTree)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxTree.GetCompilationUnitRoot(System.Threading.CancellationToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxTree.GetDiagnostics(Microsoft.CodeAnalysis.SyntaxNode)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxTree.GetDiagnostics(Microsoft.CodeAnalysis.SyntaxNodeOrToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxTree.GetDiagnostics(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxTree.GetDiagnostics(Microsoft.CodeAnalysis.SyntaxTrivia)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxTree.GetDiagnostics(System.Threading.CancellationToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxTree.GetLineSpan(Microsoft.CodeAnalysis.Text.TextSpan,System.Threading.CancellationToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxTree.GetLineVisibility(System.Int32,System.Threading.CancellationToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxTree.GetLocation(Microsoft.CodeAnalysis.Text.TextSpan)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxTree.GetMappedLineSpan(Microsoft.CodeAnalysis.Text.TextSpan,System.Threading.CancellationToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxTree.GetRoot(System.Threading.CancellationToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxTree.GetRootAsync(System.Threading.CancellationToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxTree.GetRootAsyncCore(System.Threading.CancellationToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxTree.GetRootCore(System.Threading.CancellationToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxTree.HasHiddenRegions" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxTree.IsEquivalentTo(Microsoft.CodeAnalysis.SyntaxTree,System.Boolean)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxTree.ParseText(Microsoft.CodeAnalysis.Text.SourceText,Microsoft.CodeAnalysis.CSharp.CSharpParseOptions,System.String,System.Threading.CancellationToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxTree.ParseText(System.String,Microsoft.CodeAnalysis.CSharp.CSharpParseOptions,System.String,System.Text.Encoding,System.Threading.CancellationToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxTree.TryGetRoot(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode@)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxTree.TryGetRootCore(Microsoft.CodeAnalysis.SyntaxNode@)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxTree.WithChangedText(Microsoft.CodeAnalysis.Text.SourceText)" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxTree.Options" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxTree.OptionsCore" />
    </Type>
    <Type Name="Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor" Id="T:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor">
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.#ctor" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.DefaultVisit(Microsoft.CodeAnalysis.SyntaxNode)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.Visit(Microsoft.CodeAnalysis.SyntaxNode)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitAccessorDeclaration(Microsoft.CodeAnalysis.CSharp.Syntax.AccessorDeclarationSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitAccessorList(Microsoft.CodeAnalysis.CSharp.Syntax.AccessorListSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitAliasQualifiedName(Microsoft.CodeAnalysis.CSharp.Syntax.AliasQualifiedNameSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitAnonymousMethodExpression(Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousMethodExpressionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitAnonymousObjectCreationExpression(Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousObjectCreationExpressionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitAnonymousObjectMemberDeclarator(Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousObjectMemberDeclaratorSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitArgument(Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitArgumentList(Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentListSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitArrayCreationExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ArrayCreationExpressionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitArrayRankSpecifier(Microsoft.CodeAnalysis.CSharp.Syntax.ArrayRankSpecifierSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitArrayType(Microsoft.CodeAnalysis.CSharp.Syntax.ArrayTypeSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitArrowExpressionClause(Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitAssignmentExpression(Microsoft.CodeAnalysis.CSharp.Syntax.AssignmentExpressionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitAttribute(Microsoft.CodeAnalysis.CSharp.Syntax.AttributeSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitAttributeArgument(Microsoft.CodeAnalysis.CSharp.Syntax.AttributeArgumentSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitAttributeArgumentList(Microsoft.CodeAnalysis.CSharp.Syntax.AttributeArgumentListSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitAttributeList(Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitAttributeTargetSpecifier(Microsoft.CodeAnalysis.CSharp.Syntax.AttributeTargetSpecifierSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitAwaitExpression(Microsoft.CodeAnalysis.CSharp.Syntax.AwaitExpressionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitBadDirectiveTrivia(Microsoft.CodeAnalysis.CSharp.Syntax.BadDirectiveTriviaSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitBaseExpression(Microsoft.CodeAnalysis.CSharp.Syntax.BaseExpressionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitBaseList(Microsoft.CodeAnalysis.CSharp.Syntax.BaseListSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitBinaryExpression(Microsoft.CodeAnalysis.CSharp.Syntax.BinaryExpressionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitBlock(Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitBracketedArgumentList(Microsoft.CodeAnalysis.CSharp.Syntax.BracketedArgumentListSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitBracketedParameterList(Microsoft.CodeAnalysis.CSharp.Syntax.BracketedParameterListSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitBreakStatement(Microsoft.CodeAnalysis.CSharp.Syntax.BreakStatementSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitCasePatternSwitchLabel(Microsoft.CodeAnalysis.CSharp.Syntax.CasePatternSwitchLabelSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitCaseSwitchLabel(Microsoft.CodeAnalysis.CSharp.Syntax.CaseSwitchLabelSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitCastExpression(Microsoft.CodeAnalysis.CSharp.Syntax.CastExpressionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitCatchClause(Microsoft.CodeAnalysis.CSharp.Syntax.CatchClauseSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitCatchDeclaration(Microsoft.CodeAnalysis.CSharp.Syntax.CatchDeclarationSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitCatchFilterClause(Microsoft.CodeAnalysis.CSharp.Syntax.CatchFilterClauseSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitCheckedExpression(Microsoft.CodeAnalysis.CSharp.Syntax.CheckedExpressionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitCheckedStatement(Microsoft.CodeAnalysis.CSharp.Syntax.CheckedStatementSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitClassDeclaration(Microsoft.CodeAnalysis.CSharp.Syntax.ClassDeclarationSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitClassOrStructConstraint(Microsoft.CodeAnalysis.CSharp.Syntax.ClassOrStructConstraintSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitCompilationUnit(Microsoft.CodeAnalysis.CSharp.Syntax.CompilationUnitSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitConditionalAccessExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ConditionalAccessExpressionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitConditionalExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ConditionalExpressionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitConstantPattern(Microsoft.CodeAnalysis.CSharp.Syntax.ConstantPatternSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitConstructorConstraint(Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorConstraintSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitConstructorDeclaration(Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorDeclarationSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitConstructorInitializer(Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorInitializerSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitContinueStatement(Microsoft.CodeAnalysis.CSharp.Syntax.ContinueStatementSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitConversionOperatorDeclaration(Microsoft.CodeAnalysis.CSharp.Syntax.ConversionOperatorDeclarationSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitConversionOperatorMemberCref(Microsoft.CodeAnalysis.CSharp.Syntax.ConversionOperatorMemberCrefSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitCrefBracketedParameterList(Microsoft.CodeAnalysis.CSharp.Syntax.CrefBracketedParameterListSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitCrefParameter(Microsoft.CodeAnalysis.CSharp.Syntax.CrefParameterSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitCrefParameterList(Microsoft.CodeAnalysis.CSharp.Syntax.CrefParameterListSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitDeclarationExpression(Microsoft.CodeAnalysis.CSharp.Syntax.DeclarationExpressionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitDeclarationPattern(Microsoft.CodeAnalysis.CSharp.Syntax.DeclarationPatternSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitDefaultExpression(Microsoft.CodeAnalysis.CSharp.Syntax.DefaultExpressionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitDefaultSwitchLabel(Microsoft.CodeAnalysis.CSharp.Syntax.DefaultSwitchLabelSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitDefineDirectiveTrivia(Microsoft.CodeAnalysis.CSharp.Syntax.DefineDirectiveTriviaSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitDelegateDeclaration(Microsoft.CodeAnalysis.CSharp.Syntax.DelegateDeclarationSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitDestructorDeclaration(Microsoft.CodeAnalysis.CSharp.Syntax.DestructorDeclarationSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitDiscardDesignation(Microsoft.CodeAnalysis.CSharp.Syntax.DiscardDesignationSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitDocumentationCommentTrivia(Microsoft.CodeAnalysis.CSharp.Syntax.DocumentationCommentTriviaSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitDoStatement(Microsoft.CodeAnalysis.CSharp.Syntax.DoStatementSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitElementAccessExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ElementAccessExpressionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitElementBindingExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ElementBindingExpressionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitElifDirectiveTrivia(Microsoft.CodeAnalysis.CSharp.Syntax.ElifDirectiveTriviaSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitElseClause(Microsoft.CodeAnalysis.CSharp.Syntax.ElseClauseSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitElseDirectiveTrivia(Microsoft.CodeAnalysis.CSharp.Syntax.ElseDirectiveTriviaSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitEmptyStatement(Microsoft.CodeAnalysis.CSharp.Syntax.EmptyStatementSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitEndIfDirectiveTrivia(Microsoft.CodeAnalysis.CSharp.Syntax.EndIfDirectiveTriviaSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitEndRegionDirectiveTrivia(Microsoft.CodeAnalysis.CSharp.Syntax.EndRegionDirectiveTriviaSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitEnumDeclaration(Microsoft.CodeAnalysis.CSharp.Syntax.EnumDeclarationSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitEnumMemberDeclaration(Microsoft.CodeAnalysis.CSharp.Syntax.EnumMemberDeclarationSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitEqualsValueClause(Microsoft.CodeAnalysis.CSharp.Syntax.EqualsValueClauseSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitErrorDirectiveTrivia(Microsoft.CodeAnalysis.CSharp.Syntax.ErrorDirectiveTriviaSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitEventDeclaration(Microsoft.CodeAnalysis.CSharp.Syntax.EventDeclarationSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitEventFieldDeclaration(Microsoft.CodeAnalysis.CSharp.Syntax.EventFieldDeclarationSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitExplicitInterfaceSpecifier(Microsoft.CodeAnalysis.CSharp.Syntax.ExplicitInterfaceSpecifierSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitExpressionStatement(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionStatementSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitExternAliasDirective(Microsoft.CodeAnalysis.CSharp.Syntax.ExternAliasDirectiveSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitFieldDeclaration(Microsoft.CodeAnalysis.CSharp.Syntax.FieldDeclarationSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitFinallyClause(Microsoft.CodeAnalysis.CSharp.Syntax.FinallyClauseSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitFixedStatement(Microsoft.CodeAnalysis.CSharp.Syntax.FixedStatementSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitForEachStatement(Microsoft.CodeAnalysis.CSharp.Syntax.ForEachStatementSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitForEachVariableStatement(Microsoft.CodeAnalysis.CSharp.Syntax.ForEachVariableStatementSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitForStatement(Microsoft.CodeAnalysis.CSharp.Syntax.ForStatementSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitFromClause(Microsoft.CodeAnalysis.CSharp.Syntax.FromClauseSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitGenericName(Microsoft.CodeAnalysis.CSharp.Syntax.GenericNameSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitGlobalStatement(Microsoft.CodeAnalysis.CSharp.Syntax.GlobalStatementSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitGotoStatement(Microsoft.CodeAnalysis.CSharp.Syntax.GotoStatementSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitGroupClause(Microsoft.CodeAnalysis.CSharp.Syntax.GroupClauseSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitIdentifierName(Microsoft.CodeAnalysis.CSharp.Syntax.IdentifierNameSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitIfDirectiveTrivia(Microsoft.CodeAnalysis.CSharp.Syntax.IfDirectiveTriviaSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitIfStatement(Microsoft.CodeAnalysis.CSharp.Syntax.IfStatementSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitImplicitArrayCreationExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ImplicitArrayCreationExpressionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitImplicitElementAccess(Microsoft.CodeAnalysis.CSharp.Syntax.ImplicitElementAccessSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitIncompleteMember(Microsoft.CodeAnalysis.CSharp.Syntax.IncompleteMemberSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitIndexerDeclaration(Microsoft.CodeAnalysis.CSharp.Syntax.IndexerDeclarationSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitIndexerMemberCref(Microsoft.CodeAnalysis.CSharp.Syntax.IndexerMemberCrefSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitInitializerExpression(Microsoft.CodeAnalysis.CSharp.Syntax.InitializerExpressionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitInterfaceDeclaration(Microsoft.CodeAnalysis.CSharp.Syntax.InterfaceDeclarationSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitInterpolatedStringExpression(Microsoft.CodeAnalysis.CSharp.Syntax.InterpolatedStringExpressionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitInterpolatedStringText(Microsoft.CodeAnalysis.CSharp.Syntax.InterpolatedStringTextSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitInterpolation(Microsoft.CodeAnalysis.CSharp.Syntax.InterpolationSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitInterpolationAlignmentClause(Microsoft.CodeAnalysis.CSharp.Syntax.InterpolationAlignmentClauseSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitInterpolationFormatClause(Microsoft.CodeAnalysis.CSharp.Syntax.InterpolationFormatClauseSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitInvocationExpression(Microsoft.CodeAnalysis.CSharp.Syntax.InvocationExpressionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitIsPatternExpression(Microsoft.CodeAnalysis.CSharp.Syntax.IsPatternExpressionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitJoinClause(Microsoft.CodeAnalysis.CSharp.Syntax.JoinClauseSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitJoinIntoClause(Microsoft.CodeAnalysis.CSharp.Syntax.JoinIntoClauseSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitLabeledStatement(Microsoft.CodeAnalysis.CSharp.Syntax.LabeledStatementSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitLetClause(Microsoft.CodeAnalysis.CSharp.Syntax.LetClauseSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitLineDirectiveTrivia(Microsoft.CodeAnalysis.CSharp.Syntax.LineDirectiveTriviaSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitLiteralExpression(Microsoft.CodeAnalysis.CSharp.Syntax.LiteralExpressionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitLoadDirectiveTrivia(Microsoft.CodeAnalysis.CSharp.Syntax.LoadDirectiveTriviaSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitLocalDeclarationStatement(Microsoft.CodeAnalysis.CSharp.Syntax.LocalDeclarationStatementSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitLocalFunctionStatement(Microsoft.CodeAnalysis.CSharp.Syntax.LocalFunctionStatementSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitLockStatement(Microsoft.CodeAnalysis.CSharp.Syntax.LockStatementSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitMakeRefExpression(Microsoft.CodeAnalysis.CSharp.Syntax.MakeRefExpressionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitMemberAccessExpression(Microsoft.CodeAnalysis.CSharp.Syntax.MemberAccessExpressionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitMemberBindingExpression(Microsoft.CodeAnalysis.CSharp.Syntax.MemberBindingExpressionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitMethodDeclaration(Microsoft.CodeAnalysis.CSharp.Syntax.MethodDeclarationSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitNameColon(Microsoft.CodeAnalysis.CSharp.Syntax.NameColonSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitNameEquals(Microsoft.CodeAnalysis.CSharp.Syntax.NameEqualsSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitNameMemberCref(Microsoft.CodeAnalysis.CSharp.Syntax.NameMemberCrefSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitNamespaceDeclaration(Microsoft.CodeAnalysis.CSharp.Syntax.NamespaceDeclarationSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitNullableType(Microsoft.CodeAnalysis.CSharp.Syntax.NullableTypeSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitObjectCreationExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ObjectCreationExpressionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitOmittedArraySizeExpression(Microsoft.CodeAnalysis.CSharp.Syntax.OmittedArraySizeExpressionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitOmittedTypeArgument(Microsoft.CodeAnalysis.CSharp.Syntax.OmittedTypeArgumentSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitOperatorDeclaration(Microsoft.CodeAnalysis.CSharp.Syntax.OperatorDeclarationSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitOperatorMemberCref(Microsoft.CodeAnalysis.CSharp.Syntax.OperatorMemberCrefSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitOrderByClause(Microsoft.CodeAnalysis.CSharp.Syntax.OrderByClauseSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitOrdering(Microsoft.CodeAnalysis.CSharp.Syntax.OrderingSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitParameter(Microsoft.CodeAnalysis.CSharp.Syntax.ParameterSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitParameterList(Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitParenthesizedExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ParenthesizedExpressionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitParenthesizedLambdaExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ParenthesizedLambdaExpressionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitParenthesizedVariableDesignation(Microsoft.CodeAnalysis.CSharp.Syntax.ParenthesizedVariableDesignationSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitPointerType(Microsoft.CodeAnalysis.CSharp.Syntax.PointerTypeSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitPostfixUnaryExpression(Microsoft.CodeAnalysis.CSharp.Syntax.PostfixUnaryExpressionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitPragmaChecksumDirectiveTrivia(Microsoft.CodeAnalysis.CSharp.Syntax.PragmaChecksumDirectiveTriviaSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitPragmaWarningDirectiveTrivia(Microsoft.CodeAnalysis.CSharp.Syntax.PragmaWarningDirectiveTriviaSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitPredefinedType(Microsoft.CodeAnalysis.CSharp.Syntax.PredefinedTypeSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitPrefixUnaryExpression(Microsoft.CodeAnalysis.CSharp.Syntax.PrefixUnaryExpressionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitPropertyDeclaration(Microsoft.CodeAnalysis.CSharp.Syntax.PropertyDeclarationSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitQualifiedCref(Microsoft.CodeAnalysis.CSharp.Syntax.QualifiedCrefSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitQualifiedName(Microsoft.CodeAnalysis.CSharp.Syntax.QualifiedNameSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitQueryBody(Microsoft.CodeAnalysis.CSharp.Syntax.QueryBodySyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitQueryContinuation(Microsoft.CodeAnalysis.CSharp.Syntax.QueryContinuationSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitQueryExpression(Microsoft.CodeAnalysis.CSharp.Syntax.QueryExpressionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitReferenceDirectiveTrivia(Microsoft.CodeAnalysis.CSharp.Syntax.ReferenceDirectiveTriviaSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitRefExpression(Microsoft.CodeAnalysis.CSharp.Syntax.RefExpressionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitRefType(Microsoft.CodeAnalysis.CSharp.Syntax.RefTypeSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitRefTypeExpression(Microsoft.CodeAnalysis.CSharp.Syntax.RefTypeExpressionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitRefValueExpression(Microsoft.CodeAnalysis.CSharp.Syntax.RefValueExpressionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitRegionDirectiveTrivia(Microsoft.CodeAnalysis.CSharp.Syntax.RegionDirectiveTriviaSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitReturnStatement(Microsoft.CodeAnalysis.CSharp.Syntax.ReturnStatementSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitSelectClause(Microsoft.CodeAnalysis.CSharp.Syntax.SelectClauseSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitShebangDirectiveTrivia(Microsoft.CodeAnalysis.CSharp.Syntax.ShebangDirectiveTriviaSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitSimpleBaseType(Microsoft.CodeAnalysis.CSharp.Syntax.SimpleBaseTypeSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitSimpleLambdaExpression(Microsoft.CodeAnalysis.CSharp.Syntax.SimpleLambdaExpressionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitSingleVariableDesignation(Microsoft.CodeAnalysis.CSharp.Syntax.SingleVariableDesignationSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitSizeOfExpression(Microsoft.CodeAnalysis.CSharp.Syntax.SizeOfExpressionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitSkippedTokensTrivia(Microsoft.CodeAnalysis.CSharp.Syntax.SkippedTokensTriviaSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitStackAllocArrayCreationExpression(Microsoft.CodeAnalysis.CSharp.Syntax.StackAllocArrayCreationExpressionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitStructDeclaration(Microsoft.CodeAnalysis.CSharp.Syntax.StructDeclarationSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitSwitchSection(Microsoft.CodeAnalysis.CSharp.Syntax.SwitchSectionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitSwitchStatement(Microsoft.CodeAnalysis.CSharp.Syntax.SwitchStatementSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitThisExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ThisExpressionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitThrowExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ThrowExpressionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitThrowStatement(Microsoft.CodeAnalysis.CSharp.Syntax.ThrowStatementSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitTryStatement(Microsoft.CodeAnalysis.CSharp.Syntax.TryStatementSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitTupleElement(Microsoft.CodeAnalysis.CSharp.Syntax.TupleElementSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitTupleExpression(Microsoft.CodeAnalysis.CSharp.Syntax.TupleExpressionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitTupleType(Microsoft.CodeAnalysis.CSharp.Syntax.TupleTypeSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitTypeArgumentList(Microsoft.CodeAnalysis.CSharp.Syntax.TypeArgumentListSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitTypeConstraint(Microsoft.CodeAnalysis.CSharp.Syntax.TypeConstraintSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitTypeCref(Microsoft.CodeAnalysis.CSharp.Syntax.TypeCrefSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitTypeOfExpression(Microsoft.CodeAnalysis.CSharp.Syntax.TypeOfExpressionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitTypeParameter(Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitTypeParameterConstraintClause(Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintClauseSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitTypeParameterList(Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterListSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitUndefDirectiveTrivia(Microsoft.CodeAnalysis.CSharp.Syntax.UndefDirectiveTriviaSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitUnsafeStatement(Microsoft.CodeAnalysis.CSharp.Syntax.UnsafeStatementSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitUsingDirective(Microsoft.CodeAnalysis.CSharp.Syntax.UsingDirectiveSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitUsingStatement(Microsoft.CodeAnalysis.CSharp.Syntax.UsingStatementSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitVariableDeclaration(Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclarationSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitVariableDeclarator(Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclaratorSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitWarningDirectiveTrivia(Microsoft.CodeAnalysis.CSharp.Syntax.WarningDirectiveTriviaSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitWhenClause(Microsoft.CodeAnalysis.CSharp.Syntax.WhenClauseSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitWhereClause(Microsoft.CodeAnalysis.CSharp.Syntax.WhereClauseSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitWhileStatement(Microsoft.CodeAnalysis.CSharp.Syntax.WhileStatementSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitXmlCDataSection(Microsoft.CodeAnalysis.CSharp.Syntax.XmlCDataSectionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitXmlComment(Microsoft.CodeAnalysis.CSharp.Syntax.XmlCommentSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitXmlCrefAttribute(Microsoft.CodeAnalysis.CSharp.Syntax.XmlCrefAttributeSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitXmlElement(Microsoft.CodeAnalysis.CSharp.Syntax.XmlElementSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitXmlElementEndTag(Microsoft.CodeAnalysis.CSharp.Syntax.XmlElementEndTagSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitXmlElementStartTag(Microsoft.CodeAnalysis.CSharp.Syntax.XmlElementStartTagSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitXmlEmptyElement(Microsoft.CodeAnalysis.CSharp.Syntax.XmlEmptyElementSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitXmlName(Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitXmlNameAttribute(Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameAttributeSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitXmlPrefix(Microsoft.CodeAnalysis.CSharp.Syntax.XmlPrefixSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitXmlProcessingInstruction(Microsoft.CodeAnalysis.CSharp.Syntax.XmlProcessingInstructionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitXmlText(Microsoft.CodeAnalysis.CSharp.Syntax.XmlTextSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitXmlTextAttribute(Microsoft.CodeAnalysis.CSharp.Syntax.XmlTextAttributeSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitYieldStatement(Microsoft.CodeAnalysis.CSharp.Syntax.YieldStatementSyntax)" />
    </Type>
    <Type Name="Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1" Id="T:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1">
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.#ctor" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.DefaultVisit(Microsoft.CodeAnalysis.SyntaxNode)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.Visit(Microsoft.CodeAnalysis.SyntaxNode)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitAccessorDeclaration(Microsoft.CodeAnalysis.CSharp.Syntax.AccessorDeclarationSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitAccessorList(Microsoft.CodeAnalysis.CSharp.Syntax.AccessorListSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitAliasQualifiedName(Microsoft.CodeAnalysis.CSharp.Syntax.AliasQualifiedNameSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitAnonymousMethodExpression(Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousMethodExpressionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitAnonymousObjectCreationExpression(Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousObjectCreationExpressionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitAnonymousObjectMemberDeclarator(Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousObjectMemberDeclaratorSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitArgument(Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitArgumentList(Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentListSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitArrayCreationExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ArrayCreationExpressionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitArrayRankSpecifier(Microsoft.CodeAnalysis.CSharp.Syntax.ArrayRankSpecifierSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitArrayType(Microsoft.CodeAnalysis.CSharp.Syntax.ArrayTypeSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitArrowExpressionClause(Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitAssignmentExpression(Microsoft.CodeAnalysis.CSharp.Syntax.AssignmentExpressionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitAttribute(Microsoft.CodeAnalysis.CSharp.Syntax.AttributeSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitAttributeArgument(Microsoft.CodeAnalysis.CSharp.Syntax.AttributeArgumentSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitAttributeArgumentList(Microsoft.CodeAnalysis.CSharp.Syntax.AttributeArgumentListSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitAttributeList(Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitAttributeTargetSpecifier(Microsoft.CodeAnalysis.CSharp.Syntax.AttributeTargetSpecifierSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitAwaitExpression(Microsoft.CodeAnalysis.CSharp.Syntax.AwaitExpressionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitBadDirectiveTrivia(Microsoft.CodeAnalysis.CSharp.Syntax.BadDirectiveTriviaSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitBaseExpression(Microsoft.CodeAnalysis.CSharp.Syntax.BaseExpressionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitBaseList(Microsoft.CodeAnalysis.CSharp.Syntax.BaseListSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitBinaryExpression(Microsoft.CodeAnalysis.CSharp.Syntax.BinaryExpressionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitBlock(Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitBracketedArgumentList(Microsoft.CodeAnalysis.CSharp.Syntax.BracketedArgumentListSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitBracketedParameterList(Microsoft.CodeAnalysis.CSharp.Syntax.BracketedParameterListSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitBreakStatement(Microsoft.CodeAnalysis.CSharp.Syntax.BreakStatementSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitCasePatternSwitchLabel(Microsoft.CodeAnalysis.CSharp.Syntax.CasePatternSwitchLabelSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitCaseSwitchLabel(Microsoft.CodeAnalysis.CSharp.Syntax.CaseSwitchLabelSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitCastExpression(Microsoft.CodeAnalysis.CSharp.Syntax.CastExpressionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitCatchClause(Microsoft.CodeAnalysis.CSharp.Syntax.CatchClauseSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitCatchDeclaration(Microsoft.CodeAnalysis.CSharp.Syntax.CatchDeclarationSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitCatchFilterClause(Microsoft.CodeAnalysis.CSharp.Syntax.CatchFilterClauseSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitCheckedExpression(Microsoft.CodeAnalysis.CSharp.Syntax.CheckedExpressionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitCheckedStatement(Microsoft.CodeAnalysis.CSharp.Syntax.CheckedStatementSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitClassDeclaration(Microsoft.CodeAnalysis.CSharp.Syntax.ClassDeclarationSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitClassOrStructConstraint(Microsoft.CodeAnalysis.CSharp.Syntax.ClassOrStructConstraintSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitCompilationUnit(Microsoft.CodeAnalysis.CSharp.Syntax.CompilationUnitSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitConditionalAccessExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ConditionalAccessExpressionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitConditionalExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ConditionalExpressionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitConstantPattern(Microsoft.CodeAnalysis.CSharp.Syntax.ConstantPatternSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitConstructorConstraint(Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorConstraintSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitConstructorDeclaration(Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorDeclarationSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitConstructorInitializer(Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorInitializerSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitContinueStatement(Microsoft.CodeAnalysis.CSharp.Syntax.ContinueStatementSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitConversionOperatorDeclaration(Microsoft.CodeAnalysis.CSharp.Syntax.ConversionOperatorDeclarationSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitConversionOperatorMemberCref(Microsoft.CodeAnalysis.CSharp.Syntax.ConversionOperatorMemberCrefSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitCrefBracketedParameterList(Microsoft.CodeAnalysis.CSharp.Syntax.CrefBracketedParameterListSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitCrefParameter(Microsoft.CodeAnalysis.CSharp.Syntax.CrefParameterSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitCrefParameterList(Microsoft.CodeAnalysis.CSharp.Syntax.CrefParameterListSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitDeclarationExpression(Microsoft.CodeAnalysis.CSharp.Syntax.DeclarationExpressionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitDeclarationPattern(Microsoft.CodeAnalysis.CSharp.Syntax.DeclarationPatternSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitDefaultExpression(Microsoft.CodeAnalysis.CSharp.Syntax.DefaultExpressionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitDefaultSwitchLabel(Microsoft.CodeAnalysis.CSharp.Syntax.DefaultSwitchLabelSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitDefineDirectiveTrivia(Microsoft.CodeAnalysis.CSharp.Syntax.DefineDirectiveTriviaSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitDelegateDeclaration(Microsoft.CodeAnalysis.CSharp.Syntax.DelegateDeclarationSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitDestructorDeclaration(Microsoft.CodeAnalysis.CSharp.Syntax.DestructorDeclarationSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitDiscardDesignation(Microsoft.CodeAnalysis.CSharp.Syntax.DiscardDesignationSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitDocumentationCommentTrivia(Microsoft.CodeAnalysis.CSharp.Syntax.DocumentationCommentTriviaSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitDoStatement(Microsoft.CodeAnalysis.CSharp.Syntax.DoStatementSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitElementAccessExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ElementAccessExpressionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitElementBindingExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ElementBindingExpressionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitElifDirectiveTrivia(Microsoft.CodeAnalysis.CSharp.Syntax.ElifDirectiveTriviaSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitElseClause(Microsoft.CodeAnalysis.CSharp.Syntax.ElseClauseSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitElseDirectiveTrivia(Microsoft.CodeAnalysis.CSharp.Syntax.ElseDirectiveTriviaSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitEmptyStatement(Microsoft.CodeAnalysis.CSharp.Syntax.EmptyStatementSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitEndIfDirectiveTrivia(Microsoft.CodeAnalysis.CSharp.Syntax.EndIfDirectiveTriviaSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitEndRegionDirectiveTrivia(Microsoft.CodeAnalysis.CSharp.Syntax.EndRegionDirectiveTriviaSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitEnumDeclaration(Microsoft.CodeAnalysis.CSharp.Syntax.EnumDeclarationSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitEnumMemberDeclaration(Microsoft.CodeAnalysis.CSharp.Syntax.EnumMemberDeclarationSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitEqualsValueClause(Microsoft.CodeAnalysis.CSharp.Syntax.EqualsValueClauseSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitErrorDirectiveTrivia(Microsoft.CodeAnalysis.CSharp.Syntax.ErrorDirectiveTriviaSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitEventDeclaration(Microsoft.CodeAnalysis.CSharp.Syntax.EventDeclarationSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitEventFieldDeclaration(Microsoft.CodeAnalysis.CSharp.Syntax.EventFieldDeclarationSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitExplicitInterfaceSpecifier(Microsoft.CodeAnalysis.CSharp.Syntax.ExplicitInterfaceSpecifierSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitExpressionStatement(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionStatementSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitExternAliasDirective(Microsoft.CodeAnalysis.CSharp.Syntax.ExternAliasDirectiveSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitFieldDeclaration(Microsoft.CodeAnalysis.CSharp.Syntax.FieldDeclarationSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitFinallyClause(Microsoft.CodeAnalysis.CSharp.Syntax.FinallyClauseSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitFixedStatement(Microsoft.CodeAnalysis.CSharp.Syntax.FixedStatementSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitForEachStatement(Microsoft.CodeAnalysis.CSharp.Syntax.ForEachStatementSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitForEachVariableStatement(Microsoft.CodeAnalysis.CSharp.Syntax.ForEachVariableStatementSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitForStatement(Microsoft.CodeAnalysis.CSharp.Syntax.ForStatementSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitFromClause(Microsoft.CodeAnalysis.CSharp.Syntax.FromClauseSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitGenericName(Microsoft.CodeAnalysis.CSharp.Syntax.GenericNameSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitGlobalStatement(Microsoft.CodeAnalysis.CSharp.Syntax.GlobalStatementSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitGotoStatement(Microsoft.CodeAnalysis.CSharp.Syntax.GotoStatementSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitGroupClause(Microsoft.CodeAnalysis.CSharp.Syntax.GroupClauseSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitIdentifierName(Microsoft.CodeAnalysis.CSharp.Syntax.IdentifierNameSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitIfDirectiveTrivia(Microsoft.CodeAnalysis.CSharp.Syntax.IfDirectiveTriviaSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitIfStatement(Microsoft.CodeAnalysis.CSharp.Syntax.IfStatementSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitImplicitArrayCreationExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ImplicitArrayCreationExpressionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitImplicitElementAccess(Microsoft.CodeAnalysis.CSharp.Syntax.ImplicitElementAccessSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitIncompleteMember(Microsoft.CodeAnalysis.CSharp.Syntax.IncompleteMemberSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitIndexerDeclaration(Microsoft.CodeAnalysis.CSharp.Syntax.IndexerDeclarationSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitIndexerMemberCref(Microsoft.CodeAnalysis.CSharp.Syntax.IndexerMemberCrefSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitInitializerExpression(Microsoft.CodeAnalysis.CSharp.Syntax.InitializerExpressionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitInterfaceDeclaration(Microsoft.CodeAnalysis.CSharp.Syntax.InterfaceDeclarationSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitInterpolatedStringExpression(Microsoft.CodeAnalysis.CSharp.Syntax.InterpolatedStringExpressionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitInterpolatedStringText(Microsoft.CodeAnalysis.CSharp.Syntax.InterpolatedStringTextSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitInterpolation(Microsoft.CodeAnalysis.CSharp.Syntax.InterpolationSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitInterpolationAlignmentClause(Microsoft.CodeAnalysis.CSharp.Syntax.InterpolationAlignmentClauseSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitInterpolationFormatClause(Microsoft.CodeAnalysis.CSharp.Syntax.InterpolationFormatClauseSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitInvocationExpression(Microsoft.CodeAnalysis.CSharp.Syntax.InvocationExpressionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitIsPatternExpression(Microsoft.CodeAnalysis.CSharp.Syntax.IsPatternExpressionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitJoinClause(Microsoft.CodeAnalysis.CSharp.Syntax.JoinClauseSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitJoinIntoClause(Microsoft.CodeAnalysis.CSharp.Syntax.JoinIntoClauseSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitLabeledStatement(Microsoft.CodeAnalysis.CSharp.Syntax.LabeledStatementSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitLetClause(Microsoft.CodeAnalysis.CSharp.Syntax.LetClauseSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitLineDirectiveTrivia(Microsoft.CodeAnalysis.CSharp.Syntax.LineDirectiveTriviaSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitLiteralExpression(Microsoft.CodeAnalysis.CSharp.Syntax.LiteralExpressionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitLoadDirectiveTrivia(Microsoft.CodeAnalysis.CSharp.Syntax.LoadDirectiveTriviaSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitLocalDeclarationStatement(Microsoft.CodeAnalysis.CSharp.Syntax.LocalDeclarationStatementSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitLocalFunctionStatement(Microsoft.CodeAnalysis.CSharp.Syntax.LocalFunctionStatementSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitLockStatement(Microsoft.CodeAnalysis.CSharp.Syntax.LockStatementSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitMakeRefExpression(Microsoft.CodeAnalysis.CSharp.Syntax.MakeRefExpressionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitMemberAccessExpression(Microsoft.CodeAnalysis.CSharp.Syntax.MemberAccessExpressionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitMemberBindingExpression(Microsoft.CodeAnalysis.CSharp.Syntax.MemberBindingExpressionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitMethodDeclaration(Microsoft.CodeAnalysis.CSharp.Syntax.MethodDeclarationSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitNameColon(Microsoft.CodeAnalysis.CSharp.Syntax.NameColonSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitNameEquals(Microsoft.CodeAnalysis.CSharp.Syntax.NameEqualsSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitNameMemberCref(Microsoft.CodeAnalysis.CSharp.Syntax.NameMemberCrefSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitNamespaceDeclaration(Microsoft.CodeAnalysis.CSharp.Syntax.NamespaceDeclarationSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitNullableType(Microsoft.CodeAnalysis.CSharp.Syntax.NullableTypeSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitObjectCreationExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ObjectCreationExpressionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitOmittedArraySizeExpression(Microsoft.CodeAnalysis.CSharp.Syntax.OmittedArraySizeExpressionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitOmittedTypeArgument(Microsoft.CodeAnalysis.CSharp.Syntax.OmittedTypeArgumentSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitOperatorDeclaration(Microsoft.CodeAnalysis.CSharp.Syntax.OperatorDeclarationSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitOperatorMemberCref(Microsoft.CodeAnalysis.CSharp.Syntax.OperatorMemberCrefSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitOrderByClause(Microsoft.CodeAnalysis.CSharp.Syntax.OrderByClauseSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitOrdering(Microsoft.CodeAnalysis.CSharp.Syntax.OrderingSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitParameter(Microsoft.CodeAnalysis.CSharp.Syntax.ParameterSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitParameterList(Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitParenthesizedExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ParenthesizedExpressionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitParenthesizedLambdaExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ParenthesizedLambdaExpressionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitParenthesizedVariableDesignation(Microsoft.CodeAnalysis.CSharp.Syntax.ParenthesizedVariableDesignationSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitPointerType(Microsoft.CodeAnalysis.CSharp.Syntax.PointerTypeSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitPostfixUnaryExpression(Microsoft.CodeAnalysis.CSharp.Syntax.PostfixUnaryExpressionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitPragmaChecksumDirectiveTrivia(Microsoft.CodeAnalysis.CSharp.Syntax.PragmaChecksumDirectiveTriviaSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitPragmaWarningDirectiveTrivia(Microsoft.CodeAnalysis.CSharp.Syntax.PragmaWarningDirectiveTriviaSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitPredefinedType(Microsoft.CodeAnalysis.CSharp.Syntax.PredefinedTypeSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitPrefixUnaryExpression(Microsoft.CodeAnalysis.CSharp.Syntax.PrefixUnaryExpressionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitPropertyDeclaration(Microsoft.CodeAnalysis.CSharp.Syntax.PropertyDeclarationSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitQualifiedCref(Microsoft.CodeAnalysis.CSharp.Syntax.QualifiedCrefSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitQualifiedName(Microsoft.CodeAnalysis.CSharp.Syntax.QualifiedNameSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitQueryBody(Microsoft.CodeAnalysis.CSharp.Syntax.QueryBodySyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitQueryContinuation(Microsoft.CodeAnalysis.CSharp.Syntax.QueryContinuationSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitQueryExpression(Microsoft.CodeAnalysis.CSharp.Syntax.QueryExpressionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitReferenceDirectiveTrivia(Microsoft.CodeAnalysis.CSharp.Syntax.ReferenceDirectiveTriviaSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitRefExpression(Microsoft.CodeAnalysis.CSharp.Syntax.RefExpressionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitRefType(Microsoft.CodeAnalysis.CSharp.Syntax.RefTypeSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitRefTypeExpression(Microsoft.CodeAnalysis.CSharp.Syntax.RefTypeExpressionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitRefValueExpression(Microsoft.CodeAnalysis.CSharp.Syntax.RefValueExpressionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitRegionDirectiveTrivia(Microsoft.CodeAnalysis.CSharp.Syntax.RegionDirectiveTriviaSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitReturnStatement(Microsoft.CodeAnalysis.CSharp.Syntax.ReturnStatementSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitSelectClause(Microsoft.CodeAnalysis.CSharp.Syntax.SelectClauseSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitShebangDirectiveTrivia(Microsoft.CodeAnalysis.CSharp.Syntax.ShebangDirectiveTriviaSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitSimpleBaseType(Microsoft.CodeAnalysis.CSharp.Syntax.SimpleBaseTypeSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitSimpleLambdaExpression(Microsoft.CodeAnalysis.CSharp.Syntax.SimpleLambdaExpressionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitSingleVariableDesignation(Microsoft.CodeAnalysis.CSharp.Syntax.SingleVariableDesignationSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitSizeOfExpression(Microsoft.CodeAnalysis.CSharp.Syntax.SizeOfExpressionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitSkippedTokensTrivia(Microsoft.CodeAnalysis.CSharp.Syntax.SkippedTokensTriviaSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitStackAllocArrayCreationExpression(Microsoft.CodeAnalysis.CSharp.Syntax.StackAllocArrayCreationExpressionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitStructDeclaration(Microsoft.CodeAnalysis.CSharp.Syntax.StructDeclarationSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitSwitchSection(Microsoft.CodeAnalysis.CSharp.Syntax.SwitchSectionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitSwitchStatement(Microsoft.CodeAnalysis.CSharp.Syntax.SwitchStatementSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitThisExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ThisExpressionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitThrowExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ThrowExpressionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitThrowStatement(Microsoft.CodeAnalysis.CSharp.Syntax.ThrowStatementSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitTryStatement(Microsoft.CodeAnalysis.CSharp.Syntax.TryStatementSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitTupleElement(Microsoft.CodeAnalysis.CSharp.Syntax.TupleElementSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitTupleExpression(Microsoft.CodeAnalysis.CSharp.Syntax.TupleExpressionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitTupleType(Microsoft.CodeAnalysis.CSharp.Syntax.TupleTypeSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitTypeArgumentList(Microsoft.CodeAnalysis.CSharp.Syntax.TypeArgumentListSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitTypeConstraint(Microsoft.CodeAnalysis.CSharp.Syntax.TypeConstraintSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitTypeCref(Microsoft.CodeAnalysis.CSharp.Syntax.TypeCrefSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitTypeOfExpression(Microsoft.CodeAnalysis.CSharp.Syntax.TypeOfExpressionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitTypeParameter(Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitTypeParameterConstraintClause(Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintClauseSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitTypeParameterList(Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterListSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitUndefDirectiveTrivia(Microsoft.CodeAnalysis.CSharp.Syntax.UndefDirectiveTriviaSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitUnsafeStatement(Microsoft.CodeAnalysis.CSharp.Syntax.UnsafeStatementSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitUsingDirective(Microsoft.CodeAnalysis.CSharp.Syntax.UsingDirectiveSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitUsingStatement(Microsoft.CodeAnalysis.CSharp.Syntax.UsingStatementSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitVariableDeclaration(Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclarationSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitVariableDeclarator(Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclaratorSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitWarningDirectiveTrivia(Microsoft.CodeAnalysis.CSharp.Syntax.WarningDirectiveTriviaSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitWhenClause(Microsoft.CodeAnalysis.CSharp.Syntax.WhenClauseSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitWhereClause(Microsoft.CodeAnalysis.CSharp.Syntax.WhereClauseSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitWhileStatement(Microsoft.CodeAnalysis.CSharp.Syntax.WhileStatementSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitXmlCDataSection(Microsoft.CodeAnalysis.CSharp.Syntax.XmlCDataSectionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitXmlComment(Microsoft.CodeAnalysis.CSharp.Syntax.XmlCommentSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitXmlCrefAttribute(Microsoft.CodeAnalysis.CSharp.Syntax.XmlCrefAttributeSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitXmlElement(Microsoft.CodeAnalysis.CSharp.Syntax.XmlElementSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitXmlElementEndTag(Microsoft.CodeAnalysis.CSharp.Syntax.XmlElementEndTagSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitXmlElementStartTag(Microsoft.CodeAnalysis.CSharp.Syntax.XmlElementStartTagSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitXmlEmptyElement(Microsoft.CodeAnalysis.CSharp.Syntax.XmlEmptyElementSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitXmlName(Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitXmlNameAttribute(Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameAttributeSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitXmlPrefix(Microsoft.CodeAnalysis.CSharp.Syntax.XmlPrefixSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitXmlProcessingInstruction(Microsoft.CodeAnalysis.CSharp.Syntax.XmlProcessingInstructionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitXmlText(Microsoft.CodeAnalysis.CSharp.Syntax.XmlTextSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitXmlTextAttribute(Microsoft.CodeAnalysis.CSharp.Syntax.XmlTextAttributeSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitYieldStatement(Microsoft.CodeAnalysis.CSharp.Syntax.YieldStatementSyntax)" />
    </Type>
    <Type Name="Microsoft.CodeAnalysis.CSharp.CSharpSyntaxWalker" Id="T:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxWalker">
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxWalker.#ctor(Microsoft.CodeAnalysis.SyntaxWalkerDepth)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxWalker.DefaultVisit(Microsoft.CodeAnalysis.SyntaxNode)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxWalker.Visit(Microsoft.CodeAnalysis.SyntaxNode)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxWalker.VisitLeadingTrivia(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxWalker.VisitToken(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxWalker.VisitTrailingTrivia(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxWalker.VisitTrivia(Microsoft.CodeAnalysis.SyntaxTrivia)" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxWalker.Depth" />
    </Type>
    <Type Name="Microsoft.CodeAnalysis.CSharp.ForEachStatementInfo" Id="T:Microsoft.CodeAnalysis.CSharp.ForEachStatementInfo">
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.ForEachStatementInfo.Equals(Microsoft.CodeAnalysis.CSharp.ForEachStatementInfo)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.ForEachStatementInfo.Equals(System.Object)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.ForEachStatementInfo.GetHashCode" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.ForEachStatementInfo.CurrentConversion" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.ForEachStatementInfo.CurrentProperty" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.ForEachStatementInfo.DisposeMethod" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.ForEachStatementInfo.ElementConversion" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.ForEachStatementInfo.ElementType" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.ForEachStatementInfo.GetEnumeratorMethod" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.ForEachStatementInfo.MoveNextMethod" />
    </Type>
    <Type Name="Microsoft.CodeAnalysis.CSharp.LanguageVersion" Id="T:Microsoft.CodeAnalysis.CSharp.LanguageVersion">
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.LanguageVersion.CSharp1" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.LanguageVersion.CSharp2" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.LanguageVersion.CSharp3" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.LanguageVersion.CSharp4" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.LanguageVersion.CSharp5" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.LanguageVersion.CSharp6" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.LanguageVersion.CSharp7" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.LanguageVersion.CSharp7_1" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.LanguageVersion.Default" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.LanguageVersion.Latest" />
    </Type>
    <Type Name="Microsoft.CodeAnalysis.CSharp.LanguageVersionFacts" Id="T:Microsoft.CodeAnalysis.CSharp.LanguageVersionFacts">
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.LanguageVersionFacts.MapSpecifiedToEffectiveVersion(Microsoft.CodeAnalysis.CSharp.LanguageVersion)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.LanguageVersionFacts.ToDisplayString(Microsoft.CodeAnalysis.CSharp.LanguageVersion)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.LanguageVersionFacts.TryParse(System.String,Microsoft.CodeAnalysis.CSharp.LanguageVersion@)" />
    </Type>
    <Type Name="Microsoft.CodeAnalysis.CSharp.QueryClauseInfo" Id="T:Microsoft.CodeAnalysis.CSharp.QueryClauseInfo">
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.QueryClauseInfo.Equals(Microsoft.CodeAnalysis.CSharp.QueryClauseInfo)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.QueryClauseInfo.Equals(System.Object)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.QueryClauseInfo.GetHashCode" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.QueryClauseInfo.CastInfo" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.QueryClauseInfo.OperationInfo" />
    </Type>
    <Type Name="Microsoft.CodeAnalysis.CSharp.SymbolDisplay" Id="T:Microsoft.CodeAnalysis.CSharp.SymbolDisplay">
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SymbolDisplay.FormatLiteral(System.Char,System.Boolean)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SymbolDisplay.FormatLiteral(System.String,System.Boolean)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SymbolDisplay.FormatPrimitive(System.Object,System.Boolean,System.Boolean)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SymbolDisplay.ToDisplayParts(Microsoft.CodeAnalysis.ISymbol,Microsoft.CodeAnalysis.SymbolDisplayFormat)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SymbolDisplay.ToDisplayString(Microsoft.CodeAnalysis.ISymbol,Microsoft.CodeAnalysis.SymbolDisplayFormat)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SymbolDisplay.ToMinimalDisplayParts(Microsoft.CodeAnalysis.ISymbol,Microsoft.CodeAnalysis.SemanticModel,System.Int32,Microsoft.CodeAnalysis.SymbolDisplayFormat)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SymbolDisplay.ToMinimalDisplayString(Microsoft.CodeAnalysis.ISymbol,Microsoft.CodeAnalysis.SemanticModel,System.Int32,Microsoft.CodeAnalysis.SymbolDisplayFormat)" />
    </Type>
    <Type Name="Microsoft.CodeAnalysis.CSharp.SyntaxExtensions" Id="T:Microsoft.CodeAnalysis.CSharp.SyntaxExtensions">
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxExtensions.NormalizeWhitespace(Microsoft.CodeAnalysis.SyntaxToken,System.String,System.Boolean)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxExtensions.NormalizeWhitespace(Microsoft.CodeAnalysis.SyntaxToken,System.String,System.String,System.Boolean)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxExtensions.NormalizeWhitespace(Microsoft.CodeAnalysis.SyntaxTriviaList,System.String,System.Boolean)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxExtensions.NormalizeWhitespace(Microsoft.CodeAnalysis.SyntaxTriviaList,System.String,System.String,System.Boolean)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxExtensions.ToSyntaxTriviaList(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxTrivia})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxExtensions.Update(Microsoft.CodeAnalysis.CSharp.Syntax.IndexerDeclarationSyntax,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ExplicitInterfaceSpecifierSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.BracketedParameterListSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.AccessorListSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxExtensions.Update(Microsoft.CodeAnalysis.CSharp.Syntax.MethodDeclarationSyntax,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ExplicitInterfaceSpecifierSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterListSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintClauseSyntax},Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax,Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxExtensions.Update(Microsoft.CodeAnalysis.CSharp.Syntax.OperatorDeclarationSyntax,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax,Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxExtensions.WithIdentifier(Microsoft.CodeAnalysis.CSharp.Syntax.SimpleNameSyntax,Microsoft.CodeAnalysis.SyntaxToken)" />
    </Type>
    <Type Name="Microsoft.CodeAnalysis.CSharp.SyntaxFactory" Id="T:Microsoft.CodeAnalysis.CSharp.SyntaxFactory">
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AccessorDeclaration(Microsoft.CodeAnalysis.CSharp.SyntaxKind)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AccessorDeclaration(Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AccessorDeclaration(Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AccessorDeclaration(Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AccessorDeclaration(Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AccessorDeclaration(Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax,Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AccessorDeclaration(Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax,Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AccessorDeclaration(Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax,Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AccessorList(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AccessorDeclarationSyntax})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AccessorList(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AccessorDeclarationSyntax},Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AliasQualifiedName(Microsoft.CodeAnalysis.CSharp.Syntax.IdentifierNameSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.SimpleNameSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AliasQualifiedName(Microsoft.CodeAnalysis.CSharp.Syntax.IdentifierNameSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.SimpleNameSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AliasQualifiedName(System.String,Microsoft.CodeAnalysis.CSharp.Syntax.SimpleNameSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AnonymousMethodExpression" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AnonymousMethodExpression(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AnonymousMethodExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax,Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AnonymousMethodExpression(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax,Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AnonymousObjectCreationExpression(Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousObjectMemberDeclaratorSyntax})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AnonymousObjectCreationExpression(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousObjectMemberDeclaratorSyntax},Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AnonymousObjectMemberDeclarator(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AnonymousObjectMemberDeclarator(Microsoft.CodeAnalysis.CSharp.Syntax.NameEqualsSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AreEquivalent(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode,System.Boolean)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AreEquivalent(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode,System.Func{Microsoft.CodeAnalysis.CSharp.SyntaxKind,System.Boolean})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AreEquivalent(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AreEquivalent(Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.SyntaxTokenList)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AreEquivalent(Microsoft.CodeAnalysis.SyntaxTree,Microsoft.CodeAnalysis.SyntaxTree,System.Boolean)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AreEquivalent``1(Microsoft.CodeAnalysis.SeparatedSyntaxList{``0},Microsoft.CodeAnalysis.SeparatedSyntaxList{``0},System.Boolean)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AreEquivalent``1(Microsoft.CodeAnalysis.SeparatedSyntaxList{``0},Microsoft.CodeAnalysis.SeparatedSyntaxList{``0},System.Func{Microsoft.CodeAnalysis.CSharp.SyntaxKind,System.Boolean})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AreEquivalent``1(Microsoft.CodeAnalysis.SyntaxList{``0},Microsoft.CodeAnalysis.SyntaxList{``0},System.Boolean)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AreEquivalent``1(Microsoft.CodeAnalysis.SyntaxList{``0},Microsoft.CodeAnalysis.SyntaxList{``0},System.Func{Microsoft.CodeAnalysis.CSharp.SyntaxKind,System.Boolean})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Argument(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Argument(Microsoft.CodeAnalysis.CSharp.Syntax.NameColonSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ArgumentList(Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentSyntax})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ArgumentList(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentSyntax},Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ArrayCreationExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ArrayTypeSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ArrayCreationExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ArrayTypeSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.InitializerExpressionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ArrayCreationExpression(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ArrayTypeSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.InitializerExpressionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ArrayRankSpecifier(Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ArrayRankSpecifier(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax},Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ArrayType(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ArrayType(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.ArrayRankSpecifierSyntax})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ArrowExpressionClause(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ArrowExpressionClause(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AssignmentExpression(Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AssignmentExpression(Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Attribute(Microsoft.CodeAnalysis.CSharp.Syntax.NameSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Attribute(Microsoft.CodeAnalysis.CSharp.Syntax.NameSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.AttributeArgumentListSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AttributeArgument(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AttributeArgument(Microsoft.CodeAnalysis.CSharp.Syntax.NameEqualsSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.NameColonSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AttributeArgumentList(Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeArgumentSyntax})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AttributeArgumentList(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeArgumentSyntax},Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AttributeList(Microsoft.CodeAnalysis.CSharp.Syntax.AttributeTargetSpecifierSyntax,Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeSyntax})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AttributeList(Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeSyntax})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AttributeList(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.AttributeTargetSpecifierSyntax,Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeSyntax},Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AttributeTargetSpecifier(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AttributeTargetSpecifier(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AwaitExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AwaitExpression(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.BadDirectiveTrivia(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,System.Boolean)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.BadDirectiveTrivia(Microsoft.CodeAnalysis.SyntaxToken,System.Boolean)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.BadToken(Microsoft.CodeAnalysis.SyntaxTriviaList,System.String,Microsoft.CodeAnalysis.SyntaxTriviaList)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.BaseExpression" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.BaseExpression(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.BaseList(Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.BaseTypeSyntax})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.BaseList(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.BaseTypeSyntax})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.BinaryExpression(Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.BinaryExpression(Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Block(Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax[])" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Block(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Block(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax},Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Block(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.BracketedArgumentList(Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentSyntax})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.BracketedArgumentList(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentSyntax},Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.BracketedParameterList(Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.ParameterSyntax})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.BracketedParameterList(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.ParameterSyntax},Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.BreakStatement" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.BreakStatement(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.CasePatternSwitchLabel(Microsoft.CodeAnalysis.CSharp.Syntax.PatternSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.WhenClauseSyntax,Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.CasePatternSwitchLabel(Microsoft.CodeAnalysis.CSharp.Syntax.PatternSyntax,Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.CasePatternSwitchLabel(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.PatternSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.WhenClauseSyntax,Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.CaseSwitchLabel(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.CaseSwitchLabel(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.CaseSwitchLabel(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.CastExpression(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.CastExpression(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.CatchClause" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.CatchClause(Microsoft.CodeAnalysis.CSharp.Syntax.CatchDeclarationSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.CatchFilterClauseSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.CatchClause(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.CatchDeclarationSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.CatchFilterClauseSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.CatchDeclaration(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.CatchDeclaration(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.CatchDeclaration(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.CatchFilterClause(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.CatchFilterClause(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.CheckedExpression(Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.CheckedExpression(Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.CheckedStatement(Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.CheckedStatement(Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ClassDeclaration(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterListSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.BaseListSyntax,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintClauseSyntax},Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ClassDeclaration(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterListSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.BaseListSyntax,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintClauseSyntax},Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax},Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ClassDeclaration(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ClassDeclaration(System.String)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ClassOrStructConstraint(Microsoft.CodeAnalysis.CSharp.SyntaxKind)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ClassOrStructConstraint(Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Comment(System.String)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.CompilationUnit" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.CompilationUnit(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.ExternAliasDirectiveSyntax},Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.UsingDirectiveSyntax},Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.CompilationUnit(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.ExternAliasDirectiveSyntax},Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.UsingDirectiveSyntax},Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax},Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ConditionalAccessExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ConditionalAccessExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ConditionalExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ConditionalExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ConstantPattern(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ConstructorConstraint" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ConstructorConstraint(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ConstructorDeclaration(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorInitializerSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ConstructorDeclaration(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorInitializerSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax,Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ConstructorDeclaration(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorInitializerSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ConstructorDeclaration(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorInitializerSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ConstructorDeclaration(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorInitializerSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax,Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ConstructorDeclaration(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorInitializerSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax,Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ConstructorDeclaration(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ConstructorDeclaration(System.String)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ConstructorInitializer(Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentListSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ConstructorInitializer(Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentListSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ContinueStatement" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ContinueStatement(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ConversionOperatorDeclaration(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ConversionOperatorDeclaration(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax,Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ConversionOperatorDeclaration(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax,Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ConversionOperatorDeclaration(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ConversionOperatorMemberCref(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ConversionOperatorMemberCref(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.CrefParameterListSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ConversionOperatorMemberCref(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.CrefParameterListSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.CrefBracketedParameterList(Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.CrefParameterSyntax})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.CrefBracketedParameterList(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.CrefParameterSyntax},Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.CrefParameter(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.CrefParameter(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.CrefParameterList(Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.CrefParameterSyntax})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.CrefParameterList(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.CrefParameterSyntax},Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.DeclarationExpression(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.VariableDesignationSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.DeclarationPattern(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.VariableDesignationSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.DefaultExpression(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.DefaultExpression(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.DefaultSwitchLabel" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.DefaultSwitchLabel(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.DefaultSwitchLabel(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.DefineDirectiveTrivia(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,System.Boolean)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.DefineDirectiveTrivia(Microsoft.CodeAnalysis.SyntaxToken,System.Boolean)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.DefineDirectiveTrivia(System.String,System.Boolean)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.DelegateDeclaration(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.DelegateDeclaration(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,System.String)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.DelegateDeclaration(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterListSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintClauseSyntax})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.DelegateDeclaration(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterListSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintClauseSyntax},Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.DestructorDeclaration(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.DestructorDeclaration(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.DestructorDeclaration(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.DestructorDeclaration(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax,Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.DestructorDeclaration(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax,Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.DestructorDeclaration(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax,Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.DestructorDeclaration(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.DestructorDeclaration(System.String)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.DisabledText(System.String)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.DiscardDesignation" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.DiscardDesignation(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.DocumentationComment(Microsoft.CodeAnalysis.CSharp.Syntax.XmlNodeSyntax[])" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.DocumentationCommentExterior(System.String)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.DocumentationCommentTrivia(Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.XmlNodeSyntax})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.DocumentationCommentTrivia(Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.XmlNodeSyntax},Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.DoStatement(Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.DoStatement(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ElasticEndOfLine(System.String)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ElasticWhitespace(System.String)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ElementAccessExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ElementAccessExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.BracketedArgumentListSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ElementBindingExpression" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ElementBindingExpression(Microsoft.CodeAnalysis.CSharp.Syntax.BracketedArgumentListSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ElifDirectiveTrivia(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,System.Boolean,System.Boolean,System.Boolean)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ElifDirectiveTrivia(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken,System.Boolean,System.Boolean,System.Boolean)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ElseClause(Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ElseClause(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ElseDirectiveTrivia(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,System.Boolean,System.Boolean)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ElseDirectiveTrivia(System.Boolean,System.Boolean)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.EmptyStatement" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.EmptyStatement(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.EndIfDirectiveTrivia(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,System.Boolean)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.EndIfDirectiveTrivia(System.Boolean)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.EndOfLine(System.String)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.EndOfLine(System.String,System.Boolean)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.EndRegionDirectiveTrivia(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,System.Boolean)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.EndRegionDirectiveTrivia(System.Boolean)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.EnumDeclaration(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.BaseListSyntax,Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.EnumMemberDeclarationSyntax})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.EnumDeclaration(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.BaseListSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.EnumMemberDeclarationSyntax},Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.EnumDeclaration(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.EnumDeclaration(System.String)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.EnumMemberDeclaration(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.EqualsValueClauseSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.EnumMemberDeclaration(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.EnumMemberDeclaration(System.String)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.EqualsValueClause(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.EqualsValueClause(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ErrorDirectiveTrivia(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,System.Boolean)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ErrorDirectiveTrivia(System.Boolean)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.EventDeclaration(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.EventDeclaration(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,System.String)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.EventDeclaration(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ExplicitInterfaceSpecifierSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.AccessorListSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.EventDeclaration(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ExplicitInterfaceSpecifierSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.AccessorListSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.EventFieldDeclaration(Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclarationSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.EventFieldDeclaration(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclarationSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.EventFieldDeclaration(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclarationSyntax,Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ExplicitInterfaceSpecifier(Microsoft.CodeAnalysis.CSharp.Syntax.NameSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ExplicitInterfaceSpecifier(Microsoft.CodeAnalysis.CSharp.Syntax.NameSyntax,Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ExpressionStatement(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ExpressionStatement(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ExternAliasDirective(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ExternAliasDirective(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ExternAliasDirective(System.String)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.FieldDeclaration(Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclarationSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.FieldDeclaration(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclarationSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.FieldDeclaration(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclarationSyntax,Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.FinallyClause(Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.FinallyClause(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.FixedStatement(Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclarationSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.FixedStatement(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclarationSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ForEachStatement(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ForEachStatement(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,System.String,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ForEachStatement(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ForEachVariableStatement(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ForEachVariableStatement(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ForStatement(Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ForStatement(Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclarationSyntax,Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax},Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax},Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ForStatement(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclarationSyntax,Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax},Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax},Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.FromClause(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.FromClause(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.FromClause(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.FromClause(System.String,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.GenericName(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.GenericName(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.TypeArgumentListSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.GenericName(System.String)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.GetNonGenericExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.GetStandaloneExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.GlobalStatement(Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.GotoStatement(Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.GotoStatement(Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.GotoStatement(Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.GroupClause(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.GroupClause(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Identifier(Microsoft.CodeAnalysis.SyntaxTriviaList,Microsoft.CodeAnalysis.CSharp.SyntaxKind,System.String,System.String,Microsoft.CodeAnalysis.SyntaxTriviaList)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Identifier(Microsoft.CodeAnalysis.SyntaxTriviaList,System.String,Microsoft.CodeAnalysis.SyntaxTriviaList)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Identifier(System.String)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.IdentifierName(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.IdentifierName(System.String)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.IfDirectiveTrivia(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,System.Boolean,System.Boolean,System.Boolean)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.IfDirectiveTrivia(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken,System.Boolean,System.Boolean,System.Boolean)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.IfStatement(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.IfStatement(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ElseClauseSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.IfStatement(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ElseClauseSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ImplicitArrayCreationExpression(Microsoft.CodeAnalysis.CSharp.Syntax.InitializerExpressionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ImplicitArrayCreationExpression(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.InitializerExpressionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ImplicitArrayCreationExpression(Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.CSharp.Syntax.InitializerExpressionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ImplicitElementAccess" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ImplicitElementAccess(Microsoft.CodeAnalysis.CSharp.Syntax.BracketedArgumentListSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.IncompleteMember(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.IncompleteMember(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.IndexerDeclaration(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.IndexerDeclaration(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ExplicitInterfaceSpecifierSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.BracketedParameterListSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.AccessorListSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.IndexerDeclaration(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ExplicitInterfaceSpecifierSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.BracketedParameterListSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.AccessorListSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.IndexerDeclaration(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ExplicitInterfaceSpecifierSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.BracketedParameterListSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.AccessorListSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax,Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.IndexerMemberCref(Microsoft.CodeAnalysis.CSharp.Syntax.CrefBracketedParameterListSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.IndexerMemberCref(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.CrefBracketedParameterListSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.InitializerExpression(Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.InitializerExpression(Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax},Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.InterfaceDeclaration(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterListSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.BaseListSyntax,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintClauseSyntax},Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.InterfaceDeclaration(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterListSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.BaseListSyntax,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintClauseSyntax},Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax},Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.InterfaceDeclaration(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.InterfaceDeclaration(System.String)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.InterpolatedStringExpression(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.InterpolatedStringExpression(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.InterpolatedStringContentSyntax})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.InterpolatedStringExpression(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.InterpolatedStringContentSyntax},Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.InterpolatedStringText" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.InterpolatedStringText(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Interpolation(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Interpolation(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.InterpolationAlignmentClauseSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.InterpolationFormatClauseSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Interpolation(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.InterpolationAlignmentClauseSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.InterpolationFormatClauseSyntax,Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.InterpolationAlignmentClause(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.InterpolationFormatClause(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.InterpolationFormatClause(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.InvocationExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.InvocationExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentListSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.IsCompleteSubmission(Microsoft.CodeAnalysis.SyntaxTree)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.IsPatternExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.PatternSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.IsPatternExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.PatternSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.JoinClause(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.JoinIntoClauseSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.JoinClause(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.JoinClause(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.JoinIntoClauseSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.JoinClause(System.String,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.JoinIntoClause(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.JoinIntoClause(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.JoinIntoClause(System.String)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.LabeledStatement(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.LabeledStatement(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.LabeledStatement(System.String,Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.LetClause(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.LetClause(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.LetClause(System.String,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.LineDirectiveTrivia(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,System.Boolean)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.LineDirectiveTrivia(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,System.Boolean)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.LineDirectiveTrivia(Microsoft.CodeAnalysis.SyntaxToken,System.Boolean)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.List``1" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.List``1(System.Collections.Generic.IEnumerable{``0})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal(Microsoft.CodeAnalysis.SyntaxTriviaList,System.String,System.Char,Microsoft.CodeAnalysis.SyntaxTriviaList)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal(Microsoft.CodeAnalysis.SyntaxTriviaList,System.String,System.Decimal,Microsoft.CodeAnalysis.SyntaxTriviaList)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal(Microsoft.CodeAnalysis.SyntaxTriviaList,System.String,System.Double,Microsoft.CodeAnalysis.SyntaxTriviaList)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal(Microsoft.CodeAnalysis.SyntaxTriviaList,System.String,System.Int32,Microsoft.CodeAnalysis.SyntaxTriviaList)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal(Microsoft.CodeAnalysis.SyntaxTriviaList,System.String,System.Int64,Microsoft.CodeAnalysis.SyntaxTriviaList)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal(Microsoft.CodeAnalysis.SyntaxTriviaList,System.String,System.Single,Microsoft.CodeAnalysis.SyntaxTriviaList)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal(Microsoft.CodeAnalysis.SyntaxTriviaList,System.String,System.String,Microsoft.CodeAnalysis.SyntaxTriviaList)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal(Microsoft.CodeAnalysis.SyntaxTriviaList,System.String,System.UInt32,Microsoft.CodeAnalysis.SyntaxTriviaList)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal(Microsoft.CodeAnalysis.SyntaxTriviaList,System.String,System.UInt64,Microsoft.CodeAnalysis.SyntaxTriviaList)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal(System.Char)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal(System.Decimal)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal(System.Double)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal(System.Int32)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal(System.Int64)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal(System.Single)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal(System.String)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal(System.String,System.Char)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal(System.String,System.Decimal)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal(System.String,System.Double)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal(System.String,System.Int32)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal(System.String,System.Int64)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal(System.String,System.Single)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal(System.String,System.String)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal(System.String,System.UInt32)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal(System.String,System.UInt64)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal(System.UInt32)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal(System.UInt64)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.LiteralExpression(Microsoft.CodeAnalysis.CSharp.SyntaxKind)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.LiteralExpression(Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.LoadDirectiveTrivia(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,System.Boolean)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.LoadDirectiveTrivia(Microsoft.CodeAnalysis.SyntaxToken,System.Boolean)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.LocalDeclarationStatement(Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclarationSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.LocalDeclarationStatement(Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclarationSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.LocalDeclarationStatement(Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclarationSyntax,Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.LocalFunctionStatement(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.LocalFunctionStatement(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,System.String)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.LocalFunctionStatement(Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterListSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintClauseSyntax},Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.LocalFunctionStatement(Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterListSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintClauseSyntax},Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax,Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.LockStatement(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.LockStatement(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.MakeRefExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.MakeRefExpression(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.MemberAccessExpression(Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.SimpleNameSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.MemberAccessExpression(Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.SimpleNameSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.MemberBindingExpression(Microsoft.CodeAnalysis.CSharp.Syntax.SimpleNameSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.MemberBindingExpression(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.SimpleNameSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.MethodDeclaration(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.MethodDeclaration(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,System.String)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.MethodDeclaration(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ExplicitInterfaceSpecifierSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterListSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintClauseSyntax},Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.MethodDeclaration(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ExplicitInterfaceSpecifierSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterListSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintClauseSyntax},Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax,Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.MethodDeclaration(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ExplicitInterfaceSpecifierSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterListSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintClauseSyntax},Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax,Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.MissingToken(Microsoft.CodeAnalysis.CSharp.SyntaxKind)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.MissingToken(Microsoft.CodeAnalysis.SyntaxTriviaList,Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.SyntaxTriviaList)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.NameColon(Microsoft.CodeAnalysis.CSharp.Syntax.IdentifierNameSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.NameColon(Microsoft.CodeAnalysis.CSharp.Syntax.IdentifierNameSyntax,Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.NameColon(System.String)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.NameEquals(Microsoft.CodeAnalysis.CSharp.Syntax.IdentifierNameSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.NameEquals(Microsoft.CodeAnalysis.CSharp.Syntax.IdentifierNameSyntax,Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.NameEquals(System.String)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.NameMemberCref(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.NameMemberCref(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.CrefParameterListSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.NamespaceDeclaration(Microsoft.CodeAnalysis.CSharp.Syntax.NameSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.NamespaceDeclaration(Microsoft.CodeAnalysis.CSharp.Syntax.NameSyntax,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.ExternAliasDirectiveSyntax},Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.UsingDirectiveSyntax},Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.NamespaceDeclaration(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.NameSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.ExternAliasDirectiveSyntax},Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.UsingDirectiveSyntax},Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax},Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.NodeOrTokenList" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.NodeOrTokenList(Microsoft.CodeAnalysis.SyntaxNodeOrToken[])" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.NodeOrTokenList(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNodeOrToken})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.NullableType(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.NullableType(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ObjectCreationExpression(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ObjectCreationExpression(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentListSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.InitializerExpressionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ObjectCreationExpression(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentListSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.InitializerExpressionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.OmittedArraySizeExpression" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.OmittedArraySizeExpression(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.OmittedTypeArgument" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.OmittedTypeArgument(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.OperatorDeclaration(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.OperatorDeclaration(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.OperatorDeclaration(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax,Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.OperatorDeclaration(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax,Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.OperatorMemberCref(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.OperatorMemberCref(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.CrefParameterListSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.OperatorMemberCref(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.CrefParameterListSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.OrderByClause(Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.OrderingSyntax})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.OrderByClause(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.OrderingSyntax})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Ordering(Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Ordering(Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Parameter(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.EqualsValueClauseSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Parameter(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParameterList(Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.ParameterSyntax})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParameterList(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.ParameterSyntax},Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParenthesizedExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParenthesizedExpression(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParenthesizedLambdaExpression(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParenthesizedLambdaExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax,Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParenthesizedLambdaExpression(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParenthesizedVariableDesignation(Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.VariableDesignationSyntax})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParenthesizedVariableDesignation(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.VariableDesignationSyntax},Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseArgumentList(System.String,System.Int32,Microsoft.CodeAnalysis.ParseOptions,System.Boolean)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseAttributeArgumentList(System.String,System.Int32,Microsoft.CodeAnalysis.ParseOptions,System.Boolean)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseBracketedArgumentList(System.String,System.Int32,Microsoft.CodeAnalysis.ParseOptions,System.Boolean)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseBracketedParameterList(System.String,System.Int32,Microsoft.CodeAnalysis.ParseOptions,System.Boolean)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseCompilationUnit(System.String,System.Int32,Microsoft.CodeAnalysis.CSharp.CSharpParseOptions)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseExpression(System.String,System.Int32,Microsoft.CodeAnalysis.ParseOptions,System.Boolean)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseLeadingTrivia(System.String,System.Int32)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseName(System.String,System.Int32,System.Boolean)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseParameterList(System.String,System.Int32,Microsoft.CodeAnalysis.ParseOptions,System.Boolean)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseStatement(System.String,System.Int32,Microsoft.CodeAnalysis.ParseOptions,System.Boolean)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseSyntaxTree(Microsoft.CodeAnalysis.Text.SourceText,Microsoft.CodeAnalysis.ParseOptions,System.String,System.Threading.CancellationToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseSyntaxTree(System.String,Microsoft.CodeAnalysis.ParseOptions,System.String,System.Text.Encoding,System.Threading.CancellationToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseToken(System.String,System.Int32)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseTokens(System.String,System.Int32,System.Int32,Microsoft.CodeAnalysis.CSharp.CSharpParseOptions)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseTrailingTrivia(System.String,System.Int32)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseTypeName(System.String,System.Int32,System.Boolean)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.PointerType(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.PointerType(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.PostfixUnaryExpression(Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.PostfixUnaryExpression(Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.PragmaChecksumDirectiveTrivia(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,System.Boolean)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.PragmaChecksumDirectiveTrivia(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,System.Boolean)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.PragmaWarningDirectiveTrivia(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax},System.Boolean)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.PragmaWarningDirectiveTrivia(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax},Microsoft.CodeAnalysis.SyntaxToken,System.Boolean)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.PragmaWarningDirectiveTrivia(Microsoft.CodeAnalysis.SyntaxToken,System.Boolean)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.PredefinedType(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.PrefixUnaryExpression(Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.PrefixUnaryExpression(Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.PreprocessingMessage(System.String)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.PropertyDeclaration(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.PropertyDeclaration(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,System.String)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.PropertyDeclaration(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ExplicitInterfaceSpecifierSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.AccessorListSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.PropertyDeclaration(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ExplicitInterfaceSpecifierSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.AccessorListSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.EqualsValueClauseSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.PropertyDeclaration(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ExplicitInterfaceSpecifierSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.AccessorListSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.EqualsValueClauseSyntax,Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.QualifiedCref(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.MemberCrefSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.QualifiedCref(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.MemberCrefSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.QualifiedName(Microsoft.CodeAnalysis.CSharp.Syntax.NameSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.SimpleNameSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.QualifiedName(Microsoft.CodeAnalysis.CSharp.Syntax.NameSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.SimpleNameSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.QueryBody(Microsoft.CodeAnalysis.CSharp.Syntax.SelectOrGroupClauseSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.QueryBody(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.QueryClauseSyntax},Microsoft.CodeAnalysis.CSharp.Syntax.SelectOrGroupClauseSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.QueryContinuationSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.QueryContinuation(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.QueryBodySyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.QueryContinuation(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.QueryBodySyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.QueryContinuation(System.String,Microsoft.CodeAnalysis.CSharp.Syntax.QueryBodySyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.QueryExpression(Microsoft.CodeAnalysis.CSharp.Syntax.FromClauseSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.QueryBodySyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ReferenceDirectiveTrivia(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,System.Boolean)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ReferenceDirectiveTrivia(Microsoft.CodeAnalysis.SyntaxToken,System.Boolean)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.RefExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.RefExpression(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.RefType(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.RefType(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.RefTypeExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.RefTypeExpression(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.RefValueExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.RefValueExpression(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.RegionDirectiveTrivia(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,System.Boolean)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.RegionDirectiveTrivia(System.Boolean)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ReturnStatement(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ReturnStatement(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.SelectClause(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.SelectClause(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.SeparatedList``1" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.SeparatedList``1(Microsoft.CodeAnalysis.SyntaxNodeOrTokenList)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.SeparatedList``1(System.Collections.Generic.IEnumerable{``0})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.SeparatedList``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxToken})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.SeparatedList``1(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNodeOrToken})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ShebangDirectiveTrivia(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,System.Boolean)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ShebangDirectiveTrivia(System.Boolean)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.SimpleBaseType(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.SimpleLambdaExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ParameterSyntax,Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.SimpleLambdaExpression(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ParameterSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.SingletonList``1(``0)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.SingletonSeparatedList``1(``0)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.SingleVariableDesignation(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.SizeOfExpression(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.SizeOfExpression(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.SkippedTokensTrivia" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.SkippedTokensTrivia(Microsoft.CodeAnalysis.SyntaxTokenList)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.StackAllocArrayCreationExpression(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.StackAllocArrayCreationExpression(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.StructDeclaration(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterListSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.BaseListSyntax,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintClauseSyntax},Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.StructDeclaration(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterListSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.BaseListSyntax,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintClauseSyntax},Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax},Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.StructDeclaration(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.StructDeclaration(System.String)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.SwitchSection" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.SwitchSection(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.SwitchLabelSyntax},Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.SwitchStatement(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.SwitchStatement(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.SwitchSectionSyntax})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.SwitchStatement(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.SwitchSectionSyntax},Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.SyntaxTree(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.ParseOptions,System.String,System.Text.Encoding)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.SyntaxTrivia(Microsoft.CodeAnalysis.CSharp.SyntaxKind,System.String)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ThisExpression" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ThisExpression(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ThrowExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ThrowExpression(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ThrowStatement(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ThrowStatement(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Token(Microsoft.CodeAnalysis.CSharp.SyntaxKind)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Token(Microsoft.CodeAnalysis.SyntaxTriviaList,Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.SyntaxTriviaList)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Token(Microsoft.CodeAnalysis.SyntaxTriviaList,Microsoft.CodeAnalysis.CSharp.SyntaxKind,System.String,System.String,Microsoft.CodeAnalysis.SyntaxTriviaList)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.TokenList" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.TokenList(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.TokenList(Microsoft.CodeAnalysis.SyntaxToken[])" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.TokenList(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxToken})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Trivia(Microsoft.CodeAnalysis.CSharp.Syntax.StructuredTriviaSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.TriviaList" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.TriviaList(Microsoft.CodeAnalysis.SyntaxTrivia)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.TriviaList(Microsoft.CodeAnalysis.SyntaxTrivia[])" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.TriviaList(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxTrivia})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.TryStatement(Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.CatchClauseSyntax},Microsoft.CodeAnalysis.CSharp.Syntax.FinallyClauseSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.TryStatement(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.CatchClauseSyntax})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.TryStatement(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.CatchClauseSyntax},Microsoft.CodeAnalysis.CSharp.Syntax.FinallyClauseSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.TupleElement(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.TupleElement(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.TupleExpression(Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentSyntax})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.TupleExpression(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentSyntax},Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.TupleType(Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.TupleElementSyntax})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.TupleType(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.TupleElementSyntax},Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.TypeArgumentList(Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.TypeArgumentList(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax},Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.TypeConstraint(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.TypeCref(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.TypeDeclaration(Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterListSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.BaseListSyntax,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintClauseSyntax},Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax},Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.TypeDeclaration(Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.TypeDeclaration(Microsoft.CodeAnalysis.CSharp.SyntaxKind,System.String)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.TypeOfExpression(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.TypeOfExpression(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.TypeParameter(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.TypeParameter(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.TypeParameter(System.String)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.TypeParameterConstraintClause(Microsoft.CodeAnalysis.CSharp.Syntax.IdentifierNameSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.TypeParameterConstraintClause(Microsoft.CodeAnalysis.CSharp.Syntax.IdentifierNameSyntax,Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintSyntax})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.TypeParameterConstraintClause(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.IdentifierNameSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintSyntax})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.TypeParameterConstraintClause(System.String)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.TypeParameterList(Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterSyntax})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.TypeParameterList(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterSyntax},Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.UndefDirectiveTrivia(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,System.Boolean)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.UndefDirectiveTrivia(Microsoft.CodeAnalysis.SyntaxToken,System.Boolean)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.UndefDirectiveTrivia(System.String,System.Boolean)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.UnsafeStatement(Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.UnsafeStatement(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.UsingDirective(Microsoft.CodeAnalysis.CSharp.Syntax.NameEqualsSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.NameSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.UsingDirective(Microsoft.CodeAnalysis.CSharp.Syntax.NameSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.UsingDirective(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.NameEqualsSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.NameSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.UsingDirective(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.NameEqualsSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.NameSyntax,Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.UsingStatement(Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.UsingStatement(Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclarationSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.UsingStatement(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclarationSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.VariableDeclaration(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.VariableDeclaration(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclaratorSyntax})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.VariableDeclarator(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.VariableDeclarator(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.BracketedArgumentListSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.EqualsValueClauseSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.VariableDeclarator(System.String)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.VerbatimIdentifier(Microsoft.CodeAnalysis.SyntaxTriviaList,System.String,System.String,Microsoft.CodeAnalysis.SyntaxTriviaList)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.WarningDirectiveTrivia(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,System.Boolean)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.WarningDirectiveTrivia(System.Boolean)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.WhenClause(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.WhenClause(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.WhereClause(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.WhereClause(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.WhileStatement(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.WhileStatement(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Whitespace(System.String)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Whitespace(System.String,System.Boolean)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlCDataSection(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlCDataSection(Microsoft.CodeAnalysis.SyntaxTokenList)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlComment(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlComment(Microsoft.CodeAnalysis.SyntaxTokenList)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlCrefAttribute(Microsoft.CodeAnalysis.CSharp.Syntax.CrefSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlCrefAttribute(Microsoft.CodeAnalysis.CSharp.Syntax.CrefSyntax,Microsoft.CodeAnalysis.CSharp.SyntaxKind)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlCrefAttribute(Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.CrefSyntax,Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlCrefAttribute(Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.CrefSyntax,Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlElement(Microsoft.CodeAnalysis.CSharp.Syntax.XmlElementStartTagSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.XmlElementEndTagSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlElement(Microsoft.CodeAnalysis.CSharp.Syntax.XmlElementStartTagSyntax,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.XmlNodeSyntax},Microsoft.CodeAnalysis.CSharp.Syntax.XmlElementEndTagSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlElement(Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.XmlNodeSyntax})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlElement(System.String,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.XmlNodeSyntax})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlElementEndTag(Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlElementEndTag(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax,Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlElementStartTag(Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlElementStartTag(Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.XmlAttributeSyntax})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlElementStartTag(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.XmlAttributeSyntax},Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlEmptyElement(Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlEmptyElement(Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.XmlAttributeSyntax})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlEmptyElement(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.XmlAttributeSyntax},Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlEmptyElement(System.String)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlEntity(Microsoft.CodeAnalysis.SyntaxTriviaList,System.String,System.String,Microsoft.CodeAnalysis.SyntaxTriviaList)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlExampleElement(Microsoft.CodeAnalysis.CSharp.Syntax.XmlNodeSyntax[])" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlExampleElement(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.XmlNodeSyntax})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlExceptionElement(Microsoft.CodeAnalysis.CSharp.Syntax.CrefSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.XmlNodeSyntax[])" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlExceptionElement(Microsoft.CodeAnalysis.CSharp.Syntax.CrefSyntax,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.XmlNodeSyntax})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlMultiLineElement(Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.XmlNodeSyntax})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlMultiLineElement(System.String,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.XmlNodeSyntax})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlName(Microsoft.CodeAnalysis.CSharp.Syntax.XmlPrefixSyntax,Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlName(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlName(System.String)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlNameAttribute(Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.IdentifierNameSyntax,Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlNameAttribute(Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.IdentifierNameSyntax,Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlNameAttribute(Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax,Microsoft.CodeAnalysis.SyntaxToken,System.String,Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlNameAttribute(System.String)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlNewLine(System.String)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlNullKeywordElement" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlParaElement(Microsoft.CodeAnalysis.CSharp.Syntax.XmlNodeSyntax[])" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlParaElement(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.XmlNodeSyntax})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlParamElement(System.String,Microsoft.CodeAnalysis.CSharp.Syntax.XmlNodeSyntax[])" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlParamElement(System.String,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.XmlNodeSyntax})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlParamRefElement(System.String)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlPermissionElement(Microsoft.CodeAnalysis.CSharp.Syntax.CrefSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.XmlNodeSyntax[])" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlPermissionElement(Microsoft.CodeAnalysis.CSharp.Syntax.CrefSyntax,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.XmlNodeSyntax})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlPlaceholderElement(Microsoft.CodeAnalysis.CSharp.Syntax.XmlNodeSyntax[])" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlPlaceholderElement(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.XmlNodeSyntax})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlPrefix(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlPrefix(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlPrefix(System.String)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlPreliminaryElement" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlProcessingInstruction(Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlProcessingInstruction(Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax,Microsoft.CodeAnalysis.SyntaxTokenList)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlProcessingInstruction(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax,Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlRemarksElement(Microsoft.CodeAnalysis.CSharp.Syntax.XmlNodeSyntax[])" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlRemarksElement(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.XmlNodeSyntax})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlReturnsElement(Microsoft.CodeAnalysis.CSharp.Syntax.XmlNodeSyntax[])" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlReturnsElement(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.XmlNodeSyntax})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlSeeAlsoElement(Microsoft.CodeAnalysis.CSharp.Syntax.CrefSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlSeeAlsoElement(System.Uri,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.XmlNodeSyntax})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlSeeElement(Microsoft.CodeAnalysis.CSharp.Syntax.CrefSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlSummaryElement(Microsoft.CodeAnalysis.CSharp.Syntax.XmlNodeSyntax[])" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlSummaryElement(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.XmlNodeSyntax})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlText" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlText(Microsoft.CodeAnalysis.SyntaxToken[])" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlText(Microsoft.CodeAnalysis.SyntaxTokenList)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlText(System.String)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlTextAttribute(Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax,Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.SyntaxTokenList)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlTextAttribute(Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlTextAttribute(Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlTextAttribute(Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlTextAttribute(System.String,Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.SyntaxTokenList)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlTextAttribute(System.String,Microsoft.CodeAnalysis.SyntaxToken[])" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlTextAttribute(System.String,System.String)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlTextLiteral(Microsoft.CodeAnalysis.SyntaxTriviaList,System.String,System.String,Microsoft.CodeAnalysis.SyntaxTriviaList)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlTextLiteral(System.String)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlTextLiteral(System.String,System.String)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlTextNewLine(Microsoft.CodeAnalysis.SyntaxTriviaList,System.String,System.String,Microsoft.CodeAnalysis.SyntaxTriviaList)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlTextNewLine(System.String)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlTextNewLine(System.String,System.Boolean)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlThreadSafetyElement" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlThreadSafetyElement(System.Boolean,System.Boolean)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlValueElement(Microsoft.CodeAnalysis.CSharp.Syntax.XmlNodeSyntax[])" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlValueElement(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.XmlNodeSyntax})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.YieldStatement(Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.YieldStatement(Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.CarriageReturn" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.CarriageReturnLineFeed" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ElasticCarriageReturn" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ElasticCarriageReturnLineFeed" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ElasticLineFeed" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ElasticMarker" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ElasticSpace" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ElasticTab" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.LineFeed" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Space" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Tab" />
    </Type>
    <Type Name="Microsoft.CodeAnalysis.CSharp.SyntaxFacts" Id="T:Microsoft.CodeAnalysis.CSharp.SyntaxFacts">
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFacts.GetAccessorDeclarationKind(Microsoft.CodeAnalysis.CSharp.SyntaxKind)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFacts.GetAssignmentExpression(Microsoft.CodeAnalysis.CSharp.SyntaxKind)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFacts.GetBaseTypeDeclarationKind(Microsoft.CodeAnalysis.CSharp.SyntaxKind)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFacts.GetBinaryExpression(Microsoft.CodeAnalysis.CSharp.SyntaxKind)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFacts.GetCheckStatement(Microsoft.CodeAnalysis.CSharp.SyntaxKind)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFacts.GetContextualKeywordKind(System.String)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFacts.GetContextualKeywordKinds" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFacts.GetInstanceExpression(Microsoft.CodeAnalysis.CSharp.SyntaxKind)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFacts.GetKeywordKind(System.String)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFacts.GetKeywordKinds" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFacts.GetLiteralExpression(Microsoft.CodeAnalysis.CSharp.SyntaxKind)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFacts.GetOperatorKind(System.String)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFacts.GetPostfixUnaryExpression(Microsoft.CodeAnalysis.CSharp.SyntaxKind)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFacts.GetPrefixUnaryExpression(Microsoft.CodeAnalysis.CSharp.SyntaxKind)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFacts.GetPreprocessorKeywordKind(System.String)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFacts.GetPreprocessorKeywordKinds" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFacts.GetPrimaryFunction(Microsoft.CodeAnalysis.CSharp.SyntaxKind)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFacts.GetPunctuationKinds" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFacts.GetReservedKeywordKinds" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFacts.GetSwitchLabelKind(Microsoft.CodeAnalysis.CSharp.SyntaxKind)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFacts.GetText(Microsoft.CodeAnalysis.Accessibility)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFacts.GetText(Microsoft.CodeAnalysis.CSharp.SyntaxKind)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFacts.GetTypeDeclarationKind(Microsoft.CodeAnalysis.CSharp.SyntaxKind)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsAccessibilityModifier(Microsoft.CodeAnalysis.CSharp.SyntaxKind)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsAccessorDeclaration(Microsoft.CodeAnalysis.CSharp.SyntaxKind)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsAccessorDeclarationKeyword(Microsoft.CodeAnalysis.CSharp.SyntaxKind)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsAliasQualifier(Microsoft.CodeAnalysis.SyntaxNode)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsAnyOverloadableOperator(Microsoft.CodeAnalysis.CSharp.SyntaxKind)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsAnyToken(Microsoft.CodeAnalysis.CSharp.SyntaxKind)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsAnyUnaryExpression(Microsoft.CodeAnalysis.CSharp.SyntaxKind)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsAssignmentExpression(Microsoft.CodeAnalysis.CSharp.SyntaxKind)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsAssignmentExpressionOperatorToken(Microsoft.CodeAnalysis.CSharp.SyntaxKind)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsAttributeName(Microsoft.CodeAnalysis.SyntaxNode)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsAttributeTargetSpecifier(Microsoft.CodeAnalysis.CSharp.SyntaxKind)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsBinaryExpression(Microsoft.CodeAnalysis.CSharp.SyntaxKind)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsBinaryExpressionOperatorToken(Microsoft.CodeAnalysis.CSharp.SyntaxKind)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsContextualKeyword(Microsoft.CodeAnalysis.CSharp.SyntaxKind)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsDocumentationCommentTrivia(Microsoft.CodeAnalysis.CSharp.SyntaxKind)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsFixedStatementExpression(Microsoft.CodeAnalysis.SyntaxNode)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsGlobalMemberDeclaration(Microsoft.CodeAnalysis.CSharp.SyntaxKind)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsIdentifierPartCharacter(System.Char)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsIdentifierStartCharacter(System.Char)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsIndexed(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsInNamespaceOrTypeContext(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsInstanceExpression(Microsoft.CodeAnalysis.CSharp.SyntaxKind)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsInTypeOnlyContext(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsInvoked(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsKeywordKind(Microsoft.CodeAnalysis.CSharp.SyntaxKind)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsLambdaBody(Microsoft.CodeAnalysis.SyntaxNode)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsLanguagePunctuation(Microsoft.CodeAnalysis.CSharp.SyntaxKind)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsLiteralExpression(Microsoft.CodeAnalysis.CSharp.SyntaxKind)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsName(Microsoft.CodeAnalysis.CSharp.SyntaxKind)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsNamedArgumentName(Microsoft.CodeAnalysis.SyntaxNode)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsNamespaceAliasQualifier(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsNamespaceMemberDeclaration(Microsoft.CodeAnalysis.CSharp.SyntaxKind)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsNewLine(System.Char)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsOverloadableBinaryOperator(Microsoft.CodeAnalysis.CSharp.SyntaxKind)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsOverloadableUnaryOperator(Microsoft.CodeAnalysis.CSharp.SyntaxKind)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsPostfixUnaryExpression(Microsoft.CodeAnalysis.CSharp.SyntaxKind)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsPostfixUnaryExpressionToken(Microsoft.CodeAnalysis.CSharp.SyntaxKind)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsPredefinedType(Microsoft.CodeAnalysis.CSharp.SyntaxKind)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsPrefixUnaryExpression(Microsoft.CodeAnalysis.CSharp.SyntaxKind)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsPrefixUnaryExpressionOperatorToken(Microsoft.CodeAnalysis.CSharp.SyntaxKind)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsPreprocessorDirective(Microsoft.CodeAnalysis.CSharp.SyntaxKind)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsPreprocessorKeyword(Microsoft.CodeAnalysis.CSharp.SyntaxKind)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsPreprocessorPunctuation(Microsoft.CodeAnalysis.CSharp.SyntaxKind)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsPrimaryFunction(Microsoft.CodeAnalysis.CSharp.SyntaxKind)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsPunctuation(Microsoft.CodeAnalysis.CSharp.SyntaxKind)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsPunctuationOrKeyword(Microsoft.CodeAnalysis.CSharp.SyntaxKind)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsQueryContextualKeyword(Microsoft.CodeAnalysis.CSharp.SyntaxKind)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsReservedKeyword(Microsoft.CodeAnalysis.CSharp.SyntaxKind)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsReservedTupleElementName(System.String)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsTrivia(Microsoft.CodeAnalysis.CSharp.SyntaxKind)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsTypeDeclaration(Microsoft.CodeAnalysis.CSharp.SyntaxKind)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsTypeParameterVarianceKeyword(Microsoft.CodeAnalysis.CSharp.SyntaxKind)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsTypeSyntax(Microsoft.CodeAnalysis.CSharp.SyntaxKind)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsUnaryOperatorDeclarationToken(Microsoft.CodeAnalysis.CSharp.SyntaxKind)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsValidIdentifier(System.String)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsWhitespace(System.Char)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.SyntaxFacts.TryGetInferredMemberName(Microsoft.CodeAnalysis.SyntaxNode)" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.SyntaxFacts.EqualityComparer" />
    </Type>
    <Type Name="Microsoft.CodeAnalysis.CSharp.SyntaxKind" Id="T:Microsoft.CodeAnalysis.CSharp.SyntaxKind">
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.AbstractKeyword" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.AccessorList" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.AddAccessorDeclaration" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.AddAssignmentExpression" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.AddExpression" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.AddKeyword" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.AddressOfExpression" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.AliasKeyword" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.AliasQualifiedName" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.AmpersandAmpersandToken" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.AmpersandEqualsToken" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.AmpersandToken" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.AndAssignmentExpression" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.AnonymousMethodExpression" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.AnonymousObjectCreationExpression" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.AnonymousObjectMemberDeclarator" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.ArgListExpression" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.ArgListKeyword" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.Argument" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.ArgumentList" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.ArrayCreationExpression" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.ArrayInitializerExpression" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.ArrayRankSpecifier" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.ArrayType" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.ArrowExpressionClause" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.AscendingKeyword" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.AscendingOrdering" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.AsExpression" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.AsKeyword" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.AssemblyKeyword" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.AsteriskEqualsToken" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.AsteriskToken" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.AsyncKeyword" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.Attribute" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.AttributeArgument" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.AttributeArgumentList" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.AttributeList" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.AttributeTargetSpecifier" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.AwaitExpression" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.AwaitKeyword" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.BackslashToken" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.BadDirectiveTrivia" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.BadToken" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.BarBarToken" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.BarEqualsToken" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.BarToken" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.BaseConstructorInitializer" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.BaseExpression" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.BaseKeyword" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.BaseList" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.BitwiseAndExpression" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.BitwiseNotExpression" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.BitwiseOrExpression" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.Block" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.BoolKeyword" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.BracketedArgumentList" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.BracketedParameterList" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.BreakKeyword" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.BreakStatement" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.ByKeyword" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.ByteKeyword" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.CaretEqualsToken" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.CaretToken" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.CaseKeyword" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.CasePatternSwitchLabel" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.CaseSwitchLabel" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.CastExpression" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.CatchClause" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.CatchDeclaration" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.CatchFilterClause" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.CatchKeyword" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.CharacterLiteralExpression" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.CharacterLiteralToken" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.CharKeyword" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.CheckedExpression" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.CheckedKeyword" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.CheckedStatement" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.ChecksumKeyword" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.ClassConstraint" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.ClassDeclaration" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.ClassKeyword" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.CloseBraceToken" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.CloseBracketToken" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.CloseParenToken" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.CoalesceExpression" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.CollectionInitializerExpression" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.ColonColonToken" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.ColonToken" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.CommaToken" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.CompilationUnit" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.ComplexElementInitializerExpression" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.ConditionalAccessExpression" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.ConditionalExpression" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.ConflictMarkerTrivia" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.ConstantPattern" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.ConstKeyword" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.ConstructorConstraint" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.ConstructorDeclaration" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.ContinueKeyword" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.ContinueStatement" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.ConversionOperatorDeclaration" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.ConversionOperatorMemberCref" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.CrefBracketedParameterList" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.CrefParameter" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.CrefParameterList" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.DecimalKeyword" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.DeclarationExpression" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.DeclarationPattern" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.DefaultExpression" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.DefaultKeyword" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.DefaultLiteralExpression" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.DefaultSwitchLabel" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.DefineDirectiveTrivia" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.DefineKeyword" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.DelegateDeclaration" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.DelegateKeyword" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.DescendingKeyword" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.DescendingOrdering" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.DestructorDeclaration" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.DisabledTextTrivia" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.DisableKeyword" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.DiscardDesignation" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.DivideAssignmentExpression" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.DivideExpression" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.DocumentationCommentExteriorTrivia" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.DoKeyword" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.DollarToken" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.DoStatement" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.DotToken" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.DoubleKeyword" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.DoubleQuoteToken" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.ElementAccessExpression" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.ElementBindingExpression" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.ElifDirectiveTrivia" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.ElifKeyword" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.ElseClause" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.ElseDirectiveTrivia" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.ElseKeyword" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.EmptyStatement" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.EndIfDirectiveTrivia" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.EndIfKeyword" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.EndOfDirectiveToken" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.EndOfDocumentationCommentToken" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.EndOfFileToken" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.EndOfLineTrivia" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.EndRegionDirectiveTrivia" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.EndRegionKeyword" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.EnumDeclaration" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.EnumKeyword" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.EnumMemberDeclaration" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.EqualsEqualsToken" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.EqualsExpression" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.EqualsGreaterThanToken" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.EqualsKeyword" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.EqualsToken" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.EqualsValueClause" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.ErrorDirectiveTrivia" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.ErrorKeyword" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.EventDeclaration" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.EventFieldDeclaration" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.EventKeyword" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.ExclamationEqualsToken" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.ExclamationToken" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.ExclusiveOrAssignmentExpression" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.ExclusiveOrExpression" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.ExplicitInterfaceSpecifier" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.ExplicitKeyword" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.ExpressionStatement" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.ExternAliasDirective" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.ExternKeyword" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.FalseKeyword" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.FalseLiteralExpression" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.FieldDeclaration" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.FieldKeyword" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.FinallyClause" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.FinallyKeyword" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.FixedKeyword" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.FixedStatement" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.FloatKeyword" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.ForEachKeyword" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.ForEachStatement" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.ForEachVariableStatement" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.ForKeyword" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.ForStatement" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.FromClause" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.FromKeyword" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.GenericName" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.GetAccessorDeclaration" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.GetKeyword" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.GlobalKeyword" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.GlobalStatement" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.GotoCaseStatement" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.GotoDefaultStatement" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.GotoKeyword" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.GotoStatement" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.GreaterThanEqualsToken" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.GreaterThanExpression" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.GreaterThanGreaterThanEqualsToken" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.GreaterThanGreaterThanToken" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.GreaterThanOrEqualExpression" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.GreaterThanToken" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.GroupClause" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.GroupKeyword" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.HashToken" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.HiddenKeyword" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.IdentifierName" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.IdentifierToken" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.IfDirectiveTrivia" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.IfKeyword" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.IfStatement" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.ImplicitArrayCreationExpression" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.ImplicitElementAccess" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.ImplicitKeyword" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.IncompleteMember" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.IndexerDeclaration" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.IndexerMemberCref" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.InKeyword" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.InterfaceDeclaration" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.InterfaceKeyword" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.InternalKeyword" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.InterpolatedStringEndToken" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.InterpolatedStringExpression" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.InterpolatedStringStartToken" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.InterpolatedStringText" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.InterpolatedStringTextToken" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.InterpolatedStringToken" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.InterpolatedVerbatimStringStartToken" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.Interpolation" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.InterpolationAlignmentClause" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.InterpolationFormatClause" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.IntKeyword" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.IntoKeyword" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.InvocationExpression" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.IsExpression" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.IsKeyword" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.IsPatternExpression" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.JoinClause" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.JoinIntoClause" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.JoinKeyword" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.LabeledStatement" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.LeftShiftAssignmentExpression" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.LeftShiftExpression" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.LessThanEqualsToken" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.LessThanExpression" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.LessThanLessThanEqualsToken" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.LessThanLessThanToken" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.LessThanOrEqualExpression" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.LessThanSlashToken" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.LessThanToken" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.LetClause" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.LetKeyword" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.LineDirectiveTrivia" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.LineKeyword" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.List" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.LoadDirectiveTrivia" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.LoadKeyword" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.LocalDeclarationStatement" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.LocalFunctionStatement" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.LockKeyword" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.LockStatement" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.LogicalAndExpression" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.LogicalNotExpression" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.LogicalOrExpression" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.LongKeyword" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.MakeRefExpression" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.MakeRefKeyword" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.MemberBindingExpression" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.MethodDeclaration" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.MethodKeyword" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.MinusEqualsToken" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.MinusGreaterThanToken" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.MinusMinusToken" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.MinusToken" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.ModuleKeyword" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.ModuloAssignmentExpression" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.ModuloExpression" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.MultiLineCommentTrivia" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.MultiLineDocumentationCommentTrivia" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.MultiplyAssignmentExpression" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.MultiplyExpression" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.NameColon" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.NameEquals" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.NameMemberCref" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.NameOfKeyword" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.NamespaceDeclaration" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.NamespaceKeyword" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.NewKeyword" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.None" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.NotEqualsExpression" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.NullableType" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.NullKeyword" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.NullLiteralExpression" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.NumericLiteralExpression" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.NumericLiteralToken" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.ObjectCreationExpression" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.ObjectInitializerExpression" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.ObjectKeyword" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.OmittedArraySizeExpression" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.OmittedArraySizeExpressionToken" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.OmittedTypeArgument" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.OmittedTypeArgumentToken" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.OnKeyword" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.OpenBraceToken" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.OpenBracketToken" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.OpenParenToken" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.OperatorDeclaration" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.OperatorKeyword" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.OperatorMemberCref" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.OrAssignmentExpression" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.OrderByClause" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.OrderByKeyword" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.OutKeyword" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.OverrideKeyword" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.Parameter" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.ParameterList" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.ParamKeyword" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.ParamsKeyword" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.ParenthesizedExpression" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.ParenthesizedLambdaExpression" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.ParenthesizedVariableDesignation" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.PartialKeyword" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.PercentEqualsToken" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.PercentToken" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.PlusEqualsToken" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.PlusPlusToken" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.PlusToken" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.PointerIndirectionExpression" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.PointerMemberAccessExpression" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.PointerType" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.PostDecrementExpression" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.PostIncrementExpression" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.PragmaChecksumDirectiveTrivia" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.PragmaKeyword" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.PragmaWarningDirectiveTrivia" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.PreDecrementExpression" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.PredefinedType" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.PreIncrementExpression" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.PreprocessingMessageTrivia" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.PrivateKeyword" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.PropertyDeclaration" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.PropertyKeyword" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.ProtectedKeyword" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.PublicKeyword" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.QualifiedCref" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.QualifiedName" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.QueryBody" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.QueryContinuation" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.QueryExpression" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.QuestionQuestionToken" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.QuestionToken" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.ReadOnlyKeyword" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.ReferenceDirectiveTrivia" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.ReferenceKeyword" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.RefExpression" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.RefKeyword" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.RefType" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.RefTypeExpression" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.RefTypeKeyword" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.RefValueExpression" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.RefValueKeyword" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.RegionDirectiveTrivia" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.RegionKeyword" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.RemoveAccessorDeclaration" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.RemoveKeyword" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.RestoreKeyword" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.ReturnKeyword" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.ReturnStatement" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.RightShiftAssignmentExpression" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.RightShiftExpression" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.SByteKeyword" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.SealedKeyword" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.SelectClause" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.SelectKeyword" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.SemicolonToken" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.SetAccessorDeclaration" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.SetKeyword" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.ShebangDirectiveTrivia" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.ShortKeyword" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.SimpleAssignmentExpression" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.SimpleBaseType" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.SimpleLambdaExpression" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.SimpleMemberAccessExpression" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.SingleLineCommentTrivia" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.SingleLineDocumentationCommentTrivia" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.SingleQuoteToken" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.SingleVariableDesignation" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.SizeOfExpression" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.SizeOfKeyword" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.SkippedTokensTrivia" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.SlashEqualsToken" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.SlashGreaterThanToken" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.SlashToken" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.StackAllocArrayCreationExpression" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.StackAllocKeyword" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.StaticKeyword" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.StringKeyword" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.StringLiteralExpression" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.StringLiteralToken" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.StructConstraint" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.StructDeclaration" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.StructKeyword" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.SubtractAssignmentExpression" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.SubtractExpression" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.SwitchKeyword" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.SwitchSection" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.SwitchStatement" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.ThisConstructorInitializer" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.ThisExpression" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.ThisKeyword" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.ThrowExpression" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.ThrowKeyword" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.ThrowStatement" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.TildeToken" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.TrueKeyword" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.TrueLiteralExpression" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.TryKeyword" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.TryStatement" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.TupleElement" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.TupleExpression" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.TupleType" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.TypeArgumentList" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.TypeConstraint" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.TypeCref" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.TypeKeyword" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.TypeOfExpression" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.TypeOfKeyword" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.TypeParameter" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.TypeParameterConstraintClause" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.TypeParameterList" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.TypeVarKeyword" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.UIntKeyword" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.ULongKeyword" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.UnaryMinusExpression" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.UnaryPlusExpression" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.UncheckedExpression" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.UncheckedKeyword" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.UncheckedStatement" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.UndefDirectiveTrivia" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.UndefKeyword" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.UnderscoreToken" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.UnknownAccessorDeclaration" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.UnsafeKeyword" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.UnsafeStatement" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.UShortKeyword" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.UsingDirective" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.UsingKeyword" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.UsingStatement" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.VariableDeclaration" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.VariableDeclarator" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.VirtualKeyword" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.VoidKeyword" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.VolatileKeyword" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.WarningDirectiveTrivia" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.WarningKeyword" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.WhenClause" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.WhenKeyword" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.WhereClause" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.WhereKeyword" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.WhileKeyword" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.WhileStatement" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.WhitespaceTrivia" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.XmlCDataEndToken" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.XmlCDataSection" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.XmlCDataStartToken" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.XmlComment" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.XmlCommentEndToken" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.XmlCommentStartToken" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.XmlCrefAttribute" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.XmlElement" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.XmlElementEndTag" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.XmlElementStartTag" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.XmlEmptyElement" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.XmlEntityLiteralToken" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.XmlName" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.XmlNameAttribute" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.XmlPrefix" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.XmlProcessingInstruction" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.XmlProcessingInstructionEndToken" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.XmlProcessingInstructionStartToken" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.XmlText" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.XmlTextAttribute" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.XmlTextLiteralNewLineToken" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.XmlTextLiteralToken" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.YieldBreakStatement" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.YieldKeyword" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.YieldReturnStatement" />
    </Type>
    <Type Name="Microsoft.CodeAnalysis.CSharp.TypedConstantExtensions" Id="T:Microsoft.CodeAnalysis.CSharp.TypedConstantExtensions">
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.TypedConstantExtensions.ToCSharpString(Microsoft.CodeAnalysis.TypedConstant)" />
    </Type>
  </Namespace>
  <Namespace Name="Microsoft.CodeAnalysis.CSharp.Syntax">
    <Type Name="Microsoft.CodeAnalysis.CSharp.Syntax.AccessorDeclarationSyntax" Id="T:Microsoft.CodeAnalysis.CSharp.Syntax.AccessorDeclarationSyntax">
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.AccessorDeclarationSyntax.Accept(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.AccessorDeclarationSyntax.Accept``1(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor{``0})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.AccessorDeclarationSyntax.AddAttributeLists(Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax[])" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.AccessorDeclarationSyntax.AddBodyStatements(Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax[])" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.AccessorDeclarationSyntax.AddModifiers(Microsoft.CodeAnalysis.SyntaxToken[])" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.AccessorDeclarationSyntax.Update(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax,Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.AccessorDeclarationSyntax.Update(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax,Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.AccessorDeclarationSyntax.WithAttributeLists(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.AccessorDeclarationSyntax.WithBody(Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.AccessorDeclarationSyntax.WithExpressionBody(Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.AccessorDeclarationSyntax.WithKeyword(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.AccessorDeclarationSyntax.WithModifiers(Microsoft.CodeAnalysis.SyntaxTokenList)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.AccessorDeclarationSyntax.WithSemicolonToken(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.AccessorDeclarationSyntax.AttributeLists" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.AccessorDeclarationSyntax.Body" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.AccessorDeclarationSyntax.ExpressionBody" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.AccessorDeclarationSyntax.Keyword" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.AccessorDeclarationSyntax.Modifiers" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.AccessorDeclarationSyntax.SemicolonToken" />
    </Type>
    <Type Name="Microsoft.CodeAnalysis.CSharp.Syntax.AccessorListSyntax" Id="T:Microsoft.CodeAnalysis.CSharp.Syntax.AccessorListSyntax">
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.AccessorListSyntax.Accept(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.AccessorListSyntax.Accept``1(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor{``0})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.AccessorListSyntax.AddAccessors(Microsoft.CodeAnalysis.CSharp.Syntax.AccessorDeclarationSyntax[])" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.AccessorListSyntax.Update(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AccessorDeclarationSyntax},Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.AccessorListSyntax.WithAccessors(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AccessorDeclarationSyntax})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.AccessorListSyntax.WithCloseBraceToken(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.AccessorListSyntax.WithOpenBraceToken(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.AccessorListSyntax.Accessors" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.AccessorListSyntax.CloseBraceToken" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.AccessorListSyntax.OpenBraceToken" />
    </Type>
    <Type Name="Microsoft.CodeAnalysis.CSharp.Syntax.AliasQualifiedNameSyntax" Id="T:Microsoft.CodeAnalysis.CSharp.Syntax.AliasQualifiedNameSyntax">
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.AliasQualifiedNameSyntax.Accept(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.AliasQualifiedNameSyntax.Accept``1(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor{``0})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.AliasQualifiedNameSyntax.Update(Microsoft.CodeAnalysis.CSharp.Syntax.IdentifierNameSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.SimpleNameSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.AliasQualifiedNameSyntax.WithAlias(Microsoft.CodeAnalysis.CSharp.Syntax.IdentifierNameSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.AliasQualifiedNameSyntax.WithColonColonToken(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.AliasQualifiedNameSyntax.WithName(Microsoft.CodeAnalysis.CSharp.Syntax.SimpleNameSyntax)" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.AliasQualifiedNameSyntax.Alias" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.AliasQualifiedNameSyntax.ColonColonToken" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.AliasQualifiedNameSyntax.Name" />
    </Type>
    <Type Name="Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousFunctionExpressionSyntax" Id="T:Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousFunctionExpressionSyntax">
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousFunctionExpressionSyntax.AsyncKeyword" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousFunctionExpressionSyntax.Body" />
    </Type>
    <Type Name="Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousMethodExpressionSyntax" Id="T:Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousMethodExpressionSyntax">
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousMethodExpressionSyntax.Accept(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousMethodExpressionSyntax.Accept``1(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor{``0})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousMethodExpressionSyntax.AddBlockStatements(Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax[])" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousMethodExpressionSyntax.AddParameterListParameters(Microsoft.CodeAnalysis.CSharp.Syntax.ParameterSyntax[])" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousMethodExpressionSyntax.Update(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax,Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousMethodExpressionSyntax.WithAsyncKeyword(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousMethodExpressionSyntax.WithBlock(Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousMethodExpressionSyntax.WithBody(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousMethodExpressionSyntax.WithDelegateKeyword(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousMethodExpressionSyntax.WithParameterList(Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax)" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousMethodExpressionSyntax.AsyncKeyword" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousMethodExpressionSyntax.Block" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousMethodExpressionSyntax.Body" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousMethodExpressionSyntax.DelegateKeyword" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousMethodExpressionSyntax.ParameterList" />
    </Type>
    <Type Name="Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousObjectCreationExpressionSyntax" Id="T:Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousObjectCreationExpressionSyntax">
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousObjectCreationExpressionSyntax.Accept(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousObjectCreationExpressionSyntax.Accept``1(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor{``0})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousObjectCreationExpressionSyntax.AddInitializers(Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousObjectMemberDeclaratorSyntax[])" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousObjectCreationExpressionSyntax.Update(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousObjectMemberDeclaratorSyntax},Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousObjectCreationExpressionSyntax.WithCloseBraceToken(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousObjectCreationExpressionSyntax.WithInitializers(Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousObjectMemberDeclaratorSyntax})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousObjectCreationExpressionSyntax.WithNewKeyword(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousObjectCreationExpressionSyntax.WithOpenBraceToken(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousObjectCreationExpressionSyntax.CloseBraceToken" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousObjectCreationExpressionSyntax.Initializers" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousObjectCreationExpressionSyntax.NewKeyword" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousObjectCreationExpressionSyntax.OpenBraceToken" />
    </Type>
    <Type Name="Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousObjectMemberDeclaratorSyntax" Id="T:Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousObjectMemberDeclaratorSyntax">
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousObjectMemberDeclaratorSyntax.Accept(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousObjectMemberDeclaratorSyntax.Accept``1(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor{``0})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousObjectMemberDeclaratorSyntax.Update(Microsoft.CodeAnalysis.CSharp.Syntax.NameEqualsSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousObjectMemberDeclaratorSyntax.WithExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousObjectMemberDeclaratorSyntax.WithNameEquals(Microsoft.CodeAnalysis.CSharp.Syntax.NameEqualsSyntax)" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousObjectMemberDeclaratorSyntax.Expression" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousObjectMemberDeclaratorSyntax.NameEquals" />
    </Type>
    <Type Name="Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentListSyntax" Id="T:Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentListSyntax">
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentListSyntax.Accept(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentListSyntax.Accept``1(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor{``0})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentListSyntax.AddArguments(Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentSyntax[])" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentListSyntax.Update(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentSyntax},Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentListSyntax.WithArguments(Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentSyntax})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentListSyntax.WithCloseParenToken(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentListSyntax.WithOpenParenToken(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentListSyntax.Arguments" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentListSyntax.CloseParenToken" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentListSyntax.OpenParenToken" />
    </Type>
    <Type Name="Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentSyntax" Id="T:Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentSyntax">
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentSyntax.Accept(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentSyntax.Accept``1(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor{``0})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentSyntax.Update(Microsoft.CodeAnalysis.CSharp.Syntax.NameColonSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentSyntax.WithExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentSyntax.WithNameColon(Microsoft.CodeAnalysis.CSharp.Syntax.NameColonSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentSyntax.WithRefOrOutKeyword(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentSyntax.Expression" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentSyntax.NameColon" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentSyntax.RefOrOutKeyword" />
    </Type>
    <Type Name="Microsoft.CodeAnalysis.CSharp.Syntax.ArrayCreationExpressionSyntax" Id="T:Microsoft.CodeAnalysis.CSharp.Syntax.ArrayCreationExpressionSyntax">
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ArrayCreationExpressionSyntax.Accept(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ArrayCreationExpressionSyntax.Accept``1(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor{``0})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ArrayCreationExpressionSyntax.AddTypeRankSpecifiers(Microsoft.CodeAnalysis.CSharp.Syntax.ArrayRankSpecifierSyntax[])" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ArrayCreationExpressionSyntax.Update(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ArrayTypeSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.InitializerExpressionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ArrayCreationExpressionSyntax.WithInitializer(Microsoft.CodeAnalysis.CSharp.Syntax.InitializerExpressionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ArrayCreationExpressionSyntax.WithNewKeyword(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ArrayCreationExpressionSyntax.WithType(Microsoft.CodeAnalysis.CSharp.Syntax.ArrayTypeSyntax)" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.ArrayCreationExpressionSyntax.Initializer" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.ArrayCreationExpressionSyntax.NewKeyword" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.ArrayCreationExpressionSyntax.Type" />
    </Type>
    <Type Name="Microsoft.CodeAnalysis.CSharp.Syntax.ArrayRankSpecifierSyntax" Id="T:Microsoft.CodeAnalysis.CSharp.Syntax.ArrayRankSpecifierSyntax">
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ArrayRankSpecifierSyntax.Accept(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ArrayRankSpecifierSyntax.Accept``1(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor{``0})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ArrayRankSpecifierSyntax.AddSizes(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax[])" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ArrayRankSpecifierSyntax.Update(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax},Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ArrayRankSpecifierSyntax.WithCloseBracketToken(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ArrayRankSpecifierSyntax.WithOpenBracketToken(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ArrayRankSpecifierSyntax.WithSizes(Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax})" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.ArrayRankSpecifierSyntax.CloseBracketToken" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.ArrayRankSpecifierSyntax.OpenBracketToken" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.ArrayRankSpecifierSyntax.Rank" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.ArrayRankSpecifierSyntax.Sizes" />
    </Type>
    <Type Name="Microsoft.CodeAnalysis.CSharp.Syntax.ArrayTypeSyntax" Id="T:Microsoft.CodeAnalysis.CSharp.Syntax.ArrayTypeSyntax">
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ArrayTypeSyntax.Accept(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ArrayTypeSyntax.Accept``1(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor{``0})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ArrayTypeSyntax.AddRankSpecifiers(Microsoft.CodeAnalysis.CSharp.Syntax.ArrayRankSpecifierSyntax[])" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ArrayTypeSyntax.Update(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.ArrayRankSpecifierSyntax})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ArrayTypeSyntax.WithElementType(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ArrayTypeSyntax.WithRankSpecifiers(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.ArrayRankSpecifierSyntax})" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.ArrayTypeSyntax.ElementType" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.ArrayTypeSyntax.RankSpecifiers" />
    </Type>
    <Type Name="Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax" Id="T:Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax">
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax.Accept(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax.Accept``1(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor{``0})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax.Update(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax.WithArrowToken(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax.WithExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax.ArrowToken" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax.Expression" />
    </Type>
    <Type Name="Microsoft.CodeAnalysis.CSharp.Syntax.AssignmentExpressionSyntax" Id="T:Microsoft.CodeAnalysis.CSharp.Syntax.AssignmentExpressionSyntax">
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.AssignmentExpressionSyntax.Accept(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.AssignmentExpressionSyntax.Accept``1(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor{``0})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.AssignmentExpressionSyntax.Update(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.AssignmentExpressionSyntax.WithLeft(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.AssignmentExpressionSyntax.WithOperatorToken(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.AssignmentExpressionSyntax.WithRight(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.AssignmentExpressionSyntax.Left" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.AssignmentExpressionSyntax.OperatorToken" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.AssignmentExpressionSyntax.Right" />
    </Type>
    <Type Name="Microsoft.CodeAnalysis.CSharp.Syntax.AttributeArgumentListSyntax" Id="T:Microsoft.CodeAnalysis.CSharp.Syntax.AttributeArgumentListSyntax">
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.AttributeArgumentListSyntax.Accept(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.AttributeArgumentListSyntax.Accept``1(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor{``0})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.AttributeArgumentListSyntax.AddArguments(Microsoft.CodeAnalysis.CSharp.Syntax.AttributeArgumentSyntax[])" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.AttributeArgumentListSyntax.Update(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeArgumentSyntax},Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.AttributeArgumentListSyntax.WithArguments(Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeArgumentSyntax})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.AttributeArgumentListSyntax.WithCloseParenToken(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.AttributeArgumentListSyntax.WithOpenParenToken(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.AttributeArgumentListSyntax.Arguments" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.AttributeArgumentListSyntax.CloseParenToken" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.AttributeArgumentListSyntax.OpenParenToken" />
    </Type>
    <Type Name="Microsoft.CodeAnalysis.CSharp.Syntax.AttributeArgumentSyntax" Id="T:Microsoft.CodeAnalysis.CSharp.Syntax.AttributeArgumentSyntax">
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.AttributeArgumentSyntax.Accept(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.AttributeArgumentSyntax.Accept``1(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor{``0})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.AttributeArgumentSyntax.Update(Microsoft.CodeAnalysis.CSharp.Syntax.NameEqualsSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.NameColonSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.AttributeArgumentSyntax.WithExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.AttributeArgumentSyntax.WithNameColon(Microsoft.CodeAnalysis.CSharp.Syntax.NameColonSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.AttributeArgumentSyntax.WithNameEquals(Microsoft.CodeAnalysis.CSharp.Syntax.NameEqualsSyntax)" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.AttributeArgumentSyntax.Expression" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.AttributeArgumentSyntax.NameColon" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.AttributeArgumentSyntax.NameEquals" />
    </Type>
    <Type Name="Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax" Id="T:Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax">
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax.Accept(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax.Accept``1(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor{``0})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax.AddAttributes(Microsoft.CodeAnalysis.CSharp.Syntax.AttributeSyntax[])" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax.Update(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.AttributeTargetSpecifierSyntax,Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeSyntax},Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax.WithAttributes(Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeSyntax})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax.WithCloseBracketToken(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax.WithOpenBracketToken(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax.WithTarget(Microsoft.CodeAnalysis.CSharp.Syntax.AttributeTargetSpecifierSyntax)" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax.Attributes" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax.CloseBracketToken" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax.OpenBracketToken" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax.Target" />
    </Type>
    <Type Name="Microsoft.CodeAnalysis.CSharp.Syntax.AttributeSyntax" Id="T:Microsoft.CodeAnalysis.CSharp.Syntax.AttributeSyntax">
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.AttributeSyntax.Accept(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.AttributeSyntax.Accept``1(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor{``0})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.AttributeSyntax.AddArgumentListArguments(Microsoft.CodeAnalysis.CSharp.Syntax.AttributeArgumentSyntax[])" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.AttributeSyntax.Update(Microsoft.CodeAnalysis.CSharp.Syntax.NameSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.AttributeArgumentListSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.AttributeSyntax.WithArgumentList(Microsoft.CodeAnalysis.CSharp.Syntax.AttributeArgumentListSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.AttributeSyntax.WithName(Microsoft.CodeAnalysis.CSharp.Syntax.NameSyntax)" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.AttributeSyntax.ArgumentList" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.AttributeSyntax.Name" />
    </Type>
    <Type Name="Microsoft.CodeAnalysis.CSharp.Syntax.AttributeTargetSpecifierSyntax" Id="T:Microsoft.CodeAnalysis.CSharp.Syntax.AttributeTargetSpecifierSyntax">
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.AttributeTargetSpecifierSyntax.Accept(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.AttributeTargetSpecifierSyntax.Accept``1(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor{``0})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.AttributeTargetSpecifierSyntax.Update(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.AttributeTargetSpecifierSyntax.WithColonToken(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.AttributeTargetSpecifierSyntax.WithIdentifier(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.AttributeTargetSpecifierSyntax.ColonToken" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.AttributeTargetSpecifierSyntax.Identifier" />
    </Type>
    <Type Name="Microsoft.CodeAnalysis.CSharp.Syntax.AwaitExpressionSyntax" Id="T:Microsoft.CodeAnalysis.CSharp.Syntax.AwaitExpressionSyntax">
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.AwaitExpressionSyntax.Accept(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.AwaitExpressionSyntax.Accept``1(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor{``0})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.AwaitExpressionSyntax.Update(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.AwaitExpressionSyntax.WithAwaitKeyword(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.AwaitExpressionSyntax.WithExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.AwaitExpressionSyntax.AwaitKeyword" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.AwaitExpressionSyntax.Expression" />
    </Type>
    <Type Name="Microsoft.CodeAnalysis.CSharp.Syntax.BadDirectiveTriviaSyntax" Id="T:Microsoft.CodeAnalysis.CSharp.Syntax.BadDirectiveTriviaSyntax">
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.BadDirectiveTriviaSyntax.Accept(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.BadDirectiveTriviaSyntax.Accept``1(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor{``0})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.BadDirectiveTriviaSyntax.Update(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,System.Boolean)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.BadDirectiveTriviaSyntax.WithEndOfDirectiveToken(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.BadDirectiveTriviaSyntax.WithHashToken(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.BadDirectiveTriviaSyntax.WithIdentifier(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.BadDirectiveTriviaSyntax.WithIsActive(System.Boolean)" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.BadDirectiveTriviaSyntax.EndOfDirectiveToken" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.BadDirectiveTriviaSyntax.HashToken" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.BadDirectiveTriviaSyntax.Identifier" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.BadDirectiveTriviaSyntax.IsActive" />
    </Type>
    <Type Name="Microsoft.CodeAnalysis.CSharp.Syntax.BaseArgumentListSyntax" Id="T:Microsoft.CodeAnalysis.CSharp.Syntax.BaseArgumentListSyntax">
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.BaseArgumentListSyntax.Arguments" />
    </Type>
    <Type Name="Microsoft.CodeAnalysis.CSharp.Syntax.BaseCrefParameterListSyntax" Id="T:Microsoft.CodeAnalysis.CSharp.Syntax.BaseCrefParameterListSyntax">
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.BaseCrefParameterListSyntax.Parameters" />
    </Type>
    <Type Name="Microsoft.CodeAnalysis.CSharp.Syntax.BaseExpressionSyntax" Id="T:Microsoft.CodeAnalysis.CSharp.Syntax.BaseExpressionSyntax">
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.BaseExpressionSyntax.Accept(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.BaseExpressionSyntax.Accept``1(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor{``0})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.BaseExpressionSyntax.Update(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.BaseExpressionSyntax.WithToken(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.BaseExpressionSyntax.Token" />
    </Type>
    <Type Name="Microsoft.CodeAnalysis.CSharp.Syntax.BaseFieldDeclarationSyntax" Id="T:Microsoft.CodeAnalysis.CSharp.Syntax.BaseFieldDeclarationSyntax">
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.BaseFieldDeclarationSyntax.AttributeLists" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.BaseFieldDeclarationSyntax.Declaration" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.BaseFieldDeclarationSyntax.Modifiers" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.BaseFieldDeclarationSyntax.SemicolonToken" />
    </Type>
    <Type Name="Microsoft.CodeAnalysis.CSharp.Syntax.BaseListSyntax" Id="T:Microsoft.CodeAnalysis.CSharp.Syntax.BaseListSyntax">
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.BaseListSyntax.Accept(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.BaseListSyntax.Accept``1(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor{``0})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.BaseListSyntax.AddTypes(Microsoft.CodeAnalysis.CSharp.Syntax.BaseTypeSyntax[])" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.BaseListSyntax.Update(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.BaseTypeSyntax})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.BaseListSyntax.WithColonToken(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.BaseListSyntax.WithTypes(Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.BaseTypeSyntax})" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.BaseListSyntax.ColonToken" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.BaseListSyntax.Types" />
    </Type>
    <Type Name="Microsoft.CodeAnalysis.CSharp.Syntax.BaseMethodDeclarationSyntax" Id="T:Microsoft.CodeAnalysis.CSharp.Syntax.BaseMethodDeclarationSyntax">
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.BaseMethodDeclarationSyntax.AttributeLists" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.BaseMethodDeclarationSyntax.Body" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.BaseMethodDeclarationSyntax.ExpressionBody" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.BaseMethodDeclarationSyntax.Modifiers" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.BaseMethodDeclarationSyntax.ParameterList" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.BaseMethodDeclarationSyntax.SemicolonToken" />
    </Type>
    <Type Name="Microsoft.CodeAnalysis.CSharp.Syntax.BaseParameterListSyntax" Id="T:Microsoft.CodeAnalysis.CSharp.Syntax.BaseParameterListSyntax">
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.BaseParameterListSyntax.Parameters" />
    </Type>
    <Type Name="Microsoft.CodeAnalysis.CSharp.Syntax.BasePropertyDeclarationSyntax" Id="T:Microsoft.CodeAnalysis.CSharp.Syntax.BasePropertyDeclarationSyntax">
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.BasePropertyDeclarationSyntax.AccessorList" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.BasePropertyDeclarationSyntax.AttributeLists" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.BasePropertyDeclarationSyntax.ExplicitInterfaceSpecifier" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.BasePropertyDeclarationSyntax.Modifiers" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.BasePropertyDeclarationSyntax.Type" />
    </Type>
    <Type Name="Microsoft.CodeAnalysis.CSharp.Syntax.BaseTypeDeclarationSyntax" Id="T:Microsoft.CodeAnalysis.CSharp.Syntax.BaseTypeDeclarationSyntax">
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.BaseTypeDeclarationSyntax.AttributeLists" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.BaseTypeDeclarationSyntax.BaseList" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.BaseTypeDeclarationSyntax.CloseBraceToken" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.BaseTypeDeclarationSyntax.Identifier" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.BaseTypeDeclarationSyntax.Modifiers" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.BaseTypeDeclarationSyntax.OpenBraceToken" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.BaseTypeDeclarationSyntax.SemicolonToken" />
    </Type>
    <Type Name="Microsoft.CodeAnalysis.CSharp.Syntax.BaseTypeSyntax" Id="T:Microsoft.CodeAnalysis.CSharp.Syntax.BaseTypeSyntax">
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.BaseTypeSyntax.Type" />
    </Type>
    <Type Name="Microsoft.CodeAnalysis.CSharp.Syntax.BinaryExpressionSyntax" Id="T:Microsoft.CodeAnalysis.CSharp.Syntax.BinaryExpressionSyntax">
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.BinaryExpressionSyntax.Accept(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.BinaryExpressionSyntax.Accept``1(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor{``0})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.BinaryExpressionSyntax.Update(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.BinaryExpressionSyntax.WithLeft(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.BinaryExpressionSyntax.WithOperatorToken(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.BinaryExpressionSyntax.WithRight(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.BinaryExpressionSyntax.Left" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.BinaryExpressionSyntax.OperatorToken" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.BinaryExpressionSyntax.Right" />
    </Type>
    <Type Name="Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax" Id="T:Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax">
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax.Accept(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax.Accept``1(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor{``0})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax.AddStatements(Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax[])" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax.Update(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax},Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax.WithCloseBraceToken(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax.WithOpenBraceToken(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax.WithStatements(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax})" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax.CloseBraceToken" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax.OpenBraceToken" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax.Statements" />
    </Type>
    <Type Name="Microsoft.CodeAnalysis.CSharp.Syntax.BracketedArgumentListSyntax" Id="T:Microsoft.CodeAnalysis.CSharp.Syntax.BracketedArgumentListSyntax">
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.BracketedArgumentListSyntax.Accept(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.BracketedArgumentListSyntax.Accept``1(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor{``0})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.BracketedArgumentListSyntax.AddArguments(Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentSyntax[])" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.BracketedArgumentListSyntax.Update(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentSyntax},Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.BracketedArgumentListSyntax.WithArguments(Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentSyntax})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.BracketedArgumentListSyntax.WithCloseBracketToken(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.BracketedArgumentListSyntax.WithOpenBracketToken(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.BracketedArgumentListSyntax.Arguments" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.BracketedArgumentListSyntax.CloseBracketToken" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.BracketedArgumentListSyntax.OpenBracketToken" />
    </Type>
    <Type Name="Microsoft.CodeAnalysis.CSharp.Syntax.BracketedParameterListSyntax" Id="T:Microsoft.CodeAnalysis.CSharp.Syntax.BracketedParameterListSyntax">
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.BracketedParameterListSyntax.Accept(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.BracketedParameterListSyntax.Accept``1(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor{``0})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.BracketedParameterListSyntax.AddParameters(Microsoft.CodeAnalysis.CSharp.Syntax.ParameterSyntax[])" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.BracketedParameterListSyntax.Update(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.ParameterSyntax},Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.BracketedParameterListSyntax.WithCloseBracketToken(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.BracketedParameterListSyntax.WithOpenBracketToken(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.BracketedParameterListSyntax.WithParameters(Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.ParameterSyntax})" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.BracketedParameterListSyntax.CloseBracketToken" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.BracketedParameterListSyntax.OpenBracketToken" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.BracketedParameterListSyntax.Parameters" />
    </Type>
    <Type Name="Microsoft.CodeAnalysis.CSharp.Syntax.BranchingDirectiveTriviaSyntax" Id="T:Microsoft.CodeAnalysis.CSharp.Syntax.BranchingDirectiveTriviaSyntax">
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.BranchingDirectiveTriviaSyntax.BranchTaken" />
    </Type>
    <Type Name="Microsoft.CodeAnalysis.CSharp.Syntax.BreakStatementSyntax" Id="T:Microsoft.CodeAnalysis.CSharp.Syntax.BreakStatementSyntax">
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.BreakStatementSyntax.Accept(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.BreakStatementSyntax.Accept``1(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor{``0})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.BreakStatementSyntax.Update(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.BreakStatementSyntax.WithBreakKeyword(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.BreakStatementSyntax.WithSemicolonToken(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.BreakStatementSyntax.BreakKeyword" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.BreakStatementSyntax.SemicolonToken" />
    </Type>
    <Type Name="Microsoft.CodeAnalysis.CSharp.Syntax.CasePatternSwitchLabelSyntax" Id="T:Microsoft.CodeAnalysis.CSharp.Syntax.CasePatternSwitchLabelSyntax">
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.CasePatternSwitchLabelSyntax.Accept(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.CasePatternSwitchLabelSyntax.Accept``1(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor{``0})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.CasePatternSwitchLabelSyntax.Update(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.PatternSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.WhenClauseSyntax,Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.CasePatternSwitchLabelSyntax.WithColonToken(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.CasePatternSwitchLabelSyntax.WithKeyword(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.CasePatternSwitchLabelSyntax.WithPattern(Microsoft.CodeAnalysis.CSharp.Syntax.PatternSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.CasePatternSwitchLabelSyntax.WithWhenClause(Microsoft.CodeAnalysis.CSharp.Syntax.WhenClauseSyntax)" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.CasePatternSwitchLabelSyntax.ColonToken" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.CasePatternSwitchLabelSyntax.Keyword" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.CasePatternSwitchLabelSyntax.Pattern" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.CasePatternSwitchLabelSyntax.WhenClause" />
    </Type>
    <Type Name="Microsoft.CodeAnalysis.CSharp.Syntax.CaseSwitchLabelSyntax" Id="T:Microsoft.CodeAnalysis.CSharp.Syntax.CaseSwitchLabelSyntax">
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.CaseSwitchLabelSyntax.Accept(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.CaseSwitchLabelSyntax.Accept``1(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor{``0})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.CaseSwitchLabelSyntax.Update(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.CaseSwitchLabelSyntax.WithColonToken(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.CaseSwitchLabelSyntax.WithKeyword(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.CaseSwitchLabelSyntax.WithValue(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.CaseSwitchLabelSyntax.ColonToken" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.CaseSwitchLabelSyntax.Keyword" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.CaseSwitchLabelSyntax.Value" />
    </Type>
    <Type Name="Microsoft.CodeAnalysis.CSharp.Syntax.CastExpressionSyntax" Id="T:Microsoft.CodeAnalysis.CSharp.Syntax.CastExpressionSyntax">
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.CastExpressionSyntax.Accept(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.CastExpressionSyntax.Accept``1(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor{``0})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.CastExpressionSyntax.Update(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.CastExpressionSyntax.WithCloseParenToken(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.CastExpressionSyntax.WithExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.CastExpressionSyntax.WithOpenParenToken(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.CastExpressionSyntax.WithType(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax)" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.CastExpressionSyntax.CloseParenToken" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.CastExpressionSyntax.Expression" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.CastExpressionSyntax.OpenParenToken" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.CastExpressionSyntax.Type" />
    </Type>
    <Type Name="Microsoft.CodeAnalysis.CSharp.Syntax.CatchClauseSyntax" Id="T:Microsoft.CodeAnalysis.CSharp.Syntax.CatchClauseSyntax">
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.CatchClauseSyntax.Accept(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.CatchClauseSyntax.Accept``1(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor{``0})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.CatchClauseSyntax.AddBlockStatements(Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax[])" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.CatchClauseSyntax.Update(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.CatchDeclarationSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.CatchFilterClauseSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.CatchClauseSyntax.WithBlock(Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.CatchClauseSyntax.WithCatchKeyword(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.CatchClauseSyntax.WithDeclaration(Microsoft.CodeAnalysis.CSharp.Syntax.CatchDeclarationSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.CatchClauseSyntax.WithFilter(Microsoft.CodeAnalysis.CSharp.Syntax.CatchFilterClauseSyntax)" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.CatchClauseSyntax.Block" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.CatchClauseSyntax.CatchKeyword" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.CatchClauseSyntax.Declaration" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.CatchClauseSyntax.Filter" />
    </Type>
    <Type Name="Microsoft.CodeAnalysis.CSharp.Syntax.CatchDeclarationSyntax" Id="T:Microsoft.CodeAnalysis.CSharp.Syntax.CatchDeclarationSyntax">
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.CatchDeclarationSyntax.Accept(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.CatchDeclarationSyntax.Accept``1(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor{``0})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.CatchDeclarationSyntax.Update(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.CatchDeclarationSyntax.WithCloseParenToken(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.CatchDeclarationSyntax.WithIdentifier(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.CatchDeclarationSyntax.WithOpenParenToken(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.CatchDeclarationSyntax.WithType(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax)" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.CatchDeclarationSyntax.CloseParenToken" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.CatchDeclarationSyntax.Identifier" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.CatchDeclarationSyntax.OpenParenToken" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.CatchDeclarationSyntax.Type" />
    </Type>
    <Type Name="Microsoft.CodeAnalysis.CSharp.Syntax.CatchFilterClauseSyntax" Id="T:Microsoft.CodeAnalysis.CSharp.Syntax.CatchFilterClauseSyntax">
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.CatchFilterClauseSyntax.Accept(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.CatchFilterClauseSyntax.Accept``1(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor{``0})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.CatchFilterClauseSyntax.Update(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.CatchFilterClauseSyntax.WithCloseParenToken(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.CatchFilterClauseSyntax.WithFilterExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.CatchFilterClauseSyntax.WithOpenParenToken(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.CatchFilterClauseSyntax.WithWhenKeyword(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.CatchFilterClauseSyntax.CloseParenToken" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.CatchFilterClauseSyntax.FilterExpression" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.CatchFilterClauseSyntax.OpenParenToken" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.CatchFilterClauseSyntax.WhenKeyword" />
    </Type>
    <Type Name="Microsoft.CodeAnalysis.CSharp.Syntax.CheckedExpressionSyntax" Id="T:Microsoft.CodeAnalysis.CSharp.Syntax.CheckedExpressionSyntax">
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.CheckedExpressionSyntax.Accept(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.CheckedExpressionSyntax.Accept``1(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor{``0})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.CheckedExpressionSyntax.Update(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.CheckedExpressionSyntax.WithCloseParenToken(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.CheckedExpressionSyntax.WithExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.CheckedExpressionSyntax.WithKeyword(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.CheckedExpressionSyntax.WithOpenParenToken(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.CheckedExpressionSyntax.CloseParenToken" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.CheckedExpressionSyntax.Expression" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.CheckedExpressionSyntax.Keyword" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.CheckedExpressionSyntax.OpenParenToken" />
    </Type>
    <Type Name="Microsoft.CodeAnalysis.CSharp.Syntax.CheckedStatementSyntax" Id="T:Microsoft.CodeAnalysis.CSharp.Syntax.CheckedStatementSyntax">
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.CheckedStatementSyntax.Accept(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.CheckedStatementSyntax.Accept``1(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor{``0})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.CheckedStatementSyntax.AddBlockStatements(Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax[])" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.CheckedStatementSyntax.Update(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.CheckedStatementSyntax.WithBlock(Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.CheckedStatementSyntax.WithKeyword(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.CheckedStatementSyntax.Block" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.CheckedStatementSyntax.Keyword" />
    </Type>
    <Type Name="Microsoft.CodeAnalysis.CSharp.Syntax.ClassDeclarationSyntax" Id="T:Microsoft.CodeAnalysis.CSharp.Syntax.ClassDeclarationSyntax">
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ClassDeclarationSyntax.Accept(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ClassDeclarationSyntax.Accept``1(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor{``0})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ClassDeclarationSyntax.AddAttributeLists(Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax[])" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ClassDeclarationSyntax.AddBaseListTypes(Microsoft.CodeAnalysis.CSharp.Syntax.BaseTypeSyntax[])" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ClassDeclarationSyntax.AddConstraintClauses(Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintClauseSyntax[])" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ClassDeclarationSyntax.AddMembers(Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax[])" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ClassDeclarationSyntax.AddModifiers(Microsoft.CodeAnalysis.SyntaxToken[])" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ClassDeclarationSyntax.AddTypeParameterListParameters(Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterSyntax[])" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ClassDeclarationSyntax.Update(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterListSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.BaseListSyntax,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintClauseSyntax},Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax},Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ClassDeclarationSyntax.WithAttributeLists(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ClassDeclarationSyntax.WithBaseList(Microsoft.CodeAnalysis.CSharp.Syntax.BaseListSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ClassDeclarationSyntax.WithCloseBraceToken(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ClassDeclarationSyntax.WithConstraintClauses(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintClauseSyntax})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ClassDeclarationSyntax.WithIdentifier(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ClassDeclarationSyntax.WithKeyword(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ClassDeclarationSyntax.WithMembers(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ClassDeclarationSyntax.WithModifiers(Microsoft.CodeAnalysis.SyntaxTokenList)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ClassDeclarationSyntax.WithOpenBraceToken(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ClassDeclarationSyntax.WithSemicolonToken(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ClassDeclarationSyntax.WithTypeParameterList(Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterListSyntax)" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.ClassDeclarationSyntax.AttributeLists" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.ClassDeclarationSyntax.BaseList" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.ClassDeclarationSyntax.CloseBraceToken" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.ClassDeclarationSyntax.ConstraintClauses" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.ClassDeclarationSyntax.Identifier" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.ClassDeclarationSyntax.Keyword" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.ClassDeclarationSyntax.Members" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.ClassDeclarationSyntax.Modifiers" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.ClassDeclarationSyntax.OpenBraceToken" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.ClassDeclarationSyntax.SemicolonToken" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.ClassDeclarationSyntax.TypeParameterList" />
    </Type>
    <Type Name="Microsoft.CodeAnalysis.CSharp.Syntax.ClassOrStructConstraintSyntax" Id="T:Microsoft.CodeAnalysis.CSharp.Syntax.ClassOrStructConstraintSyntax">
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ClassOrStructConstraintSyntax.Accept(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ClassOrStructConstraintSyntax.Accept``1(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor{``0})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ClassOrStructConstraintSyntax.Update(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ClassOrStructConstraintSyntax.WithClassOrStructKeyword(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.ClassOrStructConstraintSyntax.ClassOrStructKeyword" />
    </Type>
    <Type Name="Microsoft.CodeAnalysis.CSharp.Syntax.CommonForEachStatementSyntax" Id="T:Microsoft.CodeAnalysis.CSharp.Syntax.CommonForEachStatementSyntax">
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.CommonForEachStatementSyntax.CloseParenToken" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.CommonForEachStatementSyntax.Expression" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.CommonForEachStatementSyntax.ForEachKeyword" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.CommonForEachStatementSyntax.InKeyword" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.CommonForEachStatementSyntax.OpenParenToken" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.CommonForEachStatementSyntax.Statement" />
    </Type>
    <Type Name="Microsoft.CodeAnalysis.CSharp.Syntax.CompilationUnitSyntax" Id="T:Microsoft.CodeAnalysis.CSharp.Syntax.CompilationUnitSyntax">
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.CompilationUnitSyntax.Accept(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.CompilationUnitSyntax.Accept``1(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor{``0})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.CompilationUnitSyntax.AddAttributeLists(Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax[])" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.CompilationUnitSyntax.AddExterns(Microsoft.CodeAnalysis.CSharp.Syntax.ExternAliasDirectiveSyntax[])" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.CompilationUnitSyntax.AddMembers(Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax[])" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.CompilationUnitSyntax.AddUsings(Microsoft.CodeAnalysis.CSharp.Syntax.UsingDirectiveSyntax[])" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.CompilationUnitSyntax.GetLoadDirectives" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.CompilationUnitSyntax.GetReferenceDirectives" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.CompilationUnitSyntax.Update(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.ExternAliasDirectiveSyntax},Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.UsingDirectiveSyntax},Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax},Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.CompilationUnitSyntax.WithAttributeLists(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.CompilationUnitSyntax.WithEndOfFileToken(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.CompilationUnitSyntax.WithExterns(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.ExternAliasDirectiveSyntax})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.CompilationUnitSyntax.WithMembers(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.CompilationUnitSyntax.WithUsings(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.UsingDirectiveSyntax})" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.CompilationUnitSyntax.AttributeLists" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.CompilationUnitSyntax.EndOfFileToken" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.CompilationUnitSyntax.Externs" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.CompilationUnitSyntax.Members" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.CompilationUnitSyntax.Usings" />
    </Type>
    <Type Name="Microsoft.CodeAnalysis.CSharp.Syntax.ConditionalAccessExpressionSyntax" Id="T:Microsoft.CodeAnalysis.CSharp.Syntax.ConditionalAccessExpressionSyntax">
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ConditionalAccessExpressionSyntax.Accept(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ConditionalAccessExpressionSyntax.Accept``1(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor{``0})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ConditionalAccessExpressionSyntax.Update(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ConditionalAccessExpressionSyntax.WithExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ConditionalAccessExpressionSyntax.WithOperatorToken(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ConditionalAccessExpressionSyntax.WithWhenNotNull(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.ConditionalAccessExpressionSyntax.Expression" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.ConditionalAccessExpressionSyntax.OperatorToken" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.ConditionalAccessExpressionSyntax.WhenNotNull" />
    </Type>
    <Type Name="Microsoft.CodeAnalysis.CSharp.Syntax.ConditionalDirectiveTriviaSyntax" Id="T:Microsoft.CodeAnalysis.CSharp.Syntax.ConditionalDirectiveTriviaSyntax">
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.ConditionalDirectiveTriviaSyntax.Condition" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.ConditionalDirectiveTriviaSyntax.ConditionValue" />
    </Type>
    <Type Name="Microsoft.CodeAnalysis.CSharp.Syntax.ConditionalExpressionSyntax" Id="T:Microsoft.CodeAnalysis.CSharp.Syntax.ConditionalExpressionSyntax">
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ConditionalExpressionSyntax.Accept(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ConditionalExpressionSyntax.Accept``1(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor{``0})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ConditionalExpressionSyntax.Update(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ConditionalExpressionSyntax.WithColonToken(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ConditionalExpressionSyntax.WithCondition(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ConditionalExpressionSyntax.WithQuestionToken(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ConditionalExpressionSyntax.WithWhenFalse(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ConditionalExpressionSyntax.WithWhenTrue(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.ConditionalExpressionSyntax.ColonToken" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.ConditionalExpressionSyntax.Condition" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.ConditionalExpressionSyntax.QuestionToken" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.ConditionalExpressionSyntax.WhenFalse" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.ConditionalExpressionSyntax.WhenTrue" />
    </Type>
    <Type Name="Microsoft.CodeAnalysis.CSharp.Syntax.ConstantPatternSyntax" Id="T:Microsoft.CodeAnalysis.CSharp.Syntax.ConstantPatternSyntax">
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ConstantPatternSyntax.Accept(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ConstantPatternSyntax.Accept``1(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor{``0})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ConstantPatternSyntax.Update(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ConstantPatternSyntax.WithExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.ConstantPatternSyntax.Expression" />
    </Type>
    <Type Name="Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorConstraintSyntax" Id="T:Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorConstraintSyntax">
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorConstraintSyntax.Accept(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorConstraintSyntax.Accept``1(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor{``0})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorConstraintSyntax.Update(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorConstraintSyntax.WithCloseParenToken(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorConstraintSyntax.WithNewKeyword(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorConstraintSyntax.WithOpenParenToken(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorConstraintSyntax.CloseParenToken" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorConstraintSyntax.NewKeyword" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorConstraintSyntax.OpenParenToken" />
    </Type>
    <Type Name="Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorDeclarationSyntax" Id="T:Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorDeclarationSyntax">
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorDeclarationSyntax.Accept(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorDeclarationSyntax.Accept``1(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor{``0})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorDeclarationSyntax.AddAttributeLists(Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax[])" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorDeclarationSyntax.AddBodyStatements(Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax[])" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorDeclarationSyntax.AddModifiers(Microsoft.CodeAnalysis.SyntaxToken[])" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorDeclarationSyntax.AddParameterListParameters(Microsoft.CodeAnalysis.CSharp.Syntax.ParameterSyntax[])" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorDeclarationSyntax.Update(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorInitializerSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax,Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorDeclarationSyntax.Update(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorInitializerSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax,Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorDeclarationSyntax.WithAttributeLists(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorDeclarationSyntax.WithBody(Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorDeclarationSyntax.WithExpressionBody(Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorDeclarationSyntax.WithIdentifier(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorDeclarationSyntax.WithInitializer(Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorInitializerSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorDeclarationSyntax.WithModifiers(Microsoft.CodeAnalysis.SyntaxTokenList)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorDeclarationSyntax.WithParameterList(Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorDeclarationSyntax.WithSemicolonToken(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorDeclarationSyntax.AttributeLists" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorDeclarationSyntax.Body" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorDeclarationSyntax.ExpressionBody" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorDeclarationSyntax.Identifier" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorDeclarationSyntax.Initializer" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorDeclarationSyntax.Modifiers" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorDeclarationSyntax.ParameterList" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorDeclarationSyntax.SemicolonToken" />
    </Type>
    <Type Name="Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorInitializerSyntax" Id="T:Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorInitializerSyntax">
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorInitializerSyntax.Accept(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorInitializerSyntax.Accept``1(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor{``0})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorInitializerSyntax.AddArgumentListArguments(Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentSyntax[])" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorInitializerSyntax.Update(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentListSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorInitializerSyntax.WithArgumentList(Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentListSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorInitializerSyntax.WithColonToken(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorInitializerSyntax.WithThisOrBaseKeyword(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorInitializerSyntax.ArgumentList" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorInitializerSyntax.ColonToken" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorInitializerSyntax.ThisOrBaseKeyword" />
    </Type>
    <Type Name="Microsoft.CodeAnalysis.CSharp.Syntax.ContinueStatementSyntax" Id="T:Microsoft.CodeAnalysis.CSharp.Syntax.ContinueStatementSyntax">
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ContinueStatementSyntax.Accept(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ContinueStatementSyntax.Accept``1(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor{``0})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ContinueStatementSyntax.Update(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ContinueStatementSyntax.WithContinueKeyword(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ContinueStatementSyntax.WithSemicolonToken(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.ContinueStatementSyntax.ContinueKeyword" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.ContinueStatementSyntax.SemicolonToken" />
    </Type>
    <Type Name="Microsoft.CodeAnalysis.CSharp.Syntax.ConversionOperatorDeclarationSyntax" Id="T:Microsoft.CodeAnalysis.CSharp.Syntax.ConversionOperatorDeclarationSyntax">
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ConversionOperatorDeclarationSyntax.Accept(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ConversionOperatorDeclarationSyntax.Accept``1(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor{``0})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ConversionOperatorDeclarationSyntax.AddAttributeLists(Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax[])" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ConversionOperatorDeclarationSyntax.AddBodyStatements(Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax[])" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ConversionOperatorDeclarationSyntax.AddModifiers(Microsoft.CodeAnalysis.SyntaxToken[])" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ConversionOperatorDeclarationSyntax.AddParameterListParameters(Microsoft.CodeAnalysis.CSharp.Syntax.ParameterSyntax[])" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ConversionOperatorDeclarationSyntax.Update(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax,Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ConversionOperatorDeclarationSyntax.WithAttributeLists(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ConversionOperatorDeclarationSyntax.WithBody(Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ConversionOperatorDeclarationSyntax.WithExpressionBody(Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ConversionOperatorDeclarationSyntax.WithImplicitOrExplicitKeyword(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ConversionOperatorDeclarationSyntax.WithModifiers(Microsoft.CodeAnalysis.SyntaxTokenList)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ConversionOperatorDeclarationSyntax.WithOperatorKeyword(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ConversionOperatorDeclarationSyntax.WithParameterList(Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ConversionOperatorDeclarationSyntax.WithSemicolonToken(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ConversionOperatorDeclarationSyntax.WithType(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax)" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.ConversionOperatorDeclarationSyntax.AttributeLists" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.ConversionOperatorDeclarationSyntax.Body" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.ConversionOperatorDeclarationSyntax.ExpressionBody" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.ConversionOperatorDeclarationSyntax.ImplicitOrExplicitKeyword" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.ConversionOperatorDeclarationSyntax.Modifiers" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.ConversionOperatorDeclarationSyntax.OperatorKeyword" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.ConversionOperatorDeclarationSyntax.ParameterList" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.ConversionOperatorDeclarationSyntax.SemicolonToken" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.ConversionOperatorDeclarationSyntax.Type" />
    </Type>
    <Type Name="Microsoft.CodeAnalysis.CSharp.Syntax.ConversionOperatorMemberCrefSyntax" Id="T:Microsoft.CodeAnalysis.CSharp.Syntax.ConversionOperatorMemberCrefSyntax">
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ConversionOperatorMemberCrefSyntax.Accept(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ConversionOperatorMemberCrefSyntax.Accept``1(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor{``0})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ConversionOperatorMemberCrefSyntax.AddParametersParameters(Microsoft.CodeAnalysis.CSharp.Syntax.CrefParameterSyntax[])" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ConversionOperatorMemberCrefSyntax.Update(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.CrefParameterListSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ConversionOperatorMemberCrefSyntax.WithImplicitOrExplicitKeyword(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ConversionOperatorMemberCrefSyntax.WithOperatorKeyword(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ConversionOperatorMemberCrefSyntax.WithParameters(Microsoft.CodeAnalysis.CSharp.Syntax.CrefParameterListSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ConversionOperatorMemberCrefSyntax.WithType(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax)" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.ConversionOperatorMemberCrefSyntax.ImplicitOrExplicitKeyword" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.ConversionOperatorMemberCrefSyntax.OperatorKeyword" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.ConversionOperatorMemberCrefSyntax.Parameters" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.ConversionOperatorMemberCrefSyntax.Type" />
    </Type>
    <Type Name="Microsoft.CodeAnalysis.CSharp.Syntax.CrefBracketedParameterListSyntax" Id="T:Microsoft.CodeAnalysis.CSharp.Syntax.CrefBracketedParameterListSyntax">
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.CrefBracketedParameterListSyntax.Accept(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.CrefBracketedParameterListSyntax.Accept``1(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor{``0})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.CrefBracketedParameterListSyntax.AddParameters(Microsoft.CodeAnalysis.CSharp.Syntax.CrefParameterSyntax[])" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.CrefBracketedParameterListSyntax.Update(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.CrefParameterSyntax},Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.CrefBracketedParameterListSyntax.WithCloseBracketToken(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.CrefBracketedParameterListSyntax.WithOpenBracketToken(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.CrefBracketedParameterListSyntax.WithParameters(Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.CrefParameterSyntax})" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.CrefBracketedParameterListSyntax.CloseBracketToken" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.CrefBracketedParameterListSyntax.OpenBracketToken" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.CrefBracketedParameterListSyntax.Parameters" />
    </Type>
    <Type Name="Microsoft.CodeAnalysis.CSharp.Syntax.CrefParameterListSyntax" Id="T:Microsoft.CodeAnalysis.CSharp.Syntax.CrefParameterListSyntax">
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.CrefParameterListSyntax.Accept(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.CrefParameterListSyntax.Accept``1(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor{``0})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.CrefParameterListSyntax.AddParameters(Microsoft.CodeAnalysis.CSharp.Syntax.CrefParameterSyntax[])" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.CrefParameterListSyntax.Update(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.CrefParameterSyntax},Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.CrefParameterListSyntax.WithCloseParenToken(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.CrefParameterListSyntax.WithOpenParenToken(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.CrefParameterListSyntax.WithParameters(Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.CrefParameterSyntax})" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.CrefParameterListSyntax.CloseParenToken" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.CrefParameterListSyntax.OpenParenToken" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.CrefParameterListSyntax.Parameters" />
    </Type>
    <Type Name="Microsoft.CodeAnalysis.CSharp.Syntax.CrefParameterSyntax" Id="T:Microsoft.CodeAnalysis.CSharp.Syntax.CrefParameterSyntax">
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.CrefParameterSyntax.Accept(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.CrefParameterSyntax.Accept``1(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor{``0})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.CrefParameterSyntax.Update(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.CrefParameterSyntax.WithRefOrOutKeyword(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.CrefParameterSyntax.WithType(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax)" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.CrefParameterSyntax.RefOrOutKeyword" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.CrefParameterSyntax.Type" />
    </Type>
    <Type Name="Microsoft.CodeAnalysis.CSharp.Syntax.CrefSyntax" Id="T:Microsoft.CodeAnalysis.CSharp.Syntax.CrefSyntax" />
    <Type Name="Microsoft.CodeAnalysis.CSharp.Syntax.DeclarationExpressionSyntax" Id="T:Microsoft.CodeAnalysis.CSharp.Syntax.DeclarationExpressionSyntax">
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.DeclarationExpressionSyntax.Accept(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.DeclarationExpressionSyntax.Accept``1(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor{``0})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.DeclarationExpressionSyntax.Update(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.VariableDesignationSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.DeclarationExpressionSyntax.WithDesignation(Microsoft.CodeAnalysis.CSharp.Syntax.VariableDesignationSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.DeclarationExpressionSyntax.WithType(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax)" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.DeclarationExpressionSyntax.Designation" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.DeclarationExpressionSyntax.Type" />
    </Type>
    <Type Name="Microsoft.CodeAnalysis.CSharp.Syntax.DeclarationPatternSyntax" Id="T:Microsoft.CodeAnalysis.CSharp.Syntax.DeclarationPatternSyntax">
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.DeclarationPatternSyntax.Accept(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.DeclarationPatternSyntax.Accept``1(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor{``0})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.DeclarationPatternSyntax.Update(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.VariableDesignationSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.DeclarationPatternSyntax.WithDesignation(Microsoft.CodeAnalysis.CSharp.Syntax.VariableDesignationSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.DeclarationPatternSyntax.WithType(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax)" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.DeclarationPatternSyntax.Designation" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.DeclarationPatternSyntax.Type" />
    </Type>
    <Type Name="Microsoft.CodeAnalysis.CSharp.Syntax.DefaultExpressionSyntax" Id="T:Microsoft.CodeAnalysis.CSharp.Syntax.DefaultExpressionSyntax">
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.DefaultExpressionSyntax.Accept(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.DefaultExpressionSyntax.Accept``1(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor{``0})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.DefaultExpressionSyntax.Update(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.DefaultExpressionSyntax.WithCloseParenToken(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.DefaultExpressionSyntax.WithKeyword(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.DefaultExpressionSyntax.WithOpenParenToken(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.DefaultExpressionSyntax.WithType(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax)" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.DefaultExpressionSyntax.CloseParenToken" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.DefaultExpressionSyntax.Keyword" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.DefaultExpressionSyntax.OpenParenToken" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.DefaultExpressionSyntax.Type" />
    </Type>
    <Type Name="Microsoft.CodeAnalysis.CSharp.Syntax.DefaultSwitchLabelSyntax" Id="T:Microsoft.CodeAnalysis.CSharp.Syntax.DefaultSwitchLabelSyntax">
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.DefaultSwitchLabelSyntax.Accept(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.DefaultSwitchLabelSyntax.Accept``1(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor{``0})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.DefaultSwitchLabelSyntax.Update(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.DefaultSwitchLabelSyntax.WithColonToken(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.DefaultSwitchLabelSyntax.WithKeyword(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.DefaultSwitchLabelSyntax.ColonToken" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.DefaultSwitchLabelSyntax.Keyword" />
    </Type>
    <Type Name="Microsoft.CodeAnalysis.CSharp.Syntax.DefineDirectiveTriviaSyntax" Id="T:Microsoft.CodeAnalysis.CSharp.Syntax.DefineDirectiveTriviaSyntax">
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.DefineDirectiveTriviaSyntax.Accept(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.DefineDirectiveTriviaSyntax.Accept``1(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor{``0})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.DefineDirectiveTriviaSyntax.Update(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,System.Boolean)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.DefineDirectiveTriviaSyntax.WithDefineKeyword(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.DefineDirectiveTriviaSyntax.WithEndOfDirectiveToken(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.DefineDirectiveTriviaSyntax.WithHashToken(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.DefineDirectiveTriviaSyntax.WithIsActive(System.Boolean)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.DefineDirectiveTriviaSyntax.WithName(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.DefineDirectiveTriviaSyntax.DefineKeyword" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.DefineDirectiveTriviaSyntax.EndOfDirectiveToken" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.DefineDirectiveTriviaSyntax.HashToken" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.DefineDirectiveTriviaSyntax.IsActive" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.DefineDirectiveTriviaSyntax.Name" />
    </Type>
    <Type Name="Microsoft.CodeAnalysis.CSharp.Syntax.DelegateDeclarationSyntax" Id="T:Microsoft.CodeAnalysis.CSharp.Syntax.DelegateDeclarationSyntax">
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.DelegateDeclarationSyntax.Accept(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.DelegateDeclarationSyntax.Accept``1(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor{``0})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.DelegateDeclarationSyntax.AddAttributeLists(Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax[])" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.DelegateDeclarationSyntax.AddConstraintClauses(Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintClauseSyntax[])" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.DelegateDeclarationSyntax.AddModifiers(Microsoft.CodeAnalysis.SyntaxToken[])" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.DelegateDeclarationSyntax.AddParameterListParameters(Microsoft.CodeAnalysis.CSharp.Syntax.ParameterSyntax[])" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.DelegateDeclarationSyntax.AddTypeParameterListParameters(Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterSyntax[])" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.DelegateDeclarationSyntax.Update(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterListSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintClauseSyntax},Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.DelegateDeclarationSyntax.WithAttributeLists(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.DelegateDeclarationSyntax.WithConstraintClauses(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintClauseSyntax})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.DelegateDeclarationSyntax.WithDelegateKeyword(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.DelegateDeclarationSyntax.WithIdentifier(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.DelegateDeclarationSyntax.WithModifiers(Microsoft.CodeAnalysis.SyntaxTokenList)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.DelegateDeclarationSyntax.WithParameterList(Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.DelegateDeclarationSyntax.WithReturnType(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.DelegateDeclarationSyntax.WithSemicolonToken(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.DelegateDeclarationSyntax.WithTypeParameterList(Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterListSyntax)" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.DelegateDeclarationSyntax.Arity" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.DelegateDeclarationSyntax.AttributeLists" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.DelegateDeclarationSyntax.ConstraintClauses" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.DelegateDeclarationSyntax.DelegateKeyword" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.DelegateDeclarationSyntax.Identifier" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.DelegateDeclarationSyntax.Modifiers" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.DelegateDeclarationSyntax.ParameterList" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.DelegateDeclarationSyntax.ReturnType" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.DelegateDeclarationSyntax.SemicolonToken" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.DelegateDeclarationSyntax.TypeParameterList" />
    </Type>
    <Type Name="Microsoft.CodeAnalysis.CSharp.Syntax.DestructorDeclarationSyntax" Id="T:Microsoft.CodeAnalysis.CSharp.Syntax.DestructorDeclarationSyntax">
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.DestructorDeclarationSyntax.Accept(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.DestructorDeclarationSyntax.Accept``1(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor{``0})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.DestructorDeclarationSyntax.AddAttributeLists(Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax[])" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.DestructorDeclarationSyntax.AddBodyStatements(Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax[])" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.DestructorDeclarationSyntax.AddModifiers(Microsoft.CodeAnalysis.SyntaxToken[])" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.DestructorDeclarationSyntax.AddParameterListParameters(Microsoft.CodeAnalysis.CSharp.Syntax.ParameterSyntax[])" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.DestructorDeclarationSyntax.Update(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax,Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.DestructorDeclarationSyntax.Update(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax,Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.DestructorDeclarationSyntax.WithAttributeLists(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.DestructorDeclarationSyntax.WithBody(Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.DestructorDeclarationSyntax.WithExpressionBody(Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.DestructorDeclarationSyntax.WithIdentifier(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.DestructorDeclarationSyntax.WithModifiers(Microsoft.CodeAnalysis.SyntaxTokenList)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.DestructorDeclarationSyntax.WithParameterList(Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.DestructorDeclarationSyntax.WithSemicolonToken(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.DestructorDeclarationSyntax.WithTildeToken(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.DestructorDeclarationSyntax.AttributeLists" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.DestructorDeclarationSyntax.Body" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.DestructorDeclarationSyntax.ExpressionBody" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.DestructorDeclarationSyntax.Identifier" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.DestructorDeclarationSyntax.Modifiers" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.DestructorDeclarationSyntax.ParameterList" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.DestructorDeclarationSyntax.SemicolonToken" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.DestructorDeclarationSyntax.TildeToken" />
    </Type>
    <Type Name="Microsoft.CodeAnalysis.CSharp.Syntax.DirectiveTriviaSyntax" Id="T:Microsoft.CodeAnalysis.CSharp.Syntax.DirectiveTriviaSyntax">
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.DirectiveTriviaSyntax.GetNextDirective(System.Func{Microsoft.CodeAnalysis.CSharp.Syntax.DirectiveTriviaSyntax,System.Boolean})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.DirectiveTriviaSyntax.GetPreviousDirective(System.Func{Microsoft.CodeAnalysis.CSharp.Syntax.DirectiveTriviaSyntax,System.Boolean})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.DirectiveTriviaSyntax.GetRelatedDirectives" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.DirectiveTriviaSyntax.DirectiveNameToken" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.DirectiveTriviaSyntax.EndOfDirectiveToken" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.DirectiveTriviaSyntax.HashToken" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.DirectiveTriviaSyntax.IsActive" />
    </Type>
    <Type Name="Microsoft.CodeAnalysis.CSharp.Syntax.DiscardDesignationSyntax" Id="T:Microsoft.CodeAnalysis.CSharp.Syntax.DiscardDesignationSyntax">
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.DiscardDesignationSyntax.Accept(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.DiscardDesignationSyntax.Accept``1(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor{``0})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.DiscardDesignationSyntax.Update(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.DiscardDesignationSyntax.WithUnderscoreToken(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.DiscardDesignationSyntax.UnderscoreToken" />
    </Type>
    <Type Name="Microsoft.CodeAnalysis.CSharp.Syntax.DocumentationCommentTriviaSyntax" Id="T:Microsoft.CodeAnalysis.CSharp.Syntax.DocumentationCommentTriviaSyntax">
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.DocumentationCommentTriviaSyntax.Accept(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.DocumentationCommentTriviaSyntax.Accept``1(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor{``0})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.DocumentationCommentTriviaSyntax.AddContent(Microsoft.CodeAnalysis.CSharp.Syntax.XmlNodeSyntax[])" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.DocumentationCommentTriviaSyntax.Update(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.XmlNodeSyntax},Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.DocumentationCommentTriviaSyntax.WithContent(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.XmlNodeSyntax})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.DocumentationCommentTriviaSyntax.WithEndOfComment(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.DocumentationCommentTriviaSyntax.Content" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.DocumentationCommentTriviaSyntax.EndOfComment" />
    </Type>
    <Type Name="Microsoft.CodeAnalysis.CSharp.Syntax.DoStatementSyntax" Id="T:Microsoft.CodeAnalysis.CSharp.Syntax.DoStatementSyntax">
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.DoStatementSyntax.Accept(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.DoStatementSyntax.Accept``1(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor{``0})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.DoStatementSyntax.Update(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.DoStatementSyntax.WithCloseParenToken(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.DoStatementSyntax.WithCondition(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.DoStatementSyntax.WithDoKeyword(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.DoStatementSyntax.WithOpenParenToken(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.DoStatementSyntax.WithSemicolonToken(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.DoStatementSyntax.WithStatement(Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.DoStatementSyntax.WithWhileKeyword(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.DoStatementSyntax.CloseParenToken" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.DoStatementSyntax.Condition" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.DoStatementSyntax.DoKeyword" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.DoStatementSyntax.OpenParenToken" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.DoStatementSyntax.SemicolonToken" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.DoStatementSyntax.Statement" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.DoStatementSyntax.WhileKeyword" />
    </Type>
    <Type Name="Microsoft.CodeAnalysis.CSharp.Syntax.ElementAccessExpressionSyntax" Id="T:Microsoft.CodeAnalysis.CSharp.Syntax.ElementAccessExpressionSyntax">
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ElementAccessExpressionSyntax.Accept(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ElementAccessExpressionSyntax.Accept``1(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor{``0})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ElementAccessExpressionSyntax.AddArgumentListArguments(Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentSyntax[])" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ElementAccessExpressionSyntax.Update(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.BracketedArgumentListSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ElementAccessExpressionSyntax.WithArgumentList(Microsoft.CodeAnalysis.CSharp.Syntax.BracketedArgumentListSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ElementAccessExpressionSyntax.WithExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.ElementAccessExpressionSyntax.ArgumentList" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.ElementAccessExpressionSyntax.Expression" />
    </Type>
    <Type Name="Microsoft.CodeAnalysis.CSharp.Syntax.ElementBindingExpressionSyntax" Id="T:Microsoft.CodeAnalysis.CSharp.Syntax.ElementBindingExpressionSyntax">
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ElementBindingExpressionSyntax.Accept(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ElementBindingExpressionSyntax.Accept``1(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor{``0})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ElementBindingExpressionSyntax.AddArgumentListArguments(Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentSyntax[])" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ElementBindingExpressionSyntax.Update(Microsoft.CodeAnalysis.CSharp.Syntax.BracketedArgumentListSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ElementBindingExpressionSyntax.WithArgumentList(Microsoft.CodeAnalysis.CSharp.Syntax.BracketedArgumentListSyntax)" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.ElementBindingExpressionSyntax.ArgumentList" />
    </Type>
    <Type Name="Microsoft.CodeAnalysis.CSharp.Syntax.ElifDirectiveTriviaSyntax" Id="T:Microsoft.CodeAnalysis.CSharp.Syntax.ElifDirectiveTriviaSyntax">
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ElifDirectiveTriviaSyntax.Accept(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ElifDirectiveTriviaSyntax.Accept``1(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor{``0})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ElifDirectiveTriviaSyntax.Update(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken,System.Boolean,System.Boolean,System.Boolean)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ElifDirectiveTriviaSyntax.WithBranchTaken(System.Boolean)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ElifDirectiveTriviaSyntax.WithCondition(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ElifDirectiveTriviaSyntax.WithConditionValue(System.Boolean)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ElifDirectiveTriviaSyntax.WithElifKeyword(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ElifDirectiveTriviaSyntax.WithEndOfDirectiveToken(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ElifDirectiveTriviaSyntax.WithHashToken(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ElifDirectiveTriviaSyntax.WithIsActive(System.Boolean)" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.ElifDirectiveTriviaSyntax.BranchTaken" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.ElifDirectiveTriviaSyntax.Condition" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.ElifDirectiveTriviaSyntax.ConditionValue" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.ElifDirectiveTriviaSyntax.ElifKeyword" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.ElifDirectiveTriviaSyntax.EndOfDirectiveToken" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.ElifDirectiveTriviaSyntax.HashToken" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.ElifDirectiveTriviaSyntax.IsActive" />
    </Type>
    <Type Name="Microsoft.CodeAnalysis.CSharp.Syntax.ElseClauseSyntax" Id="T:Microsoft.CodeAnalysis.CSharp.Syntax.ElseClauseSyntax">
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ElseClauseSyntax.Accept(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ElseClauseSyntax.Accept``1(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor{``0})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ElseClauseSyntax.Update(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ElseClauseSyntax.WithElseKeyword(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ElseClauseSyntax.WithStatement(Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax)" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.ElseClauseSyntax.ElseKeyword" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.ElseClauseSyntax.Statement" />
    </Type>
    <Type Name="Microsoft.CodeAnalysis.CSharp.Syntax.ElseDirectiveTriviaSyntax" Id="T:Microsoft.CodeAnalysis.CSharp.Syntax.ElseDirectiveTriviaSyntax">
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ElseDirectiveTriviaSyntax.Accept(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ElseDirectiveTriviaSyntax.Accept``1(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor{``0})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ElseDirectiveTriviaSyntax.Update(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,System.Boolean,System.Boolean)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ElseDirectiveTriviaSyntax.WithBranchTaken(System.Boolean)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ElseDirectiveTriviaSyntax.WithElseKeyword(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ElseDirectiveTriviaSyntax.WithEndOfDirectiveToken(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ElseDirectiveTriviaSyntax.WithHashToken(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ElseDirectiveTriviaSyntax.WithIsActive(System.Boolean)" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.ElseDirectiveTriviaSyntax.BranchTaken" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.ElseDirectiveTriviaSyntax.ElseKeyword" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.ElseDirectiveTriviaSyntax.EndOfDirectiveToken" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.ElseDirectiveTriviaSyntax.HashToken" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.ElseDirectiveTriviaSyntax.IsActive" />
    </Type>
    <Type Name="Microsoft.CodeAnalysis.CSharp.Syntax.EmptyStatementSyntax" Id="T:Microsoft.CodeAnalysis.CSharp.Syntax.EmptyStatementSyntax">
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.EmptyStatementSyntax.Accept(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.EmptyStatementSyntax.Accept``1(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor{``0})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.EmptyStatementSyntax.Update(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.EmptyStatementSyntax.WithSemicolonToken(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.EmptyStatementSyntax.SemicolonToken" />
    </Type>
    <Type Name="Microsoft.CodeAnalysis.CSharp.Syntax.EndIfDirectiveTriviaSyntax" Id="T:Microsoft.CodeAnalysis.CSharp.Syntax.EndIfDirectiveTriviaSyntax">
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.EndIfDirectiveTriviaSyntax.Accept(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.EndIfDirectiveTriviaSyntax.Accept``1(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor{``0})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.EndIfDirectiveTriviaSyntax.Update(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,System.Boolean)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.EndIfDirectiveTriviaSyntax.WithEndIfKeyword(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.EndIfDirectiveTriviaSyntax.WithEndOfDirectiveToken(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.EndIfDirectiveTriviaSyntax.WithHashToken(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.EndIfDirectiveTriviaSyntax.WithIsActive(System.Boolean)" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.EndIfDirectiveTriviaSyntax.EndIfKeyword" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.EndIfDirectiveTriviaSyntax.EndOfDirectiveToken" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.EndIfDirectiveTriviaSyntax.HashToken" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.EndIfDirectiveTriviaSyntax.IsActive" />
    </Type>
    <Type Name="Microsoft.CodeAnalysis.CSharp.Syntax.EndRegionDirectiveTriviaSyntax" Id="T:Microsoft.CodeAnalysis.CSharp.Syntax.EndRegionDirectiveTriviaSyntax">
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.EndRegionDirectiveTriviaSyntax.Accept(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.EndRegionDirectiveTriviaSyntax.Accept``1(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor{``0})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.EndRegionDirectiveTriviaSyntax.Update(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,System.Boolean)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.EndRegionDirectiveTriviaSyntax.WithEndOfDirectiveToken(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.EndRegionDirectiveTriviaSyntax.WithEndRegionKeyword(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.EndRegionDirectiveTriviaSyntax.WithHashToken(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.EndRegionDirectiveTriviaSyntax.WithIsActive(System.Boolean)" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.EndRegionDirectiveTriviaSyntax.EndOfDirectiveToken" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.EndRegionDirectiveTriviaSyntax.EndRegionKeyword" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.EndRegionDirectiveTriviaSyntax.HashToken" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.EndRegionDirectiveTriviaSyntax.IsActive" />
    </Type>
    <Type Name="Microsoft.CodeAnalysis.CSharp.Syntax.EnumDeclarationSyntax" Id="T:Microsoft.CodeAnalysis.CSharp.Syntax.EnumDeclarationSyntax">
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.EnumDeclarationSyntax.Accept(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.EnumDeclarationSyntax.Accept``1(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor{``0})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.EnumDeclarationSyntax.AddAttributeLists(Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax[])" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.EnumDeclarationSyntax.AddBaseListTypes(Microsoft.CodeAnalysis.CSharp.Syntax.BaseTypeSyntax[])" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.EnumDeclarationSyntax.AddMembers(Microsoft.CodeAnalysis.CSharp.Syntax.EnumMemberDeclarationSyntax[])" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.EnumDeclarationSyntax.AddModifiers(Microsoft.CodeAnalysis.SyntaxToken[])" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.EnumDeclarationSyntax.Update(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.BaseListSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.EnumMemberDeclarationSyntax},Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.EnumDeclarationSyntax.WithAttributeLists(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.EnumDeclarationSyntax.WithBaseList(Microsoft.CodeAnalysis.CSharp.Syntax.BaseListSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.EnumDeclarationSyntax.WithCloseBraceToken(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.EnumDeclarationSyntax.WithEnumKeyword(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.EnumDeclarationSyntax.WithIdentifier(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.EnumDeclarationSyntax.WithMembers(Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.EnumMemberDeclarationSyntax})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.EnumDeclarationSyntax.WithModifiers(Microsoft.CodeAnalysis.SyntaxTokenList)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.EnumDeclarationSyntax.WithOpenBraceToken(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.EnumDeclarationSyntax.WithSemicolonToken(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.EnumDeclarationSyntax.AttributeLists" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.EnumDeclarationSyntax.BaseList" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.EnumDeclarationSyntax.CloseBraceToken" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.EnumDeclarationSyntax.EnumKeyword" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.EnumDeclarationSyntax.Identifier" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.EnumDeclarationSyntax.Members" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.EnumDeclarationSyntax.Modifiers" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.EnumDeclarationSyntax.OpenBraceToken" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.EnumDeclarationSyntax.SemicolonToken" />
    </Type>
    <Type Name="Microsoft.CodeAnalysis.CSharp.Syntax.EnumMemberDeclarationSyntax" Id="T:Microsoft.CodeAnalysis.CSharp.Syntax.EnumMemberDeclarationSyntax">
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.EnumMemberDeclarationSyntax.Accept(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.EnumMemberDeclarationSyntax.Accept``1(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor{``0})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.EnumMemberDeclarationSyntax.AddAttributeLists(Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax[])" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.EnumMemberDeclarationSyntax.Update(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.EqualsValueClauseSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.EnumMemberDeclarationSyntax.WithAttributeLists(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.EnumMemberDeclarationSyntax.WithEqualsValue(Microsoft.CodeAnalysis.CSharp.Syntax.EqualsValueClauseSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.EnumMemberDeclarationSyntax.WithIdentifier(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.EnumMemberDeclarationSyntax.AttributeLists" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.EnumMemberDeclarationSyntax.EqualsValue" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.EnumMemberDeclarationSyntax.Identifier" />
    </Type>
    <Type Name="Microsoft.CodeAnalysis.CSharp.Syntax.EqualsValueClauseSyntax" Id="T:Microsoft.CodeAnalysis.CSharp.Syntax.EqualsValueClauseSyntax">
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.EqualsValueClauseSyntax.Accept(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.EqualsValueClauseSyntax.Accept``1(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor{``0})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.EqualsValueClauseSyntax.Update(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.EqualsValueClauseSyntax.WithEqualsToken(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.EqualsValueClauseSyntax.WithValue(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.EqualsValueClauseSyntax.EqualsToken" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.EqualsValueClauseSyntax.Value" />
    </Type>
    <Type Name="Microsoft.CodeAnalysis.CSharp.Syntax.ErrorDirectiveTriviaSyntax" Id="T:Microsoft.CodeAnalysis.CSharp.Syntax.ErrorDirectiveTriviaSyntax">
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ErrorDirectiveTriviaSyntax.Accept(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ErrorDirectiveTriviaSyntax.Accept``1(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor{``0})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ErrorDirectiveTriviaSyntax.Update(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,System.Boolean)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ErrorDirectiveTriviaSyntax.WithEndOfDirectiveToken(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ErrorDirectiveTriviaSyntax.WithErrorKeyword(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ErrorDirectiveTriviaSyntax.WithHashToken(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ErrorDirectiveTriviaSyntax.WithIsActive(System.Boolean)" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.ErrorDirectiveTriviaSyntax.EndOfDirectiveToken" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.ErrorDirectiveTriviaSyntax.ErrorKeyword" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.ErrorDirectiveTriviaSyntax.HashToken" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.ErrorDirectiveTriviaSyntax.IsActive" />
    </Type>
    <Type Name="Microsoft.CodeAnalysis.CSharp.Syntax.EventDeclarationSyntax" Id="T:Microsoft.CodeAnalysis.CSharp.Syntax.EventDeclarationSyntax">
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.EventDeclarationSyntax.Accept(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.EventDeclarationSyntax.Accept``1(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor{``0})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.EventDeclarationSyntax.AddAccessorListAccessors(Microsoft.CodeAnalysis.CSharp.Syntax.AccessorDeclarationSyntax[])" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.EventDeclarationSyntax.AddAttributeLists(Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax[])" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.EventDeclarationSyntax.AddModifiers(Microsoft.CodeAnalysis.SyntaxToken[])" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.EventDeclarationSyntax.Update(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ExplicitInterfaceSpecifierSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.AccessorListSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.EventDeclarationSyntax.WithAccessorList(Microsoft.CodeAnalysis.CSharp.Syntax.AccessorListSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.EventDeclarationSyntax.WithAttributeLists(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.EventDeclarationSyntax.WithEventKeyword(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.EventDeclarationSyntax.WithExplicitInterfaceSpecifier(Microsoft.CodeAnalysis.CSharp.Syntax.ExplicitInterfaceSpecifierSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.EventDeclarationSyntax.WithIdentifier(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.EventDeclarationSyntax.WithModifiers(Microsoft.CodeAnalysis.SyntaxTokenList)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.EventDeclarationSyntax.WithType(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax)" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.EventDeclarationSyntax.AccessorList" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.EventDeclarationSyntax.AttributeLists" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.EventDeclarationSyntax.EventKeyword" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.EventDeclarationSyntax.ExplicitInterfaceSpecifier" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.EventDeclarationSyntax.Identifier" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.EventDeclarationSyntax.Modifiers" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.EventDeclarationSyntax.Type" />
    </Type>
    <Type Name="Microsoft.CodeAnalysis.CSharp.Syntax.EventFieldDeclarationSyntax" Id="T:Microsoft.CodeAnalysis.CSharp.Syntax.EventFieldDeclarationSyntax">
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.EventFieldDeclarationSyntax.Accept(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.EventFieldDeclarationSyntax.Accept``1(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor{``0})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.EventFieldDeclarationSyntax.AddAttributeLists(Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax[])" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.EventFieldDeclarationSyntax.AddDeclarationVariables(Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclaratorSyntax[])" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.EventFieldDeclarationSyntax.AddModifiers(Microsoft.CodeAnalysis.SyntaxToken[])" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.EventFieldDeclarationSyntax.Update(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclarationSyntax,Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.EventFieldDeclarationSyntax.WithAttributeLists(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.EventFieldDeclarationSyntax.WithDeclaration(Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclarationSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.EventFieldDeclarationSyntax.WithEventKeyword(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.EventFieldDeclarationSyntax.WithModifiers(Microsoft.CodeAnalysis.SyntaxTokenList)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.EventFieldDeclarationSyntax.WithSemicolonToken(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.EventFieldDeclarationSyntax.AttributeLists" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.EventFieldDeclarationSyntax.Declaration" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.EventFieldDeclarationSyntax.EventKeyword" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.EventFieldDeclarationSyntax.Modifiers" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.EventFieldDeclarationSyntax.SemicolonToken" />
    </Type>
    <Type Name="Microsoft.CodeAnalysis.CSharp.Syntax.ExplicitInterfaceSpecifierSyntax" Id="T:Microsoft.CodeAnalysis.CSharp.Syntax.ExplicitInterfaceSpecifierSyntax">
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ExplicitInterfaceSpecifierSyntax.Accept(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ExplicitInterfaceSpecifierSyntax.Accept``1(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor{``0})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ExplicitInterfaceSpecifierSyntax.Update(Microsoft.CodeAnalysis.CSharp.Syntax.NameSyntax,Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ExplicitInterfaceSpecifierSyntax.WithDotToken(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ExplicitInterfaceSpecifierSyntax.WithName(Microsoft.CodeAnalysis.CSharp.Syntax.NameSyntax)" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.ExplicitInterfaceSpecifierSyntax.DotToken" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.ExplicitInterfaceSpecifierSyntax.Name" />
    </Type>
    <Type Name="Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionStatementSyntax" Id="T:Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionStatementSyntax">
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionStatementSyntax.Accept(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionStatementSyntax.Accept``1(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor{``0})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionStatementSyntax.Update(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionStatementSyntax.WithExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionStatementSyntax.WithSemicolonToken(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionStatementSyntax.AllowsAnyExpression" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionStatementSyntax.Expression" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionStatementSyntax.SemicolonToken" />
    </Type>
    <Type Name="Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax" Id="T:Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax" />
    <Type Name="Microsoft.CodeAnalysis.CSharp.Syntax.ExternAliasDirectiveSyntax" Id="T:Microsoft.CodeAnalysis.CSharp.Syntax.ExternAliasDirectiveSyntax">
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ExternAliasDirectiveSyntax.Accept(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ExternAliasDirectiveSyntax.Accept``1(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor{``0})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ExternAliasDirectiveSyntax.Update(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ExternAliasDirectiveSyntax.WithAliasKeyword(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ExternAliasDirectiveSyntax.WithExternKeyword(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ExternAliasDirectiveSyntax.WithIdentifier(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ExternAliasDirectiveSyntax.WithSemicolonToken(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.ExternAliasDirectiveSyntax.AliasKeyword" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.ExternAliasDirectiveSyntax.ExternKeyword" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.ExternAliasDirectiveSyntax.Identifier" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.ExternAliasDirectiveSyntax.SemicolonToken" />
    </Type>
    <Type Name="Microsoft.CodeAnalysis.CSharp.Syntax.FieldDeclarationSyntax" Id="T:Microsoft.CodeAnalysis.CSharp.Syntax.FieldDeclarationSyntax">
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.FieldDeclarationSyntax.Accept(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.FieldDeclarationSyntax.Accept``1(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor{``0})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.FieldDeclarationSyntax.AddAttributeLists(Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax[])" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.FieldDeclarationSyntax.AddDeclarationVariables(Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclaratorSyntax[])" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.FieldDeclarationSyntax.AddModifiers(Microsoft.CodeAnalysis.SyntaxToken[])" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.FieldDeclarationSyntax.Update(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclarationSyntax,Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.FieldDeclarationSyntax.WithAttributeLists(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.FieldDeclarationSyntax.WithDeclaration(Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclarationSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.FieldDeclarationSyntax.WithModifiers(Microsoft.CodeAnalysis.SyntaxTokenList)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.FieldDeclarationSyntax.WithSemicolonToken(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.FieldDeclarationSyntax.AttributeLists" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.FieldDeclarationSyntax.Declaration" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.FieldDeclarationSyntax.Modifiers" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.FieldDeclarationSyntax.SemicolonToken" />
    </Type>
    <Type Name="Microsoft.CodeAnalysis.CSharp.Syntax.FinallyClauseSyntax" Id="T:Microsoft.CodeAnalysis.CSharp.Syntax.FinallyClauseSyntax">
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.FinallyClauseSyntax.Accept(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.FinallyClauseSyntax.Accept``1(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor{``0})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.FinallyClauseSyntax.AddBlockStatements(Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax[])" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.FinallyClauseSyntax.Update(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.FinallyClauseSyntax.WithBlock(Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.FinallyClauseSyntax.WithFinallyKeyword(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.FinallyClauseSyntax.Block" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.FinallyClauseSyntax.FinallyKeyword" />
    </Type>
    <Type Name="Microsoft.CodeAnalysis.CSharp.Syntax.FixedStatementSyntax" Id="T:Microsoft.CodeAnalysis.CSharp.Syntax.FixedStatementSyntax">
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.FixedStatementSyntax.Accept(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.FixedStatementSyntax.Accept``1(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor{``0})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.FixedStatementSyntax.AddDeclarationVariables(Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclaratorSyntax[])" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.FixedStatementSyntax.Update(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclarationSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.FixedStatementSyntax.WithCloseParenToken(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.FixedStatementSyntax.WithDeclaration(Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclarationSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.FixedStatementSyntax.WithFixedKeyword(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.FixedStatementSyntax.WithOpenParenToken(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.FixedStatementSyntax.WithStatement(Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax)" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.FixedStatementSyntax.CloseParenToken" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.FixedStatementSyntax.Declaration" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.FixedStatementSyntax.FixedKeyword" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.FixedStatementSyntax.OpenParenToken" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.FixedStatementSyntax.Statement" />
    </Type>
    <Type Name="Microsoft.CodeAnalysis.CSharp.Syntax.ForEachStatementSyntax" Id="T:Microsoft.CodeAnalysis.CSharp.Syntax.ForEachStatementSyntax">
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ForEachStatementSyntax.Accept(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ForEachStatementSyntax.Accept``1(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor{``0})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ForEachStatementSyntax.Update(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ForEachStatementSyntax.WithCloseParenToken(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ForEachStatementSyntax.WithExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ForEachStatementSyntax.WithForEachKeyword(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ForEachStatementSyntax.WithIdentifier(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ForEachStatementSyntax.WithInKeyword(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ForEachStatementSyntax.WithOpenParenToken(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ForEachStatementSyntax.WithStatement(Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ForEachStatementSyntax.WithType(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax)" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.ForEachStatementSyntax.CloseParenToken" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.ForEachStatementSyntax.Expression" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.ForEachStatementSyntax.ForEachKeyword" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.ForEachStatementSyntax.Identifier" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.ForEachStatementSyntax.InKeyword" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.ForEachStatementSyntax.OpenParenToken" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.ForEachStatementSyntax.Statement" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.ForEachStatementSyntax.Type" />
    </Type>
    <Type Name="Microsoft.CodeAnalysis.CSharp.Syntax.ForEachVariableStatementSyntax" Id="T:Microsoft.CodeAnalysis.CSharp.Syntax.ForEachVariableStatementSyntax">
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ForEachVariableStatementSyntax.Accept(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ForEachVariableStatementSyntax.Accept``1(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor{``0})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ForEachVariableStatementSyntax.Update(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ForEachVariableStatementSyntax.WithCloseParenToken(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ForEachVariableStatementSyntax.WithExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ForEachVariableStatementSyntax.WithForEachKeyword(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ForEachVariableStatementSyntax.WithInKeyword(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ForEachVariableStatementSyntax.WithOpenParenToken(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ForEachVariableStatementSyntax.WithStatement(Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ForEachVariableStatementSyntax.WithVariable(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.ForEachVariableStatementSyntax.CloseParenToken" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.ForEachVariableStatementSyntax.Expression" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.ForEachVariableStatementSyntax.ForEachKeyword" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.ForEachVariableStatementSyntax.InKeyword" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.ForEachVariableStatementSyntax.OpenParenToken" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.ForEachVariableStatementSyntax.Statement" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.ForEachVariableStatementSyntax.Variable" />
    </Type>
    <Type Name="Microsoft.CodeAnalysis.CSharp.Syntax.ForStatementSyntax" Id="T:Microsoft.CodeAnalysis.CSharp.Syntax.ForStatementSyntax">
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ForStatementSyntax.Accept(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ForStatementSyntax.Accept``1(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor{``0})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ForStatementSyntax.AddIncrementors(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax[])" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ForStatementSyntax.AddInitializers(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax[])" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ForStatementSyntax.Update(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclarationSyntax,Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax},Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax},Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ForStatementSyntax.WithCloseParenToken(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ForStatementSyntax.WithCondition(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ForStatementSyntax.WithDeclaration(Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclarationSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ForStatementSyntax.WithFirstSemicolonToken(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ForStatementSyntax.WithForKeyword(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ForStatementSyntax.WithIncrementors(Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ForStatementSyntax.WithInitializers(Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ForStatementSyntax.WithOpenParenToken(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ForStatementSyntax.WithSecondSemicolonToken(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ForStatementSyntax.WithStatement(Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax)" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.ForStatementSyntax.CloseParenToken" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.ForStatementSyntax.Condition" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.ForStatementSyntax.Declaration" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.ForStatementSyntax.FirstSemicolonToken" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.ForStatementSyntax.ForKeyword" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.ForStatementSyntax.Incrementors" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.ForStatementSyntax.Initializers" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.ForStatementSyntax.OpenParenToken" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.ForStatementSyntax.SecondSemicolonToken" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.ForStatementSyntax.Statement" />
    </Type>
    <Type Name="Microsoft.CodeAnalysis.CSharp.Syntax.FromClauseSyntax" Id="T:Microsoft.CodeAnalysis.CSharp.Syntax.FromClauseSyntax">
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.FromClauseSyntax.Accept(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.FromClauseSyntax.Accept``1(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor{``0})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.FromClauseSyntax.Update(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.FromClauseSyntax.WithExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.FromClauseSyntax.WithFromKeyword(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.FromClauseSyntax.WithIdentifier(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.FromClauseSyntax.WithInKeyword(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.FromClauseSyntax.WithType(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax)" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.FromClauseSyntax.Expression" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.FromClauseSyntax.FromKeyword" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.FromClauseSyntax.Identifier" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.FromClauseSyntax.InKeyword" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.FromClauseSyntax.Type" />
    </Type>
    <Type Name="Microsoft.CodeAnalysis.CSharp.Syntax.GenericNameSyntax" Id="T:Microsoft.CodeAnalysis.CSharp.Syntax.GenericNameSyntax">
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.GenericNameSyntax.Accept(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.GenericNameSyntax.Accept``1(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor{``0})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.GenericNameSyntax.AddTypeArgumentListArguments(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax[])" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.GenericNameSyntax.Update(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.TypeArgumentListSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.GenericNameSyntax.WithIdentifier(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.GenericNameSyntax.WithTypeArgumentList(Microsoft.CodeAnalysis.CSharp.Syntax.TypeArgumentListSyntax)" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.GenericNameSyntax.Identifier" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.GenericNameSyntax.IsUnboundGenericName" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.GenericNameSyntax.TypeArgumentList" />
    </Type>
    <Type Name="Microsoft.CodeAnalysis.CSharp.Syntax.GlobalStatementSyntax" Id="T:Microsoft.CodeAnalysis.CSharp.Syntax.GlobalStatementSyntax">
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.GlobalStatementSyntax.Accept(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.GlobalStatementSyntax.Accept``1(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor{``0})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.GlobalStatementSyntax.Update(Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.GlobalStatementSyntax.WithStatement(Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax)" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.GlobalStatementSyntax.Statement" />
    </Type>
    <Type Name="Microsoft.CodeAnalysis.CSharp.Syntax.GotoStatementSyntax" Id="T:Microsoft.CodeAnalysis.CSharp.Syntax.GotoStatementSyntax">
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.GotoStatementSyntax.Accept(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.GotoStatementSyntax.Accept``1(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor{``0})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.GotoStatementSyntax.Update(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.GotoStatementSyntax.WithCaseOrDefaultKeyword(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.GotoStatementSyntax.WithExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.GotoStatementSyntax.WithGotoKeyword(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.GotoStatementSyntax.WithSemicolonToken(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.GotoStatementSyntax.CaseOrDefaultKeyword" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.GotoStatementSyntax.Expression" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.GotoStatementSyntax.GotoKeyword" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.GotoStatementSyntax.SemicolonToken" />
    </Type>
    <Type Name="Microsoft.CodeAnalysis.CSharp.Syntax.GroupClauseSyntax" Id="T:Microsoft.CodeAnalysis.CSharp.Syntax.GroupClauseSyntax">
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.GroupClauseSyntax.Accept(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.GroupClauseSyntax.Accept``1(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor{``0})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.GroupClauseSyntax.Update(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.GroupClauseSyntax.WithByExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.GroupClauseSyntax.WithByKeyword(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.GroupClauseSyntax.WithGroupExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.GroupClauseSyntax.WithGroupKeyword(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.GroupClauseSyntax.ByExpression" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.GroupClauseSyntax.ByKeyword" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.GroupClauseSyntax.GroupExpression" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.GroupClauseSyntax.GroupKeyword" />
    </Type>
    <Type Name="Microsoft.CodeAnalysis.CSharp.Syntax.IdentifierNameSyntax" Id="T:Microsoft.CodeAnalysis.CSharp.Syntax.IdentifierNameSyntax">
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.IdentifierNameSyntax.Accept(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.IdentifierNameSyntax.Accept``1(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor{``0})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.IdentifierNameSyntax.Update(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.IdentifierNameSyntax.WithIdentifier(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.IdentifierNameSyntax.Identifier" />
    </Type>
    <Type Name="Microsoft.CodeAnalysis.CSharp.Syntax.IfDirectiveTriviaSyntax" Id="T:Microsoft.CodeAnalysis.CSharp.Syntax.IfDirectiveTriviaSyntax">
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.IfDirectiveTriviaSyntax.Accept(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.IfDirectiveTriviaSyntax.Accept``1(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor{``0})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.IfDirectiveTriviaSyntax.Update(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken,System.Boolean,System.Boolean,System.Boolean)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.IfDirectiveTriviaSyntax.WithBranchTaken(System.Boolean)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.IfDirectiveTriviaSyntax.WithCondition(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.IfDirectiveTriviaSyntax.WithConditionValue(System.Boolean)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.IfDirectiveTriviaSyntax.WithEndOfDirectiveToken(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.IfDirectiveTriviaSyntax.WithHashToken(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.IfDirectiveTriviaSyntax.WithIfKeyword(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.IfDirectiveTriviaSyntax.WithIsActive(System.Boolean)" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.IfDirectiveTriviaSyntax.BranchTaken" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.IfDirectiveTriviaSyntax.Condition" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.IfDirectiveTriviaSyntax.ConditionValue" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.IfDirectiveTriviaSyntax.EndOfDirectiveToken" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.IfDirectiveTriviaSyntax.HashToken" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.IfDirectiveTriviaSyntax.IfKeyword" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.IfDirectiveTriviaSyntax.IsActive" />
    </Type>
    <Type Name="Microsoft.CodeAnalysis.CSharp.Syntax.IfStatementSyntax" Id="T:Microsoft.CodeAnalysis.CSharp.Syntax.IfStatementSyntax">
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.IfStatementSyntax.Accept(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.IfStatementSyntax.Accept``1(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor{``0})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.IfStatementSyntax.Update(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ElseClauseSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.IfStatementSyntax.WithCloseParenToken(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.IfStatementSyntax.WithCondition(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.IfStatementSyntax.WithElse(Microsoft.CodeAnalysis.CSharp.Syntax.ElseClauseSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.IfStatementSyntax.WithIfKeyword(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.IfStatementSyntax.WithOpenParenToken(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.IfStatementSyntax.WithStatement(Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax)" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.IfStatementSyntax.CloseParenToken" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.IfStatementSyntax.Condition" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.IfStatementSyntax.Else" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.IfStatementSyntax.IfKeyword" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.IfStatementSyntax.OpenParenToken" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.IfStatementSyntax.Statement" />
    </Type>
    <Type Name="Microsoft.CodeAnalysis.CSharp.Syntax.ImplicitArrayCreationExpressionSyntax" Id="T:Microsoft.CodeAnalysis.CSharp.Syntax.ImplicitArrayCreationExpressionSyntax">
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ImplicitArrayCreationExpressionSyntax.Accept(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ImplicitArrayCreationExpressionSyntax.Accept``1(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor{``0})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ImplicitArrayCreationExpressionSyntax.AddCommas(Microsoft.CodeAnalysis.SyntaxToken[])" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ImplicitArrayCreationExpressionSyntax.AddInitializerExpressions(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax[])" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ImplicitArrayCreationExpressionSyntax.Update(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.InitializerExpressionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ImplicitArrayCreationExpressionSyntax.WithCloseBracketToken(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ImplicitArrayCreationExpressionSyntax.WithCommas(Microsoft.CodeAnalysis.SyntaxTokenList)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ImplicitArrayCreationExpressionSyntax.WithInitializer(Microsoft.CodeAnalysis.CSharp.Syntax.InitializerExpressionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ImplicitArrayCreationExpressionSyntax.WithNewKeyword(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ImplicitArrayCreationExpressionSyntax.WithOpenBracketToken(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.ImplicitArrayCreationExpressionSyntax.CloseBracketToken" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.ImplicitArrayCreationExpressionSyntax.Commas" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.ImplicitArrayCreationExpressionSyntax.Initializer" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.ImplicitArrayCreationExpressionSyntax.NewKeyword" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.ImplicitArrayCreationExpressionSyntax.OpenBracketToken" />
    </Type>
    <Type Name="Microsoft.CodeAnalysis.CSharp.Syntax.ImplicitElementAccessSyntax" Id="T:Microsoft.CodeAnalysis.CSharp.Syntax.ImplicitElementAccessSyntax">
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ImplicitElementAccessSyntax.Accept(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ImplicitElementAccessSyntax.Accept``1(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor{``0})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ImplicitElementAccessSyntax.AddArgumentListArguments(Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentSyntax[])" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ImplicitElementAccessSyntax.Update(Microsoft.CodeAnalysis.CSharp.Syntax.BracketedArgumentListSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ImplicitElementAccessSyntax.WithArgumentList(Microsoft.CodeAnalysis.CSharp.Syntax.BracketedArgumentListSyntax)" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.ImplicitElementAccessSyntax.ArgumentList" />
    </Type>
    <Type Name="Microsoft.CodeAnalysis.CSharp.Syntax.IncompleteMemberSyntax" Id="T:Microsoft.CodeAnalysis.CSharp.Syntax.IncompleteMemberSyntax">
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.IncompleteMemberSyntax.Accept(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.IncompleteMemberSyntax.Accept``1(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor{``0})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.IncompleteMemberSyntax.AddAttributeLists(Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax[])" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.IncompleteMemberSyntax.AddModifiers(Microsoft.CodeAnalysis.SyntaxToken[])" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.IncompleteMemberSyntax.Update(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.IncompleteMemberSyntax.WithAttributeLists(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.IncompleteMemberSyntax.WithModifiers(Microsoft.CodeAnalysis.SyntaxTokenList)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.IncompleteMemberSyntax.WithType(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax)" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.IncompleteMemberSyntax.AttributeLists" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.IncompleteMemberSyntax.Modifiers" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.IncompleteMemberSyntax.Type" />
    </Type>
    <Type Name="Microsoft.CodeAnalysis.CSharp.Syntax.IndexerDeclarationSyntax" Id="T:Microsoft.CodeAnalysis.CSharp.Syntax.IndexerDeclarationSyntax">
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.IndexerDeclarationSyntax.Accept(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.IndexerDeclarationSyntax.Accept``1(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor{``0})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.IndexerDeclarationSyntax.AddAccessorListAccessors(Microsoft.CodeAnalysis.CSharp.Syntax.AccessorDeclarationSyntax[])" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.IndexerDeclarationSyntax.AddAttributeLists(Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax[])" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.IndexerDeclarationSyntax.AddModifiers(Microsoft.CodeAnalysis.SyntaxToken[])" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.IndexerDeclarationSyntax.AddParameterListParameters(Microsoft.CodeAnalysis.CSharp.Syntax.ParameterSyntax[])" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.IndexerDeclarationSyntax.Update(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ExplicitInterfaceSpecifierSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.BracketedParameterListSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.AccessorListSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax,Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.IndexerDeclarationSyntax.WithAccessorList(Microsoft.CodeAnalysis.CSharp.Syntax.AccessorListSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.IndexerDeclarationSyntax.WithAttributeLists(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.IndexerDeclarationSyntax.WithExplicitInterfaceSpecifier(Microsoft.CodeAnalysis.CSharp.Syntax.ExplicitInterfaceSpecifierSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.IndexerDeclarationSyntax.WithExpressionBody(Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.IndexerDeclarationSyntax.WithModifiers(Microsoft.CodeAnalysis.SyntaxTokenList)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.IndexerDeclarationSyntax.WithParameterList(Microsoft.CodeAnalysis.CSharp.Syntax.BracketedParameterListSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.IndexerDeclarationSyntax.WithSemicolon(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.IndexerDeclarationSyntax.WithSemicolonToken(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.IndexerDeclarationSyntax.WithThisKeyword(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.IndexerDeclarationSyntax.WithType(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax)" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.IndexerDeclarationSyntax.AccessorList" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.IndexerDeclarationSyntax.AttributeLists" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.IndexerDeclarationSyntax.ExplicitInterfaceSpecifier" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.IndexerDeclarationSyntax.ExpressionBody" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.IndexerDeclarationSyntax.Modifiers" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.IndexerDeclarationSyntax.ParameterList" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.IndexerDeclarationSyntax.Semicolon" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.IndexerDeclarationSyntax.SemicolonToken" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.IndexerDeclarationSyntax.ThisKeyword" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.IndexerDeclarationSyntax.Type" />
    </Type>
    <Type Name="Microsoft.CodeAnalysis.CSharp.Syntax.IndexerMemberCrefSyntax" Id="T:Microsoft.CodeAnalysis.CSharp.Syntax.IndexerMemberCrefSyntax">
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.IndexerMemberCrefSyntax.Accept(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.IndexerMemberCrefSyntax.Accept``1(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor{``0})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.IndexerMemberCrefSyntax.AddParametersParameters(Microsoft.CodeAnalysis.CSharp.Syntax.CrefParameterSyntax[])" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.IndexerMemberCrefSyntax.Update(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.CrefBracketedParameterListSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.IndexerMemberCrefSyntax.WithParameters(Microsoft.CodeAnalysis.CSharp.Syntax.CrefBracketedParameterListSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.IndexerMemberCrefSyntax.WithThisKeyword(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.IndexerMemberCrefSyntax.Parameters" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.IndexerMemberCrefSyntax.ThisKeyword" />
    </Type>
    <Type Name="Microsoft.CodeAnalysis.CSharp.Syntax.InitializerExpressionSyntax" Id="T:Microsoft.CodeAnalysis.CSharp.Syntax.InitializerExpressionSyntax">
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.InitializerExpressionSyntax.Accept(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.InitializerExpressionSyntax.Accept``1(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor{``0})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.InitializerExpressionSyntax.AddExpressions(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax[])" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.InitializerExpressionSyntax.Update(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax},Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.InitializerExpressionSyntax.WithCloseBraceToken(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.InitializerExpressionSyntax.WithExpressions(Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.InitializerExpressionSyntax.WithOpenBraceToken(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.InitializerExpressionSyntax.CloseBraceToken" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.InitializerExpressionSyntax.Expressions" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.InitializerExpressionSyntax.OpenBraceToken" />
    </Type>
    <Type Name="Microsoft.CodeAnalysis.CSharp.Syntax.InstanceExpressionSyntax" Id="T:Microsoft.CodeAnalysis.CSharp.Syntax.InstanceExpressionSyntax" />
    <Type Name="Microsoft.CodeAnalysis.CSharp.Syntax.InterfaceDeclarationSyntax" Id="T:Microsoft.CodeAnalysis.CSharp.Syntax.InterfaceDeclarationSyntax">
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.InterfaceDeclarationSyntax.Accept(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.InterfaceDeclarationSyntax.Accept``1(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor{``0})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.InterfaceDeclarationSyntax.AddAttributeLists(Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax[])" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.InterfaceDeclarationSyntax.AddBaseListTypes(Microsoft.CodeAnalysis.CSharp.Syntax.BaseTypeSyntax[])" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.InterfaceDeclarationSyntax.AddConstraintClauses(Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintClauseSyntax[])" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.InterfaceDeclarationSyntax.AddMembers(Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax[])" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.InterfaceDeclarationSyntax.AddModifiers(Microsoft.CodeAnalysis.SyntaxToken[])" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.InterfaceDeclarationSyntax.AddTypeParameterListParameters(Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterSyntax[])" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.InterfaceDeclarationSyntax.Update(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterListSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.BaseListSyntax,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintClauseSyntax},Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax},Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.InterfaceDeclarationSyntax.WithAttributeLists(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.InterfaceDeclarationSyntax.WithBaseList(Microsoft.CodeAnalysis.CSharp.Syntax.BaseListSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.InterfaceDeclarationSyntax.WithCloseBraceToken(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.InterfaceDeclarationSyntax.WithConstraintClauses(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintClauseSyntax})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.InterfaceDeclarationSyntax.WithIdentifier(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.InterfaceDeclarationSyntax.WithKeyword(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.InterfaceDeclarationSyntax.WithMembers(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.InterfaceDeclarationSyntax.WithModifiers(Microsoft.CodeAnalysis.SyntaxTokenList)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.InterfaceDeclarationSyntax.WithOpenBraceToken(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.InterfaceDeclarationSyntax.WithSemicolonToken(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.InterfaceDeclarationSyntax.WithTypeParameterList(Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterListSyntax)" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.InterfaceDeclarationSyntax.AttributeLists" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.InterfaceDeclarationSyntax.BaseList" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.InterfaceDeclarationSyntax.CloseBraceToken" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.InterfaceDeclarationSyntax.ConstraintClauses" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.InterfaceDeclarationSyntax.Identifier" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.InterfaceDeclarationSyntax.Keyword" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.InterfaceDeclarationSyntax.Members" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.InterfaceDeclarationSyntax.Modifiers" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.InterfaceDeclarationSyntax.OpenBraceToken" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.InterfaceDeclarationSyntax.SemicolonToken" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.InterfaceDeclarationSyntax.TypeParameterList" />
    </Type>
    <Type Name="Microsoft.CodeAnalysis.CSharp.Syntax.InterpolatedStringContentSyntax" Id="T:Microsoft.CodeAnalysis.CSharp.Syntax.InterpolatedStringContentSyntax" />
    <Type Name="Microsoft.CodeAnalysis.CSharp.Syntax.InterpolatedStringExpressionSyntax" Id="T:Microsoft.CodeAnalysis.CSharp.Syntax.InterpolatedStringExpressionSyntax">
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.InterpolatedStringExpressionSyntax.Accept(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.InterpolatedStringExpressionSyntax.Accept``1(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor{``0})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.InterpolatedStringExpressionSyntax.AddContents(Microsoft.CodeAnalysis.CSharp.Syntax.InterpolatedStringContentSyntax[])" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.InterpolatedStringExpressionSyntax.Update(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.InterpolatedStringContentSyntax},Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.InterpolatedStringExpressionSyntax.WithContents(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.InterpolatedStringContentSyntax})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.InterpolatedStringExpressionSyntax.WithStringEndToken(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.InterpolatedStringExpressionSyntax.WithStringStartToken(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.InterpolatedStringExpressionSyntax.Contents" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.InterpolatedStringExpressionSyntax.StringEndToken" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.InterpolatedStringExpressionSyntax.StringStartToken" />
    </Type>
    <Type Name="Microsoft.CodeAnalysis.CSharp.Syntax.InterpolatedStringTextSyntax" Id="T:Microsoft.CodeAnalysis.CSharp.Syntax.InterpolatedStringTextSyntax">
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.InterpolatedStringTextSyntax.Accept(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.InterpolatedStringTextSyntax.Accept``1(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor{``0})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.InterpolatedStringTextSyntax.Update(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.InterpolatedStringTextSyntax.WithTextToken(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.InterpolatedStringTextSyntax.TextToken" />
    </Type>
    <Type Name="Microsoft.CodeAnalysis.CSharp.Syntax.InterpolationAlignmentClauseSyntax" Id="T:Microsoft.CodeAnalysis.CSharp.Syntax.InterpolationAlignmentClauseSyntax">
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.InterpolationAlignmentClauseSyntax.Accept(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.InterpolationAlignmentClauseSyntax.Accept``1(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor{``0})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.InterpolationAlignmentClauseSyntax.Update(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.InterpolationAlignmentClauseSyntax.WithCommaToken(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.InterpolationAlignmentClauseSyntax.WithValue(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.InterpolationAlignmentClauseSyntax.CommaToken" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.InterpolationAlignmentClauseSyntax.Value" />
    </Type>
    <Type Name="Microsoft.CodeAnalysis.CSharp.Syntax.InterpolationFormatClauseSyntax" Id="T:Microsoft.CodeAnalysis.CSharp.Syntax.InterpolationFormatClauseSyntax">
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.InterpolationFormatClauseSyntax.Accept(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.InterpolationFormatClauseSyntax.Accept``1(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor{``0})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.InterpolationFormatClauseSyntax.Update(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.InterpolationFormatClauseSyntax.WithColonToken(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.InterpolationFormatClauseSyntax.WithFormatStringToken(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.InterpolationFormatClauseSyntax.ColonToken" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.InterpolationFormatClauseSyntax.FormatStringToken" />
    </Type>
    <Type Name="Microsoft.CodeAnalysis.CSharp.Syntax.InterpolationSyntax" Id="T:Microsoft.CodeAnalysis.CSharp.Syntax.InterpolationSyntax">
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.InterpolationSyntax.Accept(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.InterpolationSyntax.Accept``1(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor{``0})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.InterpolationSyntax.Update(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.InterpolationAlignmentClauseSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.InterpolationFormatClauseSyntax,Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.InterpolationSyntax.WithAlignmentClause(Microsoft.CodeAnalysis.CSharp.Syntax.InterpolationAlignmentClauseSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.InterpolationSyntax.WithCloseBraceToken(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.InterpolationSyntax.WithExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.InterpolationSyntax.WithFormatClause(Microsoft.CodeAnalysis.CSharp.Syntax.InterpolationFormatClauseSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.InterpolationSyntax.WithOpenBraceToken(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.InterpolationSyntax.AlignmentClause" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.InterpolationSyntax.CloseBraceToken" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.InterpolationSyntax.Expression" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.InterpolationSyntax.FormatClause" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.InterpolationSyntax.OpenBraceToken" />
    </Type>
    <Type Name="Microsoft.CodeAnalysis.CSharp.Syntax.InvocationExpressionSyntax" Id="T:Microsoft.CodeAnalysis.CSharp.Syntax.InvocationExpressionSyntax">
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.InvocationExpressionSyntax.Accept(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.InvocationExpressionSyntax.Accept``1(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor{``0})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.InvocationExpressionSyntax.AddArgumentListArguments(Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentSyntax[])" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.InvocationExpressionSyntax.Update(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentListSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.InvocationExpressionSyntax.WithArgumentList(Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentListSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.InvocationExpressionSyntax.WithExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.InvocationExpressionSyntax.ArgumentList" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.InvocationExpressionSyntax.Expression" />
    </Type>
    <Type Name="Microsoft.CodeAnalysis.CSharp.Syntax.IsPatternExpressionSyntax" Id="T:Microsoft.CodeAnalysis.CSharp.Syntax.IsPatternExpressionSyntax">
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.IsPatternExpressionSyntax.Accept(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.IsPatternExpressionSyntax.Accept``1(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor{``0})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.IsPatternExpressionSyntax.Update(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.PatternSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.IsPatternExpressionSyntax.WithExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.IsPatternExpressionSyntax.WithIsKeyword(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.IsPatternExpressionSyntax.WithPattern(Microsoft.CodeAnalysis.CSharp.Syntax.PatternSyntax)" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.IsPatternExpressionSyntax.Expression" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.IsPatternExpressionSyntax.IsKeyword" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.IsPatternExpressionSyntax.Pattern" />
    </Type>
    <Type Name="Microsoft.CodeAnalysis.CSharp.Syntax.JoinClauseSyntax" Id="T:Microsoft.CodeAnalysis.CSharp.Syntax.JoinClauseSyntax">
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.JoinClauseSyntax.Accept(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.JoinClauseSyntax.Accept``1(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor{``0})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.JoinClauseSyntax.Update(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.JoinIntoClauseSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.JoinClauseSyntax.WithEqualsKeyword(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.JoinClauseSyntax.WithIdentifier(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.JoinClauseSyntax.WithInExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.JoinClauseSyntax.WithInKeyword(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.JoinClauseSyntax.WithInto(Microsoft.CodeAnalysis.CSharp.Syntax.JoinIntoClauseSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.JoinClauseSyntax.WithJoinKeyword(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.JoinClauseSyntax.WithLeftExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.JoinClauseSyntax.WithOnKeyword(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.JoinClauseSyntax.WithRightExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.JoinClauseSyntax.WithType(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax)" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.JoinClauseSyntax.EqualsKeyword" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.JoinClauseSyntax.Identifier" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.JoinClauseSyntax.InExpression" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.JoinClauseSyntax.InKeyword" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.JoinClauseSyntax.Into" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.JoinClauseSyntax.JoinKeyword" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.JoinClauseSyntax.LeftExpression" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.JoinClauseSyntax.OnKeyword" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.JoinClauseSyntax.RightExpression" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.JoinClauseSyntax.Type" />
    </Type>
    <Type Name="Microsoft.CodeAnalysis.CSharp.Syntax.JoinIntoClauseSyntax" Id="T:Microsoft.CodeAnalysis.CSharp.Syntax.JoinIntoClauseSyntax">
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.JoinIntoClauseSyntax.Accept(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.JoinIntoClauseSyntax.Accept``1(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor{``0})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.JoinIntoClauseSyntax.Update(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.JoinIntoClauseSyntax.WithIdentifier(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.JoinIntoClauseSyntax.WithIntoKeyword(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.JoinIntoClauseSyntax.Identifier" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.JoinIntoClauseSyntax.IntoKeyword" />
    </Type>
    <Type Name="Microsoft.CodeAnalysis.CSharp.Syntax.LabeledStatementSyntax" Id="T:Microsoft.CodeAnalysis.CSharp.Syntax.LabeledStatementSyntax">
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.LabeledStatementSyntax.Accept(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.LabeledStatementSyntax.Accept``1(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor{``0})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.LabeledStatementSyntax.Update(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.LabeledStatementSyntax.WithColonToken(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.LabeledStatementSyntax.WithIdentifier(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.LabeledStatementSyntax.WithStatement(Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax)" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.LabeledStatementSyntax.ColonToken" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.LabeledStatementSyntax.Identifier" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.LabeledStatementSyntax.Statement" />
    </Type>
    <Type Name="Microsoft.CodeAnalysis.CSharp.Syntax.LambdaExpressionSyntax" Id="T:Microsoft.CodeAnalysis.CSharp.Syntax.LambdaExpressionSyntax">
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.LambdaExpressionSyntax.ArrowToken" />
    </Type>
    <Type Name="Microsoft.CodeAnalysis.CSharp.Syntax.LetClauseSyntax" Id="T:Microsoft.CodeAnalysis.CSharp.Syntax.LetClauseSyntax">
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.LetClauseSyntax.Accept(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.LetClauseSyntax.Accept``1(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor{``0})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.LetClauseSyntax.Update(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.LetClauseSyntax.WithEqualsToken(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.LetClauseSyntax.WithExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.LetClauseSyntax.WithIdentifier(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.LetClauseSyntax.WithLetKeyword(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.LetClauseSyntax.EqualsToken" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.LetClauseSyntax.Expression" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.LetClauseSyntax.Identifier" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.LetClauseSyntax.LetKeyword" />
    </Type>
    <Type Name="Microsoft.CodeAnalysis.CSharp.Syntax.LineDirectiveTriviaSyntax" Id="T:Microsoft.CodeAnalysis.CSharp.Syntax.LineDirectiveTriviaSyntax">
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.LineDirectiveTriviaSyntax.Accept(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.LineDirectiveTriviaSyntax.Accept``1(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor{``0})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.LineDirectiveTriviaSyntax.Update(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,System.Boolean)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.LineDirectiveTriviaSyntax.WithEndOfDirectiveToken(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.LineDirectiveTriviaSyntax.WithFile(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.LineDirectiveTriviaSyntax.WithHashToken(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.LineDirectiveTriviaSyntax.WithIsActive(System.Boolean)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.LineDirectiveTriviaSyntax.WithLine(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.LineDirectiveTriviaSyntax.WithLineKeyword(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.LineDirectiveTriviaSyntax.EndOfDirectiveToken" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.LineDirectiveTriviaSyntax.File" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.LineDirectiveTriviaSyntax.HashToken" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.LineDirectiveTriviaSyntax.IsActive" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.LineDirectiveTriviaSyntax.Line" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.LineDirectiveTriviaSyntax.LineKeyword" />
    </Type>
    <Type Name="Microsoft.CodeAnalysis.CSharp.Syntax.LiteralExpressionSyntax" Id="T:Microsoft.CodeAnalysis.CSharp.Syntax.LiteralExpressionSyntax">
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.LiteralExpressionSyntax.Accept(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.LiteralExpressionSyntax.Accept``1(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor{``0})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.LiteralExpressionSyntax.Update(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.LiteralExpressionSyntax.WithToken(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.LiteralExpressionSyntax.Token" />
    </Type>
    <Type Name="Microsoft.CodeAnalysis.CSharp.Syntax.LoadDirectiveTriviaSyntax" Id="T:Microsoft.CodeAnalysis.CSharp.Syntax.LoadDirectiveTriviaSyntax">
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.LoadDirectiveTriviaSyntax.Accept(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.LoadDirectiveTriviaSyntax.Accept``1(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor{``0})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.LoadDirectiveTriviaSyntax.Update(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,System.Boolean)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.LoadDirectiveTriviaSyntax.WithEndOfDirectiveToken(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.LoadDirectiveTriviaSyntax.WithFile(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.LoadDirectiveTriviaSyntax.WithHashToken(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.LoadDirectiveTriviaSyntax.WithIsActive(System.Boolean)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.LoadDirectiveTriviaSyntax.WithLoadKeyword(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.LoadDirectiveTriviaSyntax.EndOfDirectiveToken" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.LoadDirectiveTriviaSyntax.File" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.LoadDirectiveTriviaSyntax.HashToken" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.LoadDirectiveTriviaSyntax.IsActive" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.LoadDirectiveTriviaSyntax.LoadKeyword" />
    </Type>
    <Type Name="Microsoft.CodeAnalysis.CSharp.Syntax.LocalDeclarationStatementSyntax" Id="T:Microsoft.CodeAnalysis.CSharp.Syntax.LocalDeclarationStatementSyntax">
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.LocalDeclarationStatementSyntax.Accept(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.LocalDeclarationStatementSyntax.Accept``1(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor{``0})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.LocalDeclarationStatementSyntax.AddDeclarationVariables(Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclaratorSyntax[])" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.LocalDeclarationStatementSyntax.AddModifiers(Microsoft.CodeAnalysis.SyntaxToken[])" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.LocalDeclarationStatementSyntax.Update(Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclarationSyntax,Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.LocalDeclarationStatementSyntax.WithDeclaration(Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclarationSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.LocalDeclarationStatementSyntax.WithModifiers(Microsoft.CodeAnalysis.SyntaxTokenList)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.LocalDeclarationStatementSyntax.WithSemicolonToken(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.LocalDeclarationStatementSyntax.Declaration" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.LocalDeclarationStatementSyntax.IsConst" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.LocalDeclarationStatementSyntax.Modifiers" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.LocalDeclarationStatementSyntax.SemicolonToken" />
    </Type>
    <Type Name="Microsoft.CodeAnalysis.CSharp.Syntax.LocalFunctionStatementSyntax" Id="T:Microsoft.CodeAnalysis.CSharp.Syntax.LocalFunctionStatementSyntax">
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.LocalFunctionStatementSyntax.Accept(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.LocalFunctionStatementSyntax.Accept``1(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor{``0})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.LocalFunctionStatementSyntax.AddBodyStatements(Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax[])" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.LocalFunctionStatementSyntax.AddConstraintClauses(Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintClauseSyntax[])" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.LocalFunctionStatementSyntax.AddModifiers(Microsoft.CodeAnalysis.SyntaxToken[])" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.LocalFunctionStatementSyntax.AddParameterListParameters(Microsoft.CodeAnalysis.CSharp.Syntax.ParameterSyntax[])" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.LocalFunctionStatementSyntax.AddTypeParameterListParameters(Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterSyntax[])" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.LocalFunctionStatementSyntax.Update(Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterListSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintClauseSyntax},Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax,Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.LocalFunctionStatementSyntax.WithBody(Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.LocalFunctionStatementSyntax.WithConstraintClauses(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintClauseSyntax})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.LocalFunctionStatementSyntax.WithExpressionBody(Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.LocalFunctionStatementSyntax.WithIdentifier(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.LocalFunctionStatementSyntax.WithModifiers(Microsoft.CodeAnalysis.SyntaxTokenList)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.LocalFunctionStatementSyntax.WithParameterList(Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.LocalFunctionStatementSyntax.WithReturnType(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.LocalFunctionStatementSyntax.WithSemicolonToken(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.LocalFunctionStatementSyntax.WithTypeParameterList(Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterListSyntax)" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.LocalFunctionStatementSyntax.Body" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.LocalFunctionStatementSyntax.ConstraintClauses" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.LocalFunctionStatementSyntax.ExpressionBody" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.LocalFunctionStatementSyntax.Identifier" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.LocalFunctionStatementSyntax.Modifiers" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.LocalFunctionStatementSyntax.ParameterList" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.LocalFunctionStatementSyntax.ReturnType" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.LocalFunctionStatementSyntax.SemicolonToken" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.LocalFunctionStatementSyntax.TypeParameterList" />
    </Type>
    <Type Name="Microsoft.CodeAnalysis.CSharp.Syntax.LockStatementSyntax" Id="T:Microsoft.CodeAnalysis.CSharp.Syntax.LockStatementSyntax">
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.LockStatementSyntax.Accept(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.LockStatementSyntax.Accept``1(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor{``0})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.LockStatementSyntax.Update(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.LockStatementSyntax.WithCloseParenToken(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.LockStatementSyntax.WithExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.LockStatementSyntax.WithLockKeyword(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.LockStatementSyntax.WithOpenParenToken(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.LockStatementSyntax.WithStatement(Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax)" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.LockStatementSyntax.CloseParenToken" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.LockStatementSyntax.Expression" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.LockStatementSyntax.LockKeyword" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.LockStatementSyntax.OpenParenToken" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.LockStatementSyntax.Statement" />
    </Type>
    <Type Name="Microsoft.CodeAnalysis.CSharp.Syntax.MakeRefExpressionSyntax" Id="T:Microsoft.CodeAnalysis.CSharp.Syntax.MakeRefExpressionSyntax">
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.MakeRefExpressionSyntax.Accept(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.MakeRefExpressionSyntax.Accept``1(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor{``0})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.MakeRefExpressionSyntax.Update(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.MakeRefExpressionSyntax.WithCloseParenToken(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.MakeRefExpressionSyntax.WithExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.MakeRefExpressionSyntax.WithKeyword(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.MakeRefExpressionSyntax.WithOpenParenToken(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.MakeRefExpressionSyntax.CloseParenToken" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.MakeRefExpressionSyntax.Expression" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.MakeRefExpressionSyntax.Keyword" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.MakeRefExpressionSyntax.OpenParenToken" />
    </Type>
    <Type Name="Microsoft.CodeAnalysis.CSharp.Syntax.MemberAccessExpressionSyntax" Id="T:Microsoft.CodeAnalysis.CSharp.Syntax.MemberAccessExpressionSyntax">
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.MemberAccessExpressionSyntax.Accept(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.MemberAccessExpressionSyntax.Accept``1(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor{``0})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.MemberAccessExpressionSyntax.Update(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.SimpleNameSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.MemberAccessExpressionSyntax.WithExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.MemberAccessExpressionSyntax.WithName(Microsoft.CodeAnalysis.CSharp.Syntax.SimpleNameSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.MemberAccessExpressionSyntax.WithOperatorToken(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.MemberAccessExpressionSyntax.Expression" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.MemberAccessExpressionSyntax.Name" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.MemberAccessExpressionSyntax.OperatorToken" />
    </Type>
    <Type Name="Microsoft.CodeAnalysis.CSharp.Syntax.MemberBindingExpressionSyntax" Id="T:Microsoft.CodeAnalysis.CSharp.Syntax.MemberBindingExpressionSyntax">
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.MemberBindingExpressionSyntax.Accept(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.MemberBindingExpressionSyntax.Accept``1(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor{``0})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.MemberBindingExpressionSyntax.Update(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.SimpleNameSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.MemberBindingExpressionSyntax.WithName(Microsoft.CodeAnalysis.CSharp.Syntax.SimpleNameSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.MemberBindingExpressionSyntax.WithOperatorToken(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.MemberBindingExpressionSyntax.Name" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.MemberBindingExpressionSyntax.OperatorToken" />
    </Type>
    <Type Name="Microsoft.CodeAnalysis.CSharp.Syntax.MemberCrefSyntax" Id="T:Microsoft.CodeAnalysis.CSharp.Syntax.MemberCrefSyntax" />
    <Type Name="Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax" Id="T:Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax" />
    <Type Name="Microsoft.CodeAnalysis.CSharp.Syntax.MethodDeclarationSyntax" Id="T:Microsoft.CodeAnalysis.CSharp.Syntax.MethodDeclarationSyntax">
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.MethodDeclarationSyntax.Accept(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.MethodDeclarationSyntax.Accept``1(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor{``0})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.MethodDeclarationSyntax.AddAttributeLists(Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax[])" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.MethodDeclarationSyntax.AddBodyStatements(Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax[])" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.MethodDeclarationSyntax.AddConstraintClauses(Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintClauseSyntax[])" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.MethodDeclarationSyntax.AddModifiers(Microsoft.CodeAnalysis.SyntaxToken[])" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.MethodDeclarationSyntax.AddParameterListParameters(Microsoft.CodeAnalysis.CSharp.Syntax.ParameterSyntax[])" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.MethodDeclarationSyntax.AddTypeParameterListParameters(Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterSyntax[])" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.MethodDeclarationSyntax.Update(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ExplicitInterfaceSpecifierSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterListSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintClauseSyntax},Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax,Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.MethodDeclarationSyntax.WithAttributeLists(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.MethodDeclarationSyntax.WithBody(Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.MethodDeclarationSyntax.WithConstraintClauses(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintClauseSyntax})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.MethodDeclarationSyntax.WithExplicitInterfaceSpecifier(Microsoft.CodeAnalysis.CSharp.Syntax.ExplicitInterfaceSpecifierSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.MethodDeclarationSyntax.WithExpressionBody(Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.MethodDeclarationSyntax.WithIdentifier(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.MethodDeclarationSyntax.WithModifiers(Microsoft.CodeAnalysis.SyntaxTokenList)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.MethodDeclarationSyntax.WithParameterList(Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.MethodDeclarationSyntax.WithReturnType(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.MethodDeclarationSyntax.WithSemicolonToken(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.MethodDeclarationSyntax.WithTypeParameterList(Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterListSyntax)" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.MethodDeclarationSyntax.Arity" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.MethodDeclarationSyntax.AttributeLists" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.MethodDeclarationSyntax.Body" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.MethodDeclarationSyntax.ConstraintClauses" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.MethodDeclarationSyntax.ExplicitInterfaceSpecifier" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.MethodDeclarationSyntax.ExpressionBody" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.MethodDeclarationSyntax.Identifier" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.MethodDeclarationSyntax.Modifiers" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.MethodDeclarationSyntax.ParameterList" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.MethodDeclarationSyntax.ReturnType" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.MethodDeclarationSyntax.SemicolonToken" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.MethodDeclarationSyntax.TypeParameterList" />
    </Type>
    <Type Name="Microsoft.CodeAnalysis.CSharp.Syntax.NameColonSyntax" Id="T:Microsoft.CodeAnalysis.CSharp.Syntax.NameColonSyntax">
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.NameColonSyntax.Accept(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.NameColonSyntax.Accept``1(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor{``0})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.NameColonSyntax.Update(Microsoft.CodeAnalysis.CSharp.Syntax.IdentifierNameSyntax,Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.NameColonSyntax.WithColonToken(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.NameColonSyntax.WithName(Microsoft.CodeAnalysis.CSharp.Syntax.IdentifierNameSyntax)" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.NameColonSyntax.ColonToken" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.NameColonSyntax.Name" />
    </Type>
    <Type Name="Microsoft.CodeAnalysis.CSharp.Syntax.NameEqualsSyntax" Id="T:Microsoft.CodeAnalysis.CSharp.Syntax.NameEqualsSyntax">
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.NameEqualsSyntax.Accept(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.NameEqualsSyntax.Accept``1(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor{``0})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.NameEqualsSyntax.Update(Microsoft.CodeAnalysis.CSharp.Syntax.IdentifierNameSyntax,Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.NameEqualsSyntax.WithEqualsToken(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.NameEqualsSyntax.WithName(Microsoft.CodeAnalysis.CSharp.Syntax.IdentifierNameSyntax)" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.NameEqualsSyntax.EqualsToken" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.NameEqualsSyntax.Name" />
    </Type>
    <Type Name="Microsoft.CodeAnalysis.CSharp.Syntax.NameMemberCrefSyntax" Id="T:Microsoft.CodeAnalysis.CSharp.Syntax.NameMemberCrefSyntax">
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.NameMemberCrefSyntax.Accept(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.NameMemberCrefSyntax.Accept``1(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor{``0})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.NameMemberCrefSyntax.AddParametersParameters(Microsoft.CodeAnalysis.CSharp.Syntax.CrefParameterSyntax[])" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.NameMemberCrefSyntax.Update(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.CrefParameterListSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.NameMemberCrefSyntax.WithName(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.NameMemberCrefSyntax.WithParameters(Microsoft.CodeAnalysis.CSharp.Syntax.CrefParameterListSyntax)" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.NameMemberCrefSyntax.Name" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.NameMemberCrefSyntax.Parameters" />
    </Type>
    <Type Name="Microsoft.CodeAnalysis.CSharp.Syntax.NamespaceDeclarationSyntax" Id="T:Microsoft.CodeAnalysis.CSharp.Syntax.NamespaceDeclarationSyntax">
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.NamespaceDeclarationSyntax.Accept(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.NamespaceDeclarationSyntax.Accept``1(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor{``0})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.NamespaceDeclarationSyntax.AddExterns(Microsoft.CodeAnalysis.CSharp.Syntax.ExternAliasDirectiveSyntax[])" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.NamespaceDeclarationSyntax.AddMembers(Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax[])" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.NamespaceDeclarationSyntax.AddUsings(Microsoft.CodeAnalysis.CSharp.Syntax.UsingDirectiveSyntax[])" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.NamespaceDeclarationSyntax.Update(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.NameSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.ExternAliasDirectiveSyntax},Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.UsingDirectiveSyntax},Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax},Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.NamespaceDeclarationSyntax.WithCloseBraceToken(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.NamespaceDeclarationSyntax.WithExterns(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.ExternAliasDirectiveSyntax})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.NamespaceDeclarationSyntax.WithMembers(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.NamespaceDeclarationSyntax.WithName(Microsoft.CodeAnalysis.CSharp.Syntax.NameSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.NamespaceDeclarationSyntax.WithNamespaceKeyword(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.NamespaceDeclarationSyntax.WithOpenBraceToken(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.NamespaceDeclarationSyntax.WithSemicolonToken(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.NamespaceDeclarationSyntax.WithUsings(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.UsingDirectiveSyntax})" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.NamespaceDeclarationSyntax.CloseBraceToken" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.NamespaceDeclarationSyntax.Externs" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.NamespaceDeclarationSyntax.Members" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.NamespaceDeclarationSyntax.Name" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.NamespaceDeclarationSyntax.NamespaceKeyword" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.NamespaceDeclarationSyntax.OpenBraceToken" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.NamespaceDeclarationSyntax.SemicolonToken" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.NamespaceDeclarationSyntax.Usings" />
    </Type>
    <Type Name="Microsoft.CodeAnalysis.CSharp.Syntax.NameSyntax" Id="T:Microsoft.CodeAnalysis.CSharp.Syntax.NameSyntax">
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.NameSyntax.Arity" />
    </Type>
    <Type Name="Microsoft.CodeAnalysis.CSharp.Syntax.NullableTypeSyntax" Id="T:Microsoft.CodeAnalysis.CSharp.Syntax.NullableTypeSyntax">
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.NullableTypeSyntax.Accept(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.NullableTypeSyntax.Accept``1(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor{``0})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.NullableTypeSyntax.Update(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.NullableTypeSyntax.WithElementType(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.NullableTypeSyntax.WithQuestionToken(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.NullableTypeSyntax.ElementType" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.NullableTypeSyntax.QuestionToken" />
    </Type>
    <Type Name="Microsoft.CodeAnalysis.CSharp.Syntax.ObjectCreationExpressionSyntax" Id="T:Microsoft.CodeAnalysis.CSharp.Syntax.ObjectCreationExpressionSyntax">
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ObjectCreationExpressionSyntax.Accept(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ObjectCreationExpressionSyntax.Accept``1(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor{``0})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ObjectCreationExpressionSyntax.AddArgumentListArguments(Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentSyntax[])" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ObjectCreationExpressionSyntax.Update(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentListSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.InitializerExpressionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ObjectCreationExpressionSyntax.WithArgumentList(Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentListSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ObjectCreationExpressionSyntax.WithInitializer(Microsoft.CodeAnalysis.CSharp.Syntax.InitializerExpressionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ObjectCreationExpressionSyntax.WithNewKeyword(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ObjectCreationExpressionSyntax.WithType(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax)" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.ObjectCreationExpressionSyntax.ArgumentList" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.ObjectCreationExpressionSyntax.Initializer" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.ObjectCreationExpressionSyntax.NewKeyword" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.ObjectCreationExpressionSyntax.Type" />
    </Type>
    <Type Name="Microsoft.CodeAnalysis.CSharp.Syntax.OmittedArraySizeExpressionSyntax" Id="T:Microsoft.CodeAnalysis.CSharp.Syntax.OmittedArraySizeExpressionSyntax">
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.OmittedArraySizeExpressionSyntax.Accept(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.OmittedArraySizeExpressionSyntax.Accept``1(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor{``0})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.OmittedArraySizeExpressionSyntax.Update(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.OmittedArraySizeExpressionSyntax.WithOmittedArraySizeExpressionToken(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.OmittedArraySizeExpressionSyntax.OmittedArraySizeExpressionToken" />
    </Type>
    <Type Name="Microsoft.CodeAnalysis.CSharp.Syntax.OmittedTypeArgumentSyntax" Id="T:Microsoft.CodeAnalysis.CSharp.Syntax.OmittedTypeArgumentSyntax">
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.OmittedTypeArgumentSyntax.Accept(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.OmittedTypeArgumentSyntax.Accept``1(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor{``0})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.OmittedTypeArgumentSyntax.Update(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.OmittedTypeArgumentSyntax.WithOmittedTypeArgumentToken(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.OmittedTypeArgumentSyntax.OmittedTypeArgumentToken" />
    </Type>
    <Type Name="Microsoft.CodeAnalysis.CSharp.Syntax.OperatorDeclarationSyntax" Id="T:Microsoft.CodeAnalysis.CSharp.Syntax.OperatorDeclarationSyntax">
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.OperatorDeclarationSyntax.Accept(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.OperatorDeclarationSyntax.Accept``1(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor{``0})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.OperatorDeclarationSyntax.AddAttributeLists(Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax[])" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.OperatorDeclarationSyntax.AddBodyStatements(Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax[])" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.OperatorDeclarationSyntax.AddModifiers(Microsoft.CodeAnalysis.SyntaxToken[])" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.OperatorDeclarationSyntax.AddParameterListParameters(Microsoft.CodeAnalysis.CSharp.Syntax.ParameterSyntax[])" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.OperatorDeclarationSyntax.Update(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax,Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.OperatorDeclarationSyntax.WithAttributeLists(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.OperatorDeclarationSyntax.WithBody(Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.OperatorDeclarationSyntax.WithExpressionBody(Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.OperatorDeclarationSyntax.WithModifiers(Microsoft.CodeAnalysis.SyntaxTokenList)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.OperatorDeclarationSyntax.WithOperatorKeyword(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.OperatorDeclarationSyntax.WithOperatorToken(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.OperatorDeclarationSyntax.WithParameterList(Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.OperatorDeclarationSyntax.WithReturnType(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.OperatorDeclarationSyntax.WithSemicolonToken(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.OperatorDeclarationSyntax.AttributeLists" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.OperatorDeclarationSyntax.Body" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.OperatorDeclarationSyntax.ExpressionBody" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.OperatorDeclarationSyntax.Modifiers" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.OperatorDeclarationSyntax.OperatorKeyword" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.OperatorDeclarationSyntax.OperatorToken" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.OperatorDeclarationSyntax.ParameterList" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.OperatorDeclarationSyntax.ReturnType" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.OperatorDeclarationSyntax.SemicolonToken" />
    </Type>
    <Type Name="Microsoft.CodeAnalysis.CSharp.Syntax.OperatorMemberCrefSyntax" Id="T:Microsoft.CodeAnalysis.CSharp.Syntax.OperatorMemberCrefSyntax">
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.OperatorMemberCrefSyntax.Accept(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.OperatorMemberCrefSyntax.Accept``1(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor{``0})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.OperatorMemberCrefSyntax.AddParametersParameters(Microsoft.CodeAnalysis.CSharp.Syntax.CrefParameterSyntax[])" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.OperatorMemberCrefSyntax.Update(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.CrefParameterListSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.OperatorMemberCrefSyntax.WithOperatorKeyword(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.OperatorMemberCrefSyntax.WithOperatorToken(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.OperatorMemberCrefSyntax.WithParameters(Microsoft.CodeAnalysis.CSharp.Syntax.CrefParameterListSyntax)" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.OperatorMemberCrefSyntax.OperatorKeyword" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.OperatorMemberCrefSyntax.OperatorToken" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.OperatorMemberCrefSyntax.Parameters" />
    </Type>
    <Type Name="Microsoft.CodeAnalysis.CSharp.Syntax.OrderByClauseSyntax" Id="T:Microsoft.CodeAnalysis.CSharp.Syntax.OrderByClauseSyntax">
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.OrderByClauseSyntax.Accept(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.OrderByClauseSyntax.Accept``1(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor{``0})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.OrderByClauseSyntax.AddOrderings(Microsoft.CodeAnalysis.CSharp.Syntax.OrderingSyntax[])" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.OrderByClauseSyntax.Update(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.OrderingSyntax})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.OrderByClauseSyntax.WithOrderByKeyword(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.OrderByClauseSyntax.WithOrderings(Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.OrderingSyntax})" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.OrderByClauseSyntax.OrderByKeyword" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.OrderByClauseSyntax.Orderings" />
    </Type>
    <Type Name="Microsoft.CodeAnalysis.CSharp.Syntax.OrderingSyntax" Id="T:Microsoft.CodeAnalysis.CSharp.Syntax.OrderingSyntax">
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.OrderingSyntax.Accept(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.OrderingSyntax.Accept``1(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor{``0})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.OrderingSyntax.Update(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.OrderingSyntax.WithAscendingOrDescendingKeyword(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.OrderingSyntax.WithExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.OrderingSyntax.AscendingOrDescendingKeyword" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.OrderingSyntax.Expression" />
    </Type>
    <Type Name="Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax" Id="T:Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax">
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax.Accept(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax.Accept``1(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor{``0})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax.AddParameters(Microsoft.CodeAnalysis.CSharp.Syntax.ParameterSyntax[])" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax.Update(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.ParameterSyntax},Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax.WithCloseParenToken(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax.WithOpenParenToken(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax.WithParameters(Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.ParameterSyntax})" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax.CloseParenToken" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax.OpenParenToken" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax.Parameters" />
    </Type>
    <Type Name="Microsoft.CodeAnalysis.CSharp.Syntax.ParameterSyntax" Id="T:Microsoft.CodeAnalysis.CSharp.Syntax.ParameterSyntax">
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ParameterSyntax.Accept(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ParameterSyntax.Accept``1(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor{``0})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ParameterSyntax.AddAttributeLists(Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax[])" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ParameterSyntax.AddModifiers(Microsoft.CodeAnalysis.SyntaxToken[])" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ParameterSyntax.Update(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.EqualsValueClauseSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ParameterSyntax.WithAttributeLists(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ParameterSyntax.WithDefault(Microsoft.CodeAnalysis.CSharp.Syntax.EqualsValueClauseSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ParameterSyntax.WithIdentifier(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ParameterSyntax.WithModifiers(Microsoft.CodeAnalysis.SyntaxTokenList)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ParameterSyntax.WithType(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax)" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.ParameterSyntax.AttributeLists" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.ParameterSyntax.Default" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.ParameterSyntax.Identifier" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.ParameterSyntax.Modifiers" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.ParameterSyntax.Type" />
    </Type>
    <Type Name="Microsoft.CodeAnalysis.CSharp.Syntax.ParenthesizedExpressionSyntax" Id="T:Microsoft.CodeAnalysis.CSharp.Syntax.ParenthesizedExpressionSyntax">
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ParenthesizedExpressionSyntax.Accept(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ParenthesizedExpressionSyntax.Accept``1(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor{``0})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ParenthesizedExpressionSyntax.Update(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ParenthesizedExpressionSyntax.WithCloseParenToken(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ParenthesizedExpressionSyntax.WithExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ParenthesizedExpressionSyntax.WithOpenParenToken(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.ParenthesizedExpressionSyntax.CloseParenToken" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.ParenthesizedExpressionSyntax.Expression" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.ParenthesizedExpressionSyntax.OpenParenToken" />
    </Type>
    <Type Name="Microsoft.CodeAnalysis.CSharp.Syntax.ParenthesizedLambdaExpressionSyntax" Id="T:Microsoft.CodeAnalysis.CSharp.Syntax.ParenthesizedLambdaExpressionSyntax">
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ParenthesizedLambdaExpressionSyntax.Accept(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ParenthesizedLambdaExpressionSyntax.Accept``1(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor{``0})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ParenthesizedLambdaExpressionSyntax.AddParameterListParameters(Microsoft.CodeAnalysis.CSharp.Syntax.ParameterSyntax[])" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ParenthesizedLambdaExpressionSyntax.Update(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ParenthesizedLambdaExpressionSyntax.WithArrowToken(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ParenthesizedLambdaExpressionSyntax.WithAsyncKeyword(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ParenthesizedLambdaExpressionSyntax.WithBody(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ParenthesizedLambdaExpressionSyntax.WithParameterList(Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax)" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.ParenthesizedLambdaExpressionSyntax.ArrowToken" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.ParenthesizedLambdaExpressionSyntax.AsyncKeyword" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.ParenthesizedLambdaExpressionSyntax.Body" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.ParenthesizedLambdaExpressionSyntax.ParameterList" />
    </Type>
    <Type Name="Microsoft.CodeAnalysis.CSharp.Syntax.ParenthesizedVariableDesignationSyntax" Id="T:Microsoft.CodeAnalysis.CSharp.Syntax.ParenthesizedVariableDesignationSyntax">
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ParenthesizedVariableDesignationSyntax.Accept(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ParenthesizedVariableDesignationSyntax.Accept``1(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor{``0})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ParenthesizedVariableDesignationSyntax.AddVariables(Microsoft.CodeAnalysis.CSharp.Syntax.VariableDesignationSyntax[])" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ParenthesizedVariableDesignationSyntax.Update(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.VariableDesignationSyntax},Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ParenthesizedVariableDesignationSyntax.WithCloseParenToken(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ParenthesizedVariableDesignationSyntax.WithOpenParenToken(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ParenthesizedVariableDesignationSyntax.WithVariables(Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.VariableDesignationSyntax})" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.ParenthesizedVariableDesignationSyntax.CloseParenToken" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.ParenthesizedVariableDesignationSyntax.OpenParenToken" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.ParenthesizedVariableDesignationSyntax.Variables" />
    </Type>
    <Type Name="Microsoft.CodeAnalysis.CSharp.Syntax.PatternSyntax" Id="T:Microsoft.CodeAnalysis.CSharp.Syntax.PatternSyntax" />
    <Type Name="Microsoft.CodeAnalysis.CSharp.Syntax.PointerTypeSyntax" Id="T:Microsoft.CodeAnalysis.CSharp.Syntax.PointerTypeSyntax">
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.PointerTypeSyntax.Accept(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.PointerTypeSyntax.Accept``1(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor{``0})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.PointerTypeSyntax.Update(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.PointerTypeSyntax.WithAsteriskToken(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.PointerTypeSyntax.WithElementType(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax)" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.PointerTypeSyntax.AsteriskToken" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.PointerTypeSyntax.ElementType" />
    </Type>
    <Type Name="Microsoft.CodeAnalysis.CSharp.Syntax.PostfixUnaryExpressionSyntax" Id="T:Microsoft.CodeAnalysis.CSharp.Syntax.PostfixUnaryExpressionSyntax">
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.PostfixUnaryExpressionSyntax.Accept(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.PostfixUnaryExpressionSyntax.Accept``1(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor{``0})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.PostfixUnaryExpressionSyntax.Update(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.PostfixUnaryExpressionSyntax.WithOperand(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.PostfixUnaryExpressionSyntax.WithOperatorToken(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.PostfixUnaryExpressionSyntax.Operand" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.PostfixUnaryExpressionSyntax.OperatorToken" />
    </Type>
    <Type Name="Microsoft.CodeAnalysis.CSharp.Syntax.PragmaChecksumDirectiveTriviaSyntax" Id="T:Microsoft.CodeAnalysis.CSharp.Syntax.PragmaChecksumDirectiveTriviaSyntax">
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.PragmaChecksumDirectiveTriviaSyntax.Accept(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.PragmaChecksumDirectiveTriviaSyntax.Accept``1(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor{``0})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.PragmaChecksumDirectiveTriviaSyntax.Update(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,System.Boolean)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.PragmaChecksumDirectiveTriviaSyntax.WithBytes(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.PragmaChecksumDirectiveTriviaSyntax.WithChecksumKeyword(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.PragmaChecksumDirectiveTriviaSyntax.WithEndOfDirectiveToken(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.PragmaChecksumDirectiveTriviaSyntax.WithFile(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.PragmaChecksumDirectiveTriviaSyntax.WithGuid(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.PragmaChecksumDirectiveTriviaSyntax.WithHashToken(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.PragmaChecksumDirectiveTriviaSyntax.WithIsActive(System.Boolean)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.PragmaChecksumDirectiveTriviaSyntax.WithPragmaKeyword(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.PragmaChecksumDirectiveTriviaSyntax.Bytes" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.PragmaChecksumDirectiveTriviaSyntax.ChecksumKeyword" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.PragmaChecksumDirectiveTriviaSyntax.EndOfDirectiveToken" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.PragmaChecksumDirectiveTriviaSyntax.File" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.PragmaChecksumDirectiveTriviaSyntax.Guid" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.PragmaChecksumDirectiveTriviaSyntax.HashToken" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.PragmaChecksumDirectiveTriviaSyntax.IsActive" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.PragmaChecksumDirectiveTriviaSyntax.PragmaKeyword" />
    </Type>
    <Type Name="Microsoft.CodeAnalysis.CSharp.Syntax.PragmaWarningDirectiveTriviaSyntax" Id="T:Microsoft.CodeAnalysis.CSharp.Syntax.PragmaWarningDirectiveTriviaSyntax">
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.PragmaWarningDirectiveTriviaSyntax.Accept(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.PragmaWarningDirectiveTriviaSyntax.Accept``1(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor{``0})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.PragmaWarningDirectiveTriviaSyntax.AddErrorCodes(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax[])" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.PragmaWarningDirectiveTriviaSyntax.Update(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax},Microsoft.CodeAnalysis.SyntaxToken,System.Boolean)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.PragmaWarningDirectiveTriviaSyntax.WithDisableOrRestoreKeyword(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.PragmaWarningDirectiveTriviaSyntax.WithEndOfDirectiveToken(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.PragmaWarningDirectiveTriviaSyntax.WithErrorCodes(Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.PragmaWarningDirectiveTriviaSyntax.WithHashToken(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.PragmaWarningDirectiveTriviaSyntax.WithIsActive(System.Boolean)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.PragmaWarningDirectiveTriviaSyntax.WithPragmaKeyword(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.PragmaWarningDirectiveTriviaSyntax.WithWarningKeyword(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.PragmaWarningDirectiveTriviaSyntax.DisableOrRestoreKeyword" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.PragmaWarningDirectiveTriviaSyntax.EndOfDirectiveToken" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.PragmaWarningDirectiveTriviaSyntax.ErrorCodes" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.PragmaWarningDirectiveTriviaSyntax.HashToken" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.PragmaWarningDirectiveTriviaSyntax.IsActive" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.PragmaWarningDirectiveTriviaSyntax.PragmaKeyword" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.PragmaWarningDirectiveTriviaSyntax.WarningKeyword" />
    </Type>
    <Type Name="Microsoft.CodeAnalysis.CSharp.Syntax.PredefinedTypeSyntax" Id="T:Microsoft.CodeAnalysis.CSharp.Syntax.PredefinedTypeSyntax">
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.PredefinedTypeSyntax.Accept(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.PredefinedTypeSyntax.Accept``1(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor{``0})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.PredefinedTypeSyntax.Update(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.PredefinedTypeSyntax.WithKeyword(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.PredefinedTypeSyntax.Keyword" />
    </Type>
    <Type Name="Microsoft.CodeAnalysis.CSharp.Syntax.PrefixUnaryExpressionSyntax" Id="T:Microsoft.CodeAnalysis.CSharp.Syntax.PrefixUnaryExpressionSyntax">
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.PrefixUnaryExpressionSyntax.Accept(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.PrefixUnaryExpressionSyntax.Accept``1(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor{``0})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.PrefixUnaryExpressionSyntax.Update(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.PrefixUnaryExpressionSyntax.WithOperand(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.PrefixUnaryExpressionSyntax.WithOperatorToken(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.PrefixUnaryExpressionSyntax.Operand" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.PrefixUnaryExpressionSyntax.OperatorToken" />
    </Type>
    <Type Name="Microsoft.CodeAnalysis.CSharp.Syntax.PropertyDeclarationSyntax" Id="T:Microsoft.CodeAnalysis.CSharp.Syntax.PropertyDeclarationSyntax">
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.PropertyDeclarationSyntax.Accept(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.PropertyDeclarationSyntax.Accept``1(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor{``0})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.PropertyDeclarationSyntax.AddAccessorListAccessors(Microsoft.CodeAnalysis.CSharp.Syntax.AccessorDeclarationSyntax[])" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.PropertyDeclarationSyntax.AddAttributeLists(Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax[])" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.PropertyDeclarationSyntax.AddModifiers(Microsoft.CodeAnalysis.SyntaxToken[])" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.PropertyDeclarationSyntax.Update(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ExplicitInterfaceSpecifierSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.AccessorListSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.EqualsValueClauseSyntax,Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.PropertyDeclarationSyntax.WithAccessorList(Microsoft.CodeAnalysis.CSharp.Syntax.AccessorListSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.PropertyDeclarationSyntax.WithAttributeLists(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.PropertyDeclarationSyntax.WithExplicitInterfaceSpecifier(Microsoft.CodeAnalysis.CSharp.Syntax.ExplicitInterfaceSpecifierSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.PropertyDeclarationSyntax.WithExpressionBody(Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.PropertyDeclarationSyntax.WithIdentifier(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.PropertyDeclarationSyntax.WithInitializer(Microsoft.CodeAnalysis.CSharp.Syntax.EqualsValueClauseSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.PropertyDeclarationSyntax.WithModifiers(Microsoft.CodeAnalysis.SyntaxTokenList)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.PropertyDeclarationSyntax.WithSemicolon(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.PropertyDeclarationSyntax.WithSemicolonToken(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.PropertyDeclarationSyntax.WithType(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax)" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.PropertyDeclarationSyntax.AccessorList" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.PropertyDeclarationSyntax.AttributeLists" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.PropertyDeclarationSyntax.ExplicitInterfaceSpecifier" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.PropertyDeclarationSyntax.ExpressionBody" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.PropertyDeclarationSyntax.Identifier" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.PropertyDeclarationSyntax.Initializer" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.PropertyDeclarationSyntax.Modifiers" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.PropertyDeclarationSyntax.Semicolon" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.PropertyDeclarationSyntax.SemicolonToken" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.PropertyDeclarationSyntax.Type" />
    </Type>
    <Type Name="Microsoft.CodeAnalysis.CSharp.Syntax.QualifiedCrefSyntax" Id="T:Microsoft.CodeAnalysis.CSharp.Syntax.QualifiedCrefSyntax">
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.QualifiedCrefSyntax.Accept(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.QualifiedCrefSyntax.Accept``1(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor{``0})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.QualifiedCrefSyntax.Update(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.MemberCrefSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.QualifiedCrefSyntax.WithContainer(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.QualifiedCrefSyntax.WithDotToken(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.QualifiedCrefSyntax.WithMember(Microsoft.CodeAnalysis.CSharp.Syntax.MemberCrefSyntax)" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.QualifiedCrefSyntax.Container" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.QualifiedCrefSyntax.DotToken" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.QualifiedCrefSyntax.Member" />
    </Type>
    <Type Name="Microsoft.CodeAnalysis.CSharp.Syntax.QualifiedNameSyntax" Id="T:Microsoft.CodeAnalysis.CSharp.Syntax.QualifiedNameSyntax">
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.QualifiedNameSyntax.Accept(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.QualifiedNameSyntax.Accept``1(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor{``0})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.QualifiedNameSyntax.Update(Microsoft.CodeAnalysis.CSharp.Syntax.NameSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.SimpleNameSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.QualifiedNameSyntax.WithDotToken(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.QualifiedNameSyntax.WithLeft(Microsoft.CodeAnalysis.CSharp.Syntax.NameSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.QualifiedNameSyntax.WithRight(Microsoft.CodeAnalysis.CSharp.Syntax.SimpleNameSyntax)" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.QualifiedNameSyntax.DotToken" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.QualifiedNameSyntax.Left" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.QualifiedNameSyntax.Right" />
    </Type>
    <Type Name="Microsoft.CodeAnalysis.CSharp.Syntax.QueryBodySyntax" Id="T:Microsoft.CodeAnalysis.CSharp.Syntax.QueryBodySyntax">
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.QueryBodySyntax.Accept(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.QueryBodySyntax.Accept``1(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor{``0})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.QueryBodySyntax.AddClauses(Microsoft.CodeAnalysis.CSharp.Syntax.QueryClauseSyntax[])" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.QueryBodySyntax.Update(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.QueryClauseSyntax},Microsoft.CodeAnalysis.CSharp.Syntax.SelectOrGroupClauseSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.QueryContinuationSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.QueryBodySyntax.WithClauses(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.QueryClauseSyntax})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.QueryBodySyntax.WithContinuation(Microsoft.CodeAnalysis.CSharp.Syntax.QueryContinuationSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.QueryBodySyntax.WithSelectOrGroup(Microsoft.CodeAnalysis.CSharp.Syntax.SelectOrGroupClauseSyntax)" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.QueryBodySyntax.Clauses" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.QueryBodySyntax.Continuation" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.QueryBodySyntax.SelectOrGroup" />
    </Type>
    <Type Name="Microsoft.CodeAnalysis.CSharp.Syntax.QueryClauseSyntax" Id="T:Microsoft.CodeAnalysis.CSharp.Syntax.QueryClauseSyntax" />
    <Type Name="Microsoft.CodeAnalysis.CSharp.Syntax.QueryContinuationSyntax" Id="T:Microsoft.CodeAnalysis.CSharp.Syntax.QueryContinuationSyntax">
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.QueryContinuationSyntax.Accept(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.QueryContinuationSyntax.Accept``1(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor{``0})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.QueryContinuationSyntax.AddBodyClauses(Microsoft.CodeAnalysis.CSharp.Syntax.QueryClauseSyntax[])" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.QueryContinuationSyntax.Update(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.QueryBodySyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.QueryContinuationSyntax.WithBody(Microsoft.CodeAnalysis.CSharp.Syntax.QueryBodySyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.QueryContinuationSyntax.WithIdentifier(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.QueryContinuationSyntax.WithIntoKeyword(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.QueryContinuationSyntax.Body" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.QueryContinuationSyntax.Identifier" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.QueryContinuationSyntax.IntoKeyword" />
    </Type>
    <Type Name="Microsoft.CodeAnalysis.CSharp.Syntax.QueryExpressionSyntax" Id="T:Microsoft.CodeAnalysis.CSharp.Syntax.QueryExpressionSyntax">
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.QueryExpressionSyntax.Accept(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.QueryExpressionSyntax.Accept``1(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor{``0})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.QueryExpressionSyntax.AddBodyClauses(Microsoft.CodeAnalysis.CSharp.Syntax.QueryClauseSyntax[])" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.QueryExpressionSyntax.Update(Microsoft.CodeAnalysis.CSharp.Syntax.FromClauseSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.QueryBodySyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.QueryExpressionSyntax.WithBody(Microsoft.CodeAnalysis.CSharp.Syntax.QueryBodySyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.QueryExpressionSyntax.WithFromClause(Microsoft.CodeAnalysis.CSharp.Syntax.FromClauseSyntax)" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.QueryExpressionSyntax.Body" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.QueryExpressionSyntax.FromClause" />
    </Type>
    <Type Name="Microsoft.CodeAnalysis.CSharp.Syntax.ReferenceDirectiveTriviaSyntax" Id="T:Microsoft.CodeAnalysis.CSharp.Syntax.ReferenceDirectiveTriviaSyntax">
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ReferenceDirectiveTriviaSyntax.Accept(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ReferenceDirectiveTriviaSyntax.Accept``1(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor{``0})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ReferenceDirectiveTriviaSyntax.Update(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,System.Boolean)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ReferenceDirectiveTriviaSyntax.WithEndOfDirectiveToken(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ReferenceDirectiveTriviaSyntax.WithFile(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ReferenceDirectiveTriviaSyntax.WithHashToken(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ReferenceDirectiveTriviaSyntax.WithIsActive(System.Boolean)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ReferenceDirectiveTriviaSyntax.WithReferenceKeyword(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.ReferenceDirectiveTriviaSyntax.EndOfDirectiveToken" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.ReferenceDirectiveTriviaSyntax.File" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.ReferenceDirectiveTriviaSyntax.HashToken" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.ReferenceDirectiveTriviaSyntax.IsActive" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.ReferenceDirectiveTriviaSyntax.ReferenceKeyword" />
    </Type>
    <Type Name="Microsoft.CodeAnalysis.CSharp.Syntax.RefExpressionSyntax" Id="T:Microsoft.CodeAnalysis.CSharp.Syntax.RefExpressionSyntax">
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.RefExpressionSyntax.Accept(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.RefExpressionSyntax.Accept``1(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor{``0})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.RefExpressionSyntax.Update(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.RefExpressionSyntax.WithExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.RefExpressionSyntax.WithRefKeyword(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.RefExpressionSyntax.Expression" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.RefExpressionSyntax.RefKeyword" />
    </Type>
    <Type Name="Microsoft.CodeAnalysis.CSharp.Syntax.RefTypeExpressionSyntax" Id="T:Microsoft.CodeAnalysis.CSharp.Syntax.RefTypeExpressionSyntax">
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.RefTypeExpressionSyntax.Accept(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.RefTypeExpressionSyntax.Accept``1(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor{``0})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.RefTypeExpressionSyntax.Update(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.RefTypeExpressionSyntax.WithCloseParenToken(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.RefTypeExpressionSyntax.WithExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.RefTypeExpressionSyntax.WithKeyword(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.RefTypeExpressionSyntax.WithOpenParenToken(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.RefTypeExpressionSyntax.CloseParenToken" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.RefTypeExpressionSyntax.Expression" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.RefTypeExpressionSyntax.Keyword" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.RefTypeExpressionSyntax.OpenParenToken" />
    </Type>
    <Type Name="Microsoft.CodeAnalysis.CSharp.Syntax.RefTypeSyntax" Id="T:Microsoft.CodeAnalysis.CSharp.Syntax.RefTypeSyntax">
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.RefTypeSyntax.Accept(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.RefTypeSyntax.Accept``1(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor{``0})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.RefTypeSyntax.Update(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.RefTypeSyntax.WithRefKeyword(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.RefTypeSyntax.WithType(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax)" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.RefTypeSyntax.RefKeyword" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.RefTypeSyntax.Type" />
    </Type>
    <Type Name="Microsoft.CodeAnalysis.CSharp.Syntax.RefValueExpressionSyntax" Id="T:Microsoft.CodeAnalysis.CSharp.Syntax.RefValueExpressionSyntax">
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.RefValueExpressionSyntax.Accept(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.RefValueExpressionSyntax.Accept``1(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor{``0})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.RefValueExpressionSyntax.Update(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.RefValueExpressionSyntax.WithCloseParenToken(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.RefValueExpressionSyntax.WithComma(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.RefValueExpressionSyntax.WithExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.RefValueExpressionSyntax.WithKeyword(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.RefValueExpressionSyntax.WithOpenParenToken(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.RefValueExpressionSyntax.WithType(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax)" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.RefValueExpressionSyntax.CloseParenToken" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.RefValueExpressionSyntax.Comma" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.RefValueExpressionSyntax.Expression" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.RefValueExpressionSyntax.Keyword" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.RefValueExpressionSyntax.OpenParenToken" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.RefValueExpressionSyntax.Type" />
    </Type>
    <Type Name="Microsoft.CodeAnalysis.CSharp.Syntax.RegionDirectiveTriviaSyntax" Id="T:Microsoft.CodeAnalysis.CSharp.Syntax.RegionDirectiveTriviaSyntax">
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.RegionDirectiveTriviaSyntax.Accept(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.RegionDirectiveTriviaSyntax.Accept``1(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor{``0})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.RegionDirectiveTriviaSyntax.Update(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,System.Boolean)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.RegionDirectiveTriviaSyntax.WithEndOfDirectiveToken(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.RegionDirectiveTriviaSyntax.WithHashToken(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.RegionDirectiveTriviaSyntax.WithIsActive(System.Boolean)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.RegionDirectiveTriviaSyntax.WithRegionKeyword(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.RegionDirectiveTriviaSyntax.EndOfDirectiveToken" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.RegionDirectiveTriviaSyntax.HashToken" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.RegionDirectiveTriviaSyntax.IsActive" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.RegionDirectiveTriviaSyntax.RegionKeyword" />
    </Type>
    <Type Name="Microsoft.CodeAnalysis.CSharp.Syntax.ReturnStatementSyntax" Id="T:Microsoft.CodeAnalysis.CSharp.Syntax.ReturnStatementSyntax">
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ReturnStatementSyntax.Accept(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ReturnStatementSyntax.Accept``1(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor{``0})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ReturnStatementSyntax.Update(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ReturnStatementSyntax.WithExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ReturnStatementSyntax.WithReturnKeyword(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ReturnStatementSyntax.WithSemicolonToken(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.ReturnStatementSyntax.Expression" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.ReturnStatementSyntax.ReturnKeyword" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.ReturnStatementSyntax.SemicolonToken" />
    </Type>
    <Type Name="Microsoft.CodeAnalysis.CSharp.Syntax.SelectClauseSyntax" Id="T:Microsoft.CodeAnalysis.CSharp.Syntax.SelectClauseSyntax">
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.SelectClauseSyntax.Accept(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.SelectClauseSyntax.Accept``1(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor{``0})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.SelectClauseSyntax.Update(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.SelectClauseSyntax.WithExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.SelectClauseSyntax.WithSelectKeyword(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.SelectClauseSyntax.Expression" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.SelectClauseSyntax.SelectKeyword" />
    </Type>
    <Type Name="Microsoft.CodeAnalysis.CSharp.Syntax.SelectOrGroupClauseSyntax" Id="T:Microsoft.CodeAnalysis.CSharp.Syntax.SelectOrGroupClauseSyntax" />
    <Type Name="Microsoft.CodeAnalysis.CSharp.Syntax.ShebangDirectiveTriviaSyntax" Id="T:Microsoft.CodeAnalysis.CSharp.Syntax.ShebangDirectiveTriviaSyntax">
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ShebangDirectiveTriviaSyntax.Accept(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ShebangDirectiveTriviaSyntax.Accept``1(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor{``0})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ShebangDirectiveTriviaSyntax.Update(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,System.Boolean)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ShebangDirectiveTriviaSyntax.WithEndOfDirectiveToken(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ShebangDirectiveTriviaSyntax.WithExclamationToken(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ShebangDirectiveTriviaSyntax.WithHashToken(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ShebangDirectiveTriviaSyntax.WithIsActive(System.Boolean)" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.ShebangDirectiveTriviaSyntax.EndOfDirectiveToken" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.ShebangDirectiveTriviaSyntax.ExclamationToken" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.ShebangDirectiveTriviaSyntax.HashToken" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.ShebangDirectiveTriviaSyntax.IsActive" />
    </Type>
    <Type Name="Microsoft.CodeAnalysis.CSharp.Syntax.SimpleBaseTypeSyntax" Id="T:Microsoft.CodeAnalysis.CSharp.Syntax.SimpleBaseTypeSyntax">
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.SimpleBaseTypeSyntax.Accept(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.SimpleBaseTypeSyntax.Accept``1(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor{``0})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.SimpleBaseTypeSyntax.Update(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.SimpleBaseTypeSyntax.WithType(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax)" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.SimpleBaseTypeSyntax.Type" />
    </Type>
    <Type Name="Microsoft.CodeAnalysis.CSharp.Syntax.SimpleLambdaExpressionSyntax" Id="T:Microsoft.CodeAnalysis.CSharp.Syntax.SimpleLambdaExpressionSyntax">
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.SimpleLambdaExpressionSyntax.Accept(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.SimpleLambdaExpressionSyntax.Accept``1(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor{``0})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.SimpleLambdaExpressionSyntax.AddParameterAttributeLists(Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax[])" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.SimpleLambdaExpressionSyntax.AddParameterModifiers(Microsoft.CodeAnalysis.SyntaxToken[])" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.SimpleLambdaExpressionSyntax.Update(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ParameterSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.SimpleLambdaExpressionSyntax.WithArrowToken(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.SimpleLambdaExpressionSyntax.WithAsyncKeyword(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.SimpleLambdaExpressionSyntax.WithBody(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.SimpleLambdaExpressionSyntax.WithParameter(Microsoft.CodeAnalysis.CSharp.Syntax.ParameterSyntax)" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.SimpleLambdaExpressionSyntax.ArrowToken" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.SimpleLambdaExpressionSyntax.AsyncKeyword" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.SimpleLambdaExpressionSyntax.Body" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.SimpleLambdaExpressionSyntax.Parameter" />
    </Type>
    <Type Name="Microsoft.CodeAnalysis.CSharp.Syntax.SimpleNameSyntax" Id="T:Microsoft.CodeAnalysis.CSharp.Syntax.SimpleNameSyntax">
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.SimpleNameSyntax.Identifier" />
    </Type>
    <Type Name="Microsoft.CodeAnalysis.CSharp.Syntax.SingleVariableDesignationSyntax" Id="T:Microsoft.CodeAnalysis.CSharp.Syntax.SingleVariableDesignationSyntax">
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.SingleVariableDesignationSyntax.Accept(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.SingleVariableDesignationSyntax.Accept``1(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor{``0})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.SingleVariableDesignationSyntax.Update(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.SingleVariableDesignationSyntax.WithIdentifier(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.SingleVariableDesignationSyntax.Identifier" />
    </Type>
    <Type Name="Microsoft.CodeAnalysis.CSharp.Syntax.SizeOfExpressionSyntax" Id="T:Microsoft.CodeAnalysis.CSharp.Syntax.SizeOfExpressionSyntax">
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.SizeOfExpressionSyntax.Accept(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.SizeOfExpressionSyntax.Accept``1(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor{``0})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.SizeOfExpressionSyntax.Update(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.SizeOfExpressionSyntax.WithCloseParenToken(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.SizeOfExpressionSyntax.WithKeyword(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.SizeOfExpressionSyntax.WithOpenParenToken(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.SizeOfExpressionSyntax.WithType(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax)" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.SizeOfExpressionSyntax.CloseParenToken" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.SizeOfExpressionSyntax.Keyword" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.SizeOfExpressionSyntax.OpenParenToken" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.SizeOfExpressionSyntax.Type" />
    </Type>
    <Type Name="Microsoft.CodeAnalysis.CSharp.Syntax.SkippedTokensTriviaSyntax" Id="T:Microsoft.CodeAnalysis.CSharp.Syntax.SkippedTokensTriviaSyntax">
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.SkippedTokensTriviaSyntax.Accept(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.SkippedTokensTriviaSyntax.Accept``1(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor{``0})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.SkippedTokensTriviaSyntax.AddTokens(Microsoft.CodeAnalysis.SyntaxToken[])" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.SkippedTokensTriviaSyntax.Update(Microsoft.CodeAnalysis.SyntaxTokenList)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.SkippedTokensTriviaSyntax.WithTokens(Microsoft.CodeAnalysis.SyntaxTokenList)" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.SkippedTokensTriviaSyntax.Tokens" />
    </Type>
    <Type Name="Microsoft.CodeAnalysis.CSharp.Syntax.StackAllocArrayCreationExpressionSyntax" Id="T:Microsoft.CodeAnalysis.CSharp.Syntax.StackAllocArrayCreationExpressionSyntax">
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.StackAllocArrayCreationExpressionSyntax.Accept(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.StackAllocArrayCreationExpressionSyntax.Accept``1(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor{``0})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.StackAllocArrayCreationExpressionSyntax.Update(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.StackAllocArrayCreationExpressionSyntax.WithStackAllocKeyword(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.StackAllocArrayCreationExpressionSyntax.WithType(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax)" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.StackAllocArrayCreationExpressionSyntax.StackAllocKeyword" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.StackAllocArrayCreationExpressionSyntax.Type" />
    </Type>
    <Type Name="Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax" Id="T:Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax" />
    <Type Name="Microsoft.CodeAnalysis.CSharp.Syntax.StructDeclarationSyntax" Id="T:Microsoft.CodeAnalysis.CSharp.Syntax.StructDeclarationSyntax">
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.StructDeclarationSyntax.Accept(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.StructDeclarationSyntax.Accept``1(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor{``0})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.StructDeclarationSyntax.AddAttributeLists(Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax[])" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.StructDeclarationSyntax.AddBaseListTypes(Microsoft.CodeAnalysis.CSharp.Syntax.BaseTypeSyntax[])" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.StructDeclarationSyntax.AddConstraintClauses(Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintClauseSyntax[])" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.StructDeclarationSyntax.AddMembers(Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax[])" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.StructDeclarationSyntax.AddModifiers(Microsoft.CodeAnalysis.SyntaxToken[])" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.StructDeclarationSyntax.AddTypeParameterListParameters(Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterSyntax[])" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.StructDeclarationSyntax.Update(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterListSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.BaseListSyntax,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintClauseSyntax},Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax},Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.StructDeclarationSyntax.WithAttributeLists(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.StructDeclarationSyntax.WithBaseList(Microsoft.CodeAnalysis.CSharp.Syntax.BaseListSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.StructDeclarationSyntax.WithCloseBraceToken(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.StructDeclarationSyntax.WithConstraintClauses(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintClauseSyntax})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.StructDeclarationSyntax.WithIdentifier(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.StructDeclarationSyntax.WithKeyword(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.StructDeclarationSyntax.WithMembers(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.StructDeclarationSyntax.WithModifiers(Microsoft.CodeAnalysis.SyntaxTokenList)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.StructDeclarationSyntax.WithOpenBraceToken(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.StructDeclarationSyntax.WithSemicolonToken(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.StructDeclarationSyntax.WithTypeParameterList(Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterListSyntax)" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.StructDeclarationSyntax.AttributeLists" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.StructDeclarationSyntax.BaseList" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.StructDeclarationSyntax.CloseBraceToken" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.StructDeclarationSyntax.ConstraintClauses" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.StructDeclarationSyntax.Identifier" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.StructDeclarationSyntax.Keyword" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.StructDeclarationSyntax.Members" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.StructDeclarationSyntax.Modifiers" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.StructDeclarationSyntax.OpenBraceToken" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.StructDeclarationSyntax.SemicolonToken" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.StructDeclarationSyntax.TypeParameterList" />
    </Type>
    <Type Name="Microsoft.CodeAnalysis.CSharp.Syntax.StructuredTriviaSyntax" Id="T:Microsoft.CodeAnalysis.CSharp.Syntax.StructuredTriviaSyntax">
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.StructuredTriviaSyntax.ParentTrivia" />
    </Type>
    <Type Name="Microsoft.CodeAnalysis.CSharp.Syntax.SwitchLabelSyntax" Id="T:Microsoft.CodeAnalysis.CSharp.Syntax.SwitchLabelSyntax">
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.SwitchLabelSyntax.ColonToken" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.SwitchLabelSyntax.Keyword" />
    </Type>
    <Type Name="Microsoft.CodeAnalysis.CSharp.Syntax.SwitchSectionSyntax" Id="T:Microsoft.CodeAnalysis.CSharp.Syntax.SwitchSectionSyntax">
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.SwitchSectionSyntax.Accept(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.SwitchSectionSyntax.Accept``1(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor{``0})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.SwitchSectionSyntax.AddLabels(Microsoft.CodeAnalysis.CSharp.Syntax.SwitchLabelSyntax[])" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.SwitchSectionSyntax.AddStatements(Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax[])" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.SwitchSectionSyntax.Update(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.SwitchLabelSyntax},Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.SwitchSectionSyntax.WithLabels(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.SwitchLabelSyntax})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.SwitchSectionSyntax.WithStatements(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax})" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.SwitchSectionSyntax.Labels" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.SwitchSectionSyntax.Statements" />
    </Type>
    <Type Name="Microsoft.CodeAnalysis.CSharp.Syntax.SwitchStatementSyntax" Id="T:Microsoft.CodeAnalysis.CSharp.Syntax.SwitchStatementSyntax">
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.SwitchStatementSyntax.Accept(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.SwitchStatementSyntax.Accept``1(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor{``0})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.SwitchStatementSyntax.AddSections(Microsoft.CodeAnalysis.CSharp.Syntax.SwitchSectionSyntax[])" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.SwitchStatementSyntax.Update(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.SwitchSectionSyntax},Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.SwitchStatementSyntax.WithCloseBraceToken(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.SwitchStatementSyntax.WithCloseParenToken(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.SwitchStatementSyntax.WithExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.SwitchStatementSyntax.WithOpenBraceToken(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.SwitchStatementSyntax.WithOpenParenToken(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.SwitchStatementSyntax.WithSections(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.SwitchSectionSyntax})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.SwitchStatementSyntax.WithSwitchKeyword(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.SwitchStatementSyntax.CloseBraceToken" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.SwitchStatementSyntax.CloseParenToken" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.SwitchStatementSyntax.Expression" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.SwitchStatementSyntax.OpenBraceToken" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.SwitchStatementSyntax.OpenParenToken" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.SwitchStatementSyntax.Sections" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.SwitchStatementSyntax.SwitchKeyword" />
    </Type>
    <Type Name="Microsoft.CodeAnalysis.CSharp.Syntax.ThisExpressionSyntax" Id="T:Microsoft.CodeAnalysis.CSharp.Syntax.ThisExpressionSyntax">
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ThisExpressionSyntax.Accept(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ThisExpressionSyntax.Accept``1(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor{``0})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ThisExpressionSyntax.Update(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ThisExpressionSyntax.WithToken(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.ThisExpressionSyntax.Token" />
    </Type>
    <Type Name="Microsoft.CodeAnalysis.CSharp.Syntax.ThrowExpressionSyntax" Id="T:Microsoft.CodeAnalysis.CSharp.Syntax.ThrowExpressionSyntax">
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ThrowExpressionSyntax.Accept(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ThrowExpressionSyntax.Accept``1(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor{``0})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ThrowExpressionSyntax.Update(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ThrowExpressionSyntax.WithExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ThrowExpressionSyntax.WithThrowKeyword(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.ThrowExpressionSyntax.Expression" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.ThrowExpressionSyntax.ThrowKeyword" />
    </Type>
    <Type Name="Microsoft.CodeAnalysis.CSharp.Syntax.ThrowStatementSyntax" Id="T:Microsoft.CodeAnalysis.CSharp.Syntax.ThrowStatementSyntax">
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ThrowStatementSyntax.Accept(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ThrowStatementSyntax.Accept``1(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor{``0})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ThrowStatementSyntax.Update(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ThrowStatementSyntax.WithExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ThrowStatementSyntax.WithSemicolonToken(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.ThrowStatementSyntax.WithThrowKeyword(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.ThrowStatementSyntax.Expression" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.ThrowStatementSyntax.SemicolonToken" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.ThrowStatementSyntax.ThrowKeyword" />
    </Type>
    <Type Name="Microsoft.CodeAnalysis.CSharp.Syntax.TryStatementSyntax" Id="T:Microsoft.CodeAnalysis.CSharp.Syntax.TryStatementSyntax">
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.TryStatementSyntax.Accept(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.TryStatementSyntax.Accept``1(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor{``0})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.TryStatementSyntax.AddBlockStatements(Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax[])" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.TryStatementSyntax.AddCatches(Microsoft.CodeAnalysis.CSharp.Syntax.CatchClauseSyntax[])" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.TryStatementSyntax.Update(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.CatchClauseSyntax},Microsoft.CodeAnalysis.CSharp.Syntax.FinallyClauseSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.TryStatementSyntax.WithBlock(Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.TryStatementSyntax.WithCatches(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.CatchClauseSyntax})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.TryStatementSyntax.WithFinally(Microsoft.CodeAnalysis.CSharp.Syntax.FinallyClauseSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.TryStatementSyntax.WithTryKeyword(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.TryStatementSyntax.Block" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.TryStatementSyntax.Catches" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.TryStatementSyntax.Finally" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.TryStatementSyntax.TryKeyword" />
    </Type>
    <Type Name="Microsoft.CodeAnalysis.CSharp.Syntax.TupleElementSyntax" Id="T:Microsoft.CodeAnalysis.CSharp.Syntax.TupleElementSyntax">
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.TupleElementSyntax.Accept(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.TupleElementSyntax.Accept``1(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor{``0})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.TupleElementSyntax.Update(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.TupleElementSyntax.WithIdentifier(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.TupleElementSyntax.WithType(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax)" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.TupleElementSyntax.Identifier" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.TupleElementSyntax.Type" />
    </Type>
    <Type Name="Microsoft.CodeAnalysis.CSharp.Syntax.TupleExpressionSyntax" Id="T:Microsoft.CodeAnalysis.CSharp.Syntax.TupleExpressionSyntax">
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.TupleExpressionSyntax.Accept(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.TupleExpressionSyntax.Accept``1(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor{``0})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.TupleExpressionSyntax.AddArguments(Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentSyntax[])" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.TupleExpressionSyntax.Update(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentSyntax},Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.TupleExpressionSyntax.WithArguments(Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentSyntax})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.TupleExpressionSyntax.WithCloseParenToken(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.TupleExpressionSyntax.WithOpenParenToken(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.TupleExpressionSyntax.Arguments" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.TupleExpressionSyntax.CloseParenToken" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.TupleExpressionSyntax.OpenParenToken" />
    </Type>
    <Type Name="Microsoft.CodeAnalysis.CSharp.Syntax.TupleTypeSyntax" Id="T:Microsoft.CodeAnalysis.CSharp.Syntax.TupleTypeSyntax">
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.TupleTypeSyntax.Accept(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.TupleTypeSyntax.Accept``1(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor{``0})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.TupleTypeSyntax.AddElements(Microsoft.CodeAnalysis.CSharp.Syntax.TupleElementSyntax[])" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.TupleTypeSyntax.Update(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.TupleElementSyntax},Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.TupleTypeSyntax.WithCloseParenToken(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.TupleTypeSyntax.WithElements(Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.TupleElementSyntax})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.TupleTypeSyntax.WithOpenParenToken(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.TupleTypeSyntax.CloseParenToken" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.TupleTypeSyntax.Elements" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.TupleTypeSyntax.OpenParenToken" />
    </Type>
    <Type Name="Microsoft.CodeAnalysis.CSharp.Syntax.TypeArgumentListSyntax" Id="T:Microsoft.CodeAnalysis.CSharp.Syntax.TypeArgumentListSyntax">
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.TypeArgumentListSyntax.Accept(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.TypeArgumentListSyntax.Accept``1(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor{``0})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.TypeArgumentListSyntax.AddArguments(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax[])" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.TypeArgumentListSyntax.Update(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax},Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.TypeArgumentListSyntax.WithArguments(Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.TypeArgumentListSyntax.WithGreaterThanToken(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.TypeArgumentListSyntax.WithLessThanToken(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.TypeArgumentListSyntax.Arguments" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.TypeArgumentListSyntax.GreaterThanToken" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.TypeArgumentListSyntax.LessThanToken" />
    </Type>
    <Type Name="Microsoft.CodeAnalysis.CSharp.Syntax.TypeConstraintSyntax" Id="T:Microsoft.CodeAnalysis.CSharp.Syntax.TypeConstraintSyntax">
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.TypeConstraintSyntax.Accept(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.TypeConstraintSyntax.Accept``1(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor{``0})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.TypeConstraintSyntax.Update(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.TypeConstraintSyntax.WithType(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax)" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.TypeConstraintSyntax.Type" />
    </Type>
    <Type Name="Microsoft.CodeAnalysis.CSharp.Syntax.TypeCrefSyntax" Id="T:Microsoft.CodeAnalysis.CSharp.Syntax.TypeCrefSyntax">
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.TypeCrefSyntax.Accept(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.TypeCrefSyntax.Accept``1(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor{``0})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.TypeCrefSyntax.Update(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.TypeCrefSyntax.WithType(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax)" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.TypeCrefSyntax.Type" />
    </Type>
    <Type Name="Microsoft.CodeAnalysis.CSharp.Syntax.TypeDeclarationSyntax" Id="T:Microsoft.CodeAnalysis.CSharp.Syntax.TypeDeclarationSyntax">
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.TypeDeclarationSyntax.Arity" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.TypeDeclarationSyntax.ConstraintClauses" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.TypeDeclarationSyntax.Keyword" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.TypeDeclarationSyntax.Members" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.TypeDeclarationSyntax.TypeParameterList" />
    </Type>
    <Type Name="Microsoft.CodeAnalysis.CSharp.Syntax.TypeOfExpressionSyntax" Id="T:Microsoft.CodeAnalysis.CSharp.Syntax.TypeOfExpressionSyntax">
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.TypeOfExpressionSyntax.Accept(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.TypeOfExpressionSyntax.Accept``1(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor{``0})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.TypeOfExpressionSyntax.Update(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.TypeOfExpressionSyntax.WithCloseParenToken(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.TypeOfExpressionSyntax.WithKeyword(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.TypeOfExpressionSyntax.WithOpenParenToken(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.TypeOfExpressionSyntax.WithType(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax)" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.TypeOfExpressionSyntax.CloseParenToken" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.TypeOfExpressionSyntax.Keyword" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.TypeOfExpressionSyntax.OpenParenToken" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.TypeOfExpressionSyntax.Type" />
    </Type>
    <Type Name="Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintClauseSyntax" Id="T:Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintClauseSyntax">
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintClauseSyntax.Accept(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintClauseSyntax.Accept``1(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor{``0})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintClauseSyntax.AddConstraints(Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintSyntax[])" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintClauseSyntax.Update(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.IdentifierNameSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintSyntax})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintClauseSyntax.WithColonToken(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintClauseSyntax.WithConstraints(Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintSyntax})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintClauseSyntax.WithName(Microsoft.CodeAnalysis.CSharp.Syntax.IdentifierNameSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintClauseSyntax.WithWhereKeyword(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintClauseSyntax.ColonToken" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintClauseSyntax.Constraints" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintClauseSyntax.Name" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintClauseSyntax.WhereKeyword" />
    </Type>
    <Type Name="Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintSyntax" Id="T:Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintSyntax" />
    <Type Name="Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterListSyntax" Id="T:Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterListSyntax">
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterListSyntax.Accept(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterListSyntax.Accept``1(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor{``0})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterListSyntax.AddParameters(Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterSyntax[])" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterListSyntax.Update(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterSyntax},Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterListSyntax.WithGreaterThanToken(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterListSyntax.WithLessThanToken(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterListSyntax.WithParameters(Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterSyntax})" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterListSyntax.GreaterThanToken" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterListSyntax.LessThanToken" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterListSyntax.Parameters" />
    </Type>
    <Type Name="Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterSyntax" Id="T:Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterSyntax">
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterSyntax.Accept(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterSyntax.Accept``1(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor{``0})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterSyntax.AddAttributeLists(Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax[])" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterSyntax.Update(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterSyntax.WithAttributeLists(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterSyntax.WithIdentifier(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterSyntax.WithVarianceKeyword(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterSyntax.AttributeLists" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterSyntax.Identifier" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterSyntax.VarianceKeyword" />
    </Type>
    <Type Name="Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax" Id="T:Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax">
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax.IsVar" />
    </Type>
    <Type Name="Microsoft.CodeAnalysis.CSharp.Syntax.UndefDirectiveTriviaSyntax" Id="T:Microsoft.CodeAnalysis.CSharp.Syntax.UndefDirectiveTriviaSyntax">
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.UndefDirectiveTriviaSyntax.Accept(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.UndefDirectiveTriviaSyntax.Accept``1(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor{``0})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.UndefDirectiveTriviaSyntax.Update(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,System.Boolean)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.UndefDirectiveTriviaSyntax.WithEndOfDirectiveToken(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.UndefDirectiveTriviaSyntax.WithHashToken(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.UndefDirectiveTriviaSyntax.WithIsActive(System.Boolean)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.UndefDirectiveTriviaSyntax.WithName(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.UndefDirectiveTriviaSyntax.WithUndefKeyword(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.UndefDirectiveTriviaSyntax.EndOfDirectiveToken" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.UndefDirectiveTriviaSyntax.HashToken" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.UndefDirectiveTriviaSyntax.IsActive" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.UndefDirectiveTriviaSyntax.Name" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.UndefDirectiveTriviaSyntax.UndefKeyword" />
    </Type>
    <Type Name="Microsoft.CodeAnalysis.CSharp.Syntax.UnsafeStatementSyntax" Id="T:Microsoft.CodeAnalysis.CSharp.Syntax.UnsafeStatementSyntax">
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.UnsafeStatementSyntax.Accept(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.UnsafeStatementSyntax.Accept``1(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor{``0})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.UnsafeStatementSyntax.AddBlockStatements(Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax[])" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.UnsafeStatementSyntax.Update(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.UnsafeStatementSyntax.WithBlock(Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.UnsafeStatementSyntax.WithUnsafeKeyword(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.UnsafeStatementSyntax.Block" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.UnsafeStatementSyntax.UnsafeKeyword" />
    </Type>
    <Type Name="Microsoft.CodeAnalysis.CSharp.Syntax.UsingDirectiveSyntax" Id="T:Microsoft.CodeAnalysis.CSharp.Syntax.UsingDirectiveSyntax">
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.UsingDirectiveSyntax.Accept(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.UsingDirectiveSyntax.Accept``1(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor{``0})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.UsingDirectiveSyntax.Update(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.NameEqualsSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.NameSyntax,Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.UsingDirectiveSyntax.WithAlias(Microsoft.CodeAnalysis.CSharp.Syntax.NameEqualsSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.UsingDirectiveSyntax.WithName(Microsoft.CodeAnalysis.CSharp.Syntax.NameSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.UsingDirectiveSyntax.WithSemicolonToken(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.UsingDirectiveSyntax.WithStaticKeyword(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.UsingDirectiveSyntax.WithUsingKeyword(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.UsingDirectiveSyntax.Alias" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.UsingDirectiveSyntax.Name" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.UsingDirectiveSyntax.SemicolonToken" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.UsingDirectiveSyntax.StaticKeyword" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.UsingDirectiveSyntax.UsingKeyword" />
    </Type>
    <Type Name="Microsoft.CodeAnalysis.CSharp.Syntax.UsingStatementSyntax" Id="T:Microsoft.CodeAnalysis.CSharp.Syntax.UsingStatementSyntax">
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.UsingStatementSyntax.Accept(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.UsingStatementSyntax.Accept``1(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor{``0})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.UsingStatementSyntax.Update(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclarationSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.UsingStatementSyntax.WithCloseParenToken(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.UsingStatementSyntax.WithDeclaration(Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclarationSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.UsingStatementSyntax.WithExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.UsingStatementSyntax.WithOpenParenToken(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.UsingStatementSyntax.WithStatement(Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.UsingStatementSyntax.WithUsingKeyword(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.UsingStatementSyntax.CloseParenToken" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.UsingStatementSyntax.Declaration" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.UsingStatementSyntax.Expression" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.UsingStatementSyntax.OpenParenToken" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.UsingStatementSyntax.Statement" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.UsingStatementSyntax.UsingKeyword" />
    </Type>
    <Type Name="Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclarationSyntax" Id="T:Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclarationSyntax">
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclarationSyntax.Accept(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclarationSyntax.Accept``1(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor{``0})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclarationSyntax.AddVariables(Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclaratorSyntax[])" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclarationSyntax.Update(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclaratorSyntax})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclarationSyntax.WithType(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclarationSyntax.WithVariables(Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclaratorSyntax})" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclarationSyntax.Type" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclarationSyntax.Variables" />
    </Type>
    <Type Name="Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclaratorSyntax" Id="T:Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclaratorSyntax">
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclaratorSyntax.Accept(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclaratorSyntax.Accept``1(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor{``0})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclaratorSyntax.AddArgumentListArguments(Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentSyntax[])" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclaratorSyntax.Update(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.BracketedArgumentListSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.EqualsValueClauseSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclaratorSyntax.WithArgumentList(Microsoft.CodeAnalysis.CSharp.Syntax.BracketedArgumentListSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclaratorSyntax.WithIdentifier(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclaratorSyntax.WithInitializer(Microsoft.CodeAnalysis.CSharp.Syntax.EqualsValueClauseSyntax)" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclaratorSyntax.ArgumentList" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclaratorSyntax.Identifier" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclaratorSyntax.Initializer" />
    </Type>
    <Type Name="Microsoft.CodeAnalysis.CSharp.Syntax.VariableDesignationSyntax" Id="T:Microsoft.CodeAnalysis.CSharp.Syntax.VariableDesignationSyntax" />
    <Type Name="Microsoft.CodeAnalysis.CSharp.Syntax.WarningDirectiveTriviaSyntax" Id="T:Microsoft.CodeAnalysis.CSharp.Syntax.WarningDirectiveTriviaSyntax">
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.WarningDirectiveTriviaSyntax.Accept(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.WarningDirectiveTriviaSyntax.Accept``1(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor{``0})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.WarningDirectiveTriviaSyntax.Update(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,System.Boolean)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.WarningDirectiveTriviaSyntax.WithEndOfDirectiveToken(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.WarningDirectiveTriviaSyntax.WithHashToken(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.WarningDirectiveTriviaSyntax.WithIsActive(System.Boolean)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.WarningDirectiveTriviaSyntax.WithWarningKeyword(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.WarningDirectiveTriviaSyntax.EndOfDirectiveToken" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.WarningDirectiveTriviaSyntax.HashToken" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.WarningDirectiveTriviaSyntax.IsActive" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.WarningDirectiveTriviaSyntax.WarningKeyword" />
    </Type>
    <Type Name="Microsoft.CodeAnalysis.CSharp.Syntax.WhenClauseSyntax" Id="T:Microsoft.CodeAnalysis.CSharp.Syntax.WhenClauseSyntax">
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.WhenClauseSyntax.Accept(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.WhenClauseSyntax.Accept``1(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor{``0})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.WhenClauseSyntax.Update(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.WhenClauseSyntax.WithCondition(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.WhenClauseSyntax.WithWhenKeyword(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.WhenClauseSyntax.Condition" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.WhenClauseSyntax.WhenKeyword" />
    </Type>
    <Type Name="Microsoft.CodeAnalysis.CSharp.Syntax.WhereClauseSyntax" Id="T:Microsoft.CodeAnalysis.CSharp.Syntax.WhereClauseSyntax">
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.WhereClauseSyntax.Accept(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.WhereClauseSyntax.Accept``1(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor{``0})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.WhereClauseSyntax.Update(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.WhereClauseSyntax.WithCondition(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.WhereClauseSyntax.WithWhereKeyword(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.WhereClauseSyntax.Condition" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.WhereClauseSyntax.WhereKeyword" />
    </Type>
    <Type Name="Microsoft.CodeAnalysis.CSharp.Syntax.WhileStatementSyntax" Id="T:Microsoft.CodeAnalysis.CSharp.Syntax.WhileStatementSyntax">
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.WhileStatementSyntax.Accept(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.WhileStatementSyntax.Accept``1(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor{``0})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.WhileStatementSyntax.Update(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.WhileStatementSyntax.WithCloseParenToken(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.WhileStatementSyntax.WithCondition(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.WhileStatementSyntax.WithOpenParenToken(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.WhileStatementSyntax.WithStatement(Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.WhileStatementSyntax.WithWhileKeyword(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.WhileStatementSyntax.CloseParenToken" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.WhileStatementSyntax.Condition" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.WhileStatementSyntax.OpenParenToken" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.WhileStatementSyntax.Statement" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.WhileStatementSyntax.WhileKeyword" />
    </Type>
    <Type Name="Microsoft.CodeAnalysis.CSharp.Syntax.XmlAttributeSyntax" Id="T:Microsoft.CodeAnalysis.CSharp.Syntax.XmlAttributeSyntax">
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.XmlAttributeSyntax.EndQuoteToken" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.XmlAttributeSyntax.EqualsToken" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.XmlAttributeSyntax.Name" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.XmlAttributeSyntax.StartQuoteToken" />
    </Type>
    <Type Name="Microsoft.CodeAnalysis.CSharp.Syntax.XmlCDataSectionSyntax" Id="T:Microsoft.CodeAnalysis.CSharp.Syntax.XmlCDataSectionSyntax">
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.XmlCDataSectionSyntax.Accept(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.XmlCDataSectionSyntax.Accept``1(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor{``0})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.XmlCDataSectionSyntax.AddTextTokens(Microsoft.CodeAnalysis.SyntaxToken[])" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.XmlCDataSectionSyntax.Update(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.XmlCDataSectionSyntax.WithEndCDataToken(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.XmlCDataSectionSyntax.WithStartCDataToken(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.XmlCDataSectionSyntax.WithTextTokens(Microsoft.CodeAnalysis.SyntaxTokenList)" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.XmlCDataSectionSyntax.EndCDataToken" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.XmlCDataSectionSyntax.StartCDataToken" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.XmlCDataSectionSyntax.TextTokens" />
    </Type>
    <Type Name="Microsoft.CodeAnalysis.CSharp.Syntax.XmlCommentSyntax" Id="T:Microsoft.CodeAnalysis.CSharp.Syntax.XmlCommentSyntax">
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.XmlCommentSyntax.Accept(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.XmlCommentSyntax.Accept``1(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor{``0})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.XmlCommentSyntax.AddTextTokens(Microsoft.CodeAnalysis.SyntaxToken[])" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.XmlCommentSyntax.Update(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.XmlCommentSyntax.WithLessThanExclamationMinusMinusToken(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.XmlCommentSyntax.WithMinusMinusGreaterThanToken(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.XmlCommentSyntax.WithTextTokens(Microsoft.CodeAnalysis.SyntaxTokenList)" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.XmlCommentSyntax.LessThanExclamationMinusMinusToken" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.XmlCommentSyntax.MinusMinusGreaterThanToken" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.XmlCommentSyntax.TextTokens" />
    </Type>
    <Type Name="Microsoft.CodeAnalysis.CSharp.Syntax.XmlCrefAttributeSyntax" Id="T:Microsoft.CodeAnalysis.CSharp.Syntax.XmlCrefAttributeSyntax">
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.XmlCrefAttributeSyntax.Accept(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.XmlCrefAttributeSyntax.Accept``1(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor{``0})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.XmlCrefAttributeSyntax.Update(Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.CrefSyntax,Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.XmlCrefAttributeSyntax.WithCref(Microsoft.CodeAnalysis.CSharp.Syntax.CrefSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.XmlCrefAttributeSyntax.WithEndQuoteToken(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.XmlCrefAttributeSyntax.WithEqualsToken(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.XmlCrefAttributeSyntax.WithName(Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.XmlCrefAttributeSyntax.WithStartQuoteToken(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.XmlCrefAttributeSyntax.Cref" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.XmlCrefAttributeSyntax.EndQuoteToken" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.XmlCrefAttributeSyntax.EqualsToken" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.XmlCrefAttributeSyntax.Name" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.XmlCrefAttributeSyntax.StartQuoteToken" />
    </Type>
    <Type Name="Microsoft.CodeAnalysis.CSharp.Syntax.XmlElementEndTagSyntax" Id="T:Microsoft.CodeAnalysis.CSharp.Syntax.XmlElementEndTagSyntax">
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.XmlElementEndTagSyntax.Accept(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.XmlElementEndTagSyntax.Accept``1(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor{``0})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.XmlElementEndTagSyntax.Update(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax,Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.XmlElementEndTagSyntax.WithGreaterThanToken(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.XmlElementEndTagSyntax.WithLessThanSlashToken(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.XmlElementEndTagSyntax.WithName(Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax)" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.XmlElementEndTagSyntax.GreaterThanToken" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.XmlElementEndTagSyntax.LessThanSlashToken" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.XmlElementEndTagSyntax.Name" />
    </Type>
    <Type Name="Microsoft.CodeAnalysis.CSharp.Syntax.XmlElementStartTagSyntax" Id="T:Microsoft.CodeAnalysis.CSharp.Syntax.XmlElementStartTagSyntax">
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.XmlElementStartTagSyntax.Accept(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.XmlElementStartTagSyntax.Accept``1(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor{``0})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.XmlElementStartTagSyntax.AddAttributes(Microsoft.CodeAnalysis.CSharp.Syntax.XmlAttributeSyntax[])" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.XmlElementStartTagSyntax.Update(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.XmlAttributeSyntax},Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.XmlElementStartTagSyntax.WithAttributes(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.XmlAttributeSyntax})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.XmlElementStartTagSyntax.WithGreaterThanToken(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.XmlElementStartTagSyntax.WithLessThanToken(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.XmlElementStartTagSyntax.WithName(Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax)" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.XmlElementStartTagSyntax.Attributes" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.XmlElementStartTagSyntax.GreaterThanToken" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.XmlElementStartTagSyntax.LessThanToken" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.XmlElementStartTagSyntax.Name" />
    </Type>
    <Type Name="Microsoft.CodeAnalysis.CSharp.Syntax.XmlElementSyntax" Id="T:Microsoft.CodeAnalysis.CSharp.Syntax.XmlElementSyntax">
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.XmlElementSyntax.Accept(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.XmlElementSyntax.Accept``1(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor{``0})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.XmlElementSyntax.AddContent(Microsoft.CodeAnalysis.CSharp.Syntax.XmlNodeSyntax[])" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.XmlElementSyntax.AddStartTagAttributes(Microsoft.CodeAnalysis.CSharp.Syntax.XmlAttributeSyntax[])" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.XmlElementSyntax.Update(Microsoft.CodeAnalysis.CSharp.Syntax.XmlElementStartTagSyntax,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.XmlNodeSyntax},Microsoft.CodeAnalysis.CSharp.Syntax.XmlElementEndTagSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.XmlElementSyntax.WithContent(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.XmlNodeSyntax})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.XmlElementSyntax.WithEndTag(Microsoft.CodeAnalysis.CSharp.Syntax.XmlElementEndTagSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.XmlElementSyntax.WithStartTag(Microsoft.CodeAnalysis.CSharp.Syntax.XmlElementStartTagSyntax)" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.XmlElementSyntax.Content" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.XmlElementSyntax.EndTag" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.XmlElementSyntax.StartTag" />
    </Type>
    <Type Name="Microsoft.CodeAnalysis.CSharp.Syntax.XmlEmptyElementSyntax" Id="T:Microsoft.CodeAnalysis.CSharp.Syntax.XmlEmptyElementSyntax">
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.XmlEmptyElementSyntax.Accept(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.XmlEmptyElementSyntax.Accept``1(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor{``0})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.XmlEmptyElementSyntax.AddAttributes(Microsoft.CodeAnalysis.CSharp.Syntax.XmlAttributeSyntax[])" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.XmlEmptyElementSyntax.Update(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.XmlAttributeSyntax},Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.XmlEmptyElementSyntax.WithAttributes(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.XmlAttributeSyntax})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.XmlEmptyElementSyntax.WithLessThanToken(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.XmlEmptyElementSyntax.WithName(Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.XmlEmptyElementSyntax.WithSlashGreaterThanToken(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.XmlEmptyElementSyntax.Attributes" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.XmlEmptyElementSyntax.LessThanToken" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.XmlEmptyElementSyntax.Name" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.XmlEmptyElementSyntax.SlashGreaterThanToken" />
    </Type>
    <Type Name="Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameAttributeElementKind" Id="T:Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameAttributeElementKind">
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameAttributeElementKind.Parameter" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameAttributeElementKind.ParameterReference" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameAttributeElementKind.TypeParameter" />
      <Member Id="F:Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameAttributeElementKind.TypeParameterReference" />
    </Type>
    <Type Name="Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameAttributeSyntax" Id="T:Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameAttributeSyntax">
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameAttributeSyntax.Accept(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameAttributeSyntax.Accept``1(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor{``0})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameAttributeSyntax.Update(Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.IdentifierNameSyntax,Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameAttributeSyntax.WithEndQuoteToken(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameAttributeSyntax.WithEqualsToken(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameAttributeSyntax.WithIdentifier(Microsoft.CodeAnalysis.CSharp.Syntax.IdentifierNameSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameAttributeSyntax.WithName(Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameAttributeSyntax.WithStartQuoteToken(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameAttributeSyntax.EndQuoteToken" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameAttributeSyntax.EqualsToken" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameAttributeSyntax.Identifier" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameAttributeSyntax.Name" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameAttributeSyntax.StartQuoteToken" />
    </Type>
    <Type Name="Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax" Id="T:Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax">
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax.Accept(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax.Accept``1(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor{``0})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax.Update(Microsoft.CodeAnalysis.CSharp.Syntax.XmlPrefixSyntax,Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax.WithLocalName(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax.WithPrefix(Microsoft.CodeAnalysis.CSharp.Syntax.XmlPrefixSyntax)" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax.LocalName" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax.Prefix" />
    </Type>
    <Type Name="Microsoft.CodeAnalysis.CSharp.Syntax.XmlNodeSyntax" Id="T:Microsoft.CodeAnalysis.CSharp.Syntax.XmlNodeSyntax" />
    <Type Name="Microsoft.CodeAnalysis.CSharp.Syntax.XmlPrefixSyntax" Id="T:Microsoft.CodeAnalysis.CSharp.Syntax.XmlPrefixSyntax">
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.XmlPrefixSyntax.Accept(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.XmlPrefixSyntax.Accept``1(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor{``0})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.XmlPrefixSyntax.Update(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.XmlPrefixSyntax.WithColonToken(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.XmlPrefixSyntax.WithPrefix(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.XmlPrefixSyntax.ColonToken" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.XmlPrefixSyntax.Prefix" />
    </Type>
    <Type Name="Microsoft.CodeAnalysis.CSharp.Syntax.XmlProcessingInstructionSyntax" Id="T:Microsoft.CodeAnalysis.CSharp.Syntax.XmlProcessingInstructionSyntax">
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.XmlProcessingInstructionSyntax.Accept(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.XmlProcessingInstructionSyntax.Accept``1(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor{``0})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.XmlProcessingInstructionSyntax.AddTextTokens(Microsoft.CodeAnalysis.SyntaxToken[])" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.XmlProcessingInstructionSyntax.Update(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax,Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.XmlProcessingInstructionSyntax.WithEndProcessingInstructionToken(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.XmlProcessingInstructionSyntax.WithName(Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.XmlProcessingInstructionSyntax.WithStartProcessingInstructionToken(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.XmlProcessingInstructionSyntax.WithTextTokens(Microsoft.CodeAnalysis.SyntaxTokenList)" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.XmlProcessingInstructionSyntax.EndProcessingInstructionToken" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.XmlProcessingInstructionSyntax.Name" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.XmlProcessingInstructionSyntax.StartProcessingInstructionToken" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.XmlProcessingInstructionSyntax.TextTokens" />
    </Type>
    <Type Name="Microsoft.CodeAnalysis.CSharp.Syntax.XmlTextAttributeSyntax" Id="T:Microsoft.CodeAnalysis.CSharp.Syntax.XmlTextAttributeSyntax">
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.XmlTextAttributeSyntax.Accept(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.XmlTextAttributeSyntax.Accept``1(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor{``0})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.XmlTextAttributeSyntax.AddTextTokens(Microsoft.CodeAnalysis.SyntaxToken[])" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.XmlTextAttributeSyntax.Update(Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.XmlTextAttributeSyntax.WithEndQuoteToken(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.XmlTextAttributeSyntax.WithEqualsToken(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.XmlTextAttributeSyntax.WithName(Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.XmlTextAttributeSyntax.WithStartQuoteToken(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.XmlTextAttributeSyntax.WithTextTokens(Microsoft.CodeAnalysis.SyntaxTokenList)" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.XmlTextAttributeSyntax.EndQuoteToken" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.XmlTextAttributeSyntax.EqualsToken" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.XmlTextAttributeSyntax.Name" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.XmlTextAttributeSyntax.StartQuoteToken" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.XmlTextAttributeSyntax.TextTokens" />
    </Type>
    <Type Name="Microsoft.CodeAnalysis.CSharp.Syntax.XmlTextSyntax" Id="T:Microsoft.CodeAnalysis.CSharp.Syntax.XmlTextSyntax">
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.XmlTextSyntax.Accept(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.XmlTextSyntax.Accept``1(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor{``0})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.XmlTextSyntax.AddTextTokens(Microsoft.CodeAnalysis.SyntaxToken[])" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.XmlTextSyntax.Update(Microsoft.CodeAnalysis.SyntaxTokenList)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.XmlTextSyntax.WithTextTokens(Microsoft.CodeAnalysis.SyntaxTokenList)" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.XmlTextSyntax.TextTokens" />
    </Type>
    <Type Name="Microsoft.CodeAnalysis.CSharp.Syntax.YieldStatementSyntax" Id="T:Microsoft.CodeAnalysis.CSharp.Syntax.YieldStatementSyntax">
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.YieldStatementSyntax.Accept(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.YieldStatementSyntax.Accept``1(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor{``0})" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.YieldStatementSyntax.Update(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.YieldStatementSyntax.WithExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.YieldStatementSyntax.WithReturnOrBreakKeyword(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.YieldStatementSyntax.WithSemicolonToken(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharp.Syntax.YieldStatementSyntax.WithYieldKeyword(Microsoft.CodeAnalysis.SyntaxToken)" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.YieldStatementSyntax.Expression" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.YieldStatementSyntax.ReturnOrBreakKeyword" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.YieldStatementSyntax.SemicolonToken" />
      <Member Id="P:Microsoft.CodeAnalysis.CSharp.Syntax.YieldStatementSyntax.YieldKeyword" />
    </Type>
  </Namespace>
  <Namespace Name="Microsoft.CodeAnalysis">
    <Type Name="Microsoft.CodeAnalysis.CSharpExtensions" Id="T:Microsoft.CodeAnalysis.CSharpExtensions">
      <Member Id="M:Microsoft.CodeAnalysis.CSharpExtensions.Any(Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.CSharp.SyntaxKind)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharpExtensions.Any(Microsoft.CodeAnalysis.SyntaxTriviaList,Microsoft.CodeAnalysis.CSharp.SyntaxKind)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharpExtensions.Any``1(Microsoft.CodeAnalysis.SeparatedSyntaxList{``0},Microsoft.CodeAnalysis.CSharp.SyntaxKind)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharpExtensions.Any``1(Microsoft.CodeAnalysis.SyntaxList{``0},Microsoft.CodeAnalysis.CSharp.SyntaxKind)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharpExtensions.IndexOf(Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.CSharp.SyntaxKind)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharpExtensions.IndexOf(Microsoft.CodeAnalysis.SyntaxTriviaList,Microsoft.CodeAnalysis.CSharp.SyntaxKind)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharpExtensions.IndexOf``1(Microsoft.CodeAnalysis.SeparatedSyntaxList{``0},Microsoft.CodeAnalysis.CSharp.SyntaxKind)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharpExtensions.IndexOf``1(Microsoft.CodeAnalysis.SyntaxList{``0},Microsoft.CodeAnalysis.CSharp.SyntaxKind)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharpExtensions.IsKind(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.CSharp.SyntaxKind)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharpExtensions.IsKind(Microsoft.CodeAnalysis.SyntaxNodeOrToken,Microsoft.CodeAnalysis.CSharp.SyntaxKind)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharpExtensions.IsKind(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.SyntaxKind)" />
      <Member Id="M:Microsoft.CodeAnalysis.CSharpExtensions.IsKind(Microsoft.CodeAnalysis.SyntaxTrivia,Microsoft.CodeAnalysis.CSharp.SyntaxKind)" />
    </Type>
  </Namespace>
</Framework>